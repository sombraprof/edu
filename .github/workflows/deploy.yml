name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  issues: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Validar conteúdo e gerar relatório
        id: validate_report
        run: npm run validate:report
        continue-on-error: true

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: content-validation-report
          path: reports/content-validation-report.json
          if-no-files-found: error

      - name: Generate observability report
        id: observability
        run: npm run report:observability:check
        continue-on-error: true

      - name: Upload observability report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: content-observability-report
          path: reports/content-observability.json
          if-no-files-found: error

      - name: Generate governance summary
        if: always()
        run: npm run report:governance

      - name: Generate governance history snapshot
        if: always()
        run: npm run report:governance:history

      - name: Chromatic visual regression
        if: steps.validate_report.outcome == 'success' && steps.observability.outcome == 'success'
        env:
          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
        run: |
          if [ -z "$CHROMATIC_PROJECT_TOKEN" ]; then
            echo "Chromatic token not configured; skipping visual regression." && exit 0
          fi
          npx chromatic --project-token=$CHROMATIC_PROJECT_TOKEN --exit-zero-on-changes --only-changed

      - name: Compose governance issue body
        if: always()
        run: |
          node -e "const fs=require('fs');const path=require('path');const reports=path.join(process.cwd(),'reports');const base=path.join(reports,'governance-alert.md');const history=path.join(reports,'governance-history.md');const target=path.join(reports,'governance-issue.md');const parts=[];if(fs.existsSync(base)){parts.push(fs.readFileSync(base,'utf8').trim());}if(fs.existsSync(history)){parts.push(fs.readFileSync(history,'utf8').trim());}const body=parts.filter(Boolean).join('\n\n');fs.writeFileSync(target, body ? body + '\n' : body);"

      - name: Upload governance summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: content-governance-alert
          path: |
            reports/governance-alert.md
            reports/governance-alert.json
            reports/governance-history.md
            reports/governance-history-summary.json
            reports/governance-trends.json
            reports/governance-issue.md
          if-no-files-found: error

      - name: Atualizar issue de governança
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const issueTitle = 'Governança de conteúdo: alerta automático';
            const summaryPath = path.join(process.cwd(), 'reports', 'governance-issue.md');
            const metaPath = path.join(process.cwd(), 'reports', 'governance-alert.json');

            if (!fs.existsSync(metaPath)) {
              core.warning('Arquivo de metadados do alerta não encontrado. Pulando atualização de issue.');
              return;
            }

            const meta = JSON.parse(fs.readFileSync(metaPath, 'utf8'));
            const fallbackPath = path.join(process.cwd(), 'reports', 'governance-alert.md');
            const summaryCandidate = fs.existsSync(summaryPath)
              ? summaryPath
              : fallbackPath;
            const body = fs.existsSync(summaryCandidate)
              ? fs.readFileSync(summaryCandidate, 'utf8')
              : 'Relatório de governança indisponível.';

            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100,
            });

            const current = existingIssues.find((issue) => issue.title === issueTitle);

            if (meta.flags.shouldOpenIssue) {
              if (current) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: current.number,
                  body,
                  labels: ['governanca-automatica'],
                });
              } else {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body,
                  labels: ['governanca-automatica'],
                });
              }
            } else if (current) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: current.number,
                state: 'closed',
              });
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: current.number,
                body: '✅ Nenhum apontamento pendente. Issue fechada automaticamente.',
              });
            }

      - name: Fail if content validation failed
        if: steps.validate_report.outcome == 'failure'
        run: |
          echo "Content validation failed. Consulte o artefato gerado para detalhes."
          exit 1

      - name: Fail if observability reported metadata gaps
        if: steps.observability.outcome == 'failure'
        run: |
          echo "Relatório de observabilidade encontrou itens sem metadados obrigatórios."
          exit 1

      - name: Build
        if: steps.validate_report.outcome == 'success' && steps.observability.outcome == 'success'
        run: npm run build

      - name: Upload artifact
        if: steps.validate_report.outcome == 'success' && steps.observability.outcome == 'success'
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

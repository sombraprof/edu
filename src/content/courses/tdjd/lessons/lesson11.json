{
  "id": "lesson11",
  "title": "Aula 11: Publicação",
  "objective": "",
  "content": [
    {
      "type": "html",
      "html": "<!DOCTYPE html>\n<html lang=\"pt-BR\" class=\"scroll-smooth\">\n  <head>\n    <!-- Essential Meta Tags -->\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>TDJD - Aula 11: Métodos, Eventos e Corrotinas em C#</title>\n    <meta\n      name=\"description\"\n      content=\"Unidade III – Programação com C# para Games. Aprenda a usar métodos, eventos e corrotinas (coroutines) na Unity para criar comportamentos temporizados e sequenciais.\"\n    />\n    <meta name=\"author\" content=\"Prof. Tiago Guimarães Sombra\" />\n    <meta\n      name=\"keywords\"\n      content=\"Unity, C#, Coroutines, Corrotinas, Eventos, Métodos, Programação de Jogos, Temporizadores, Delay\"\n    />\n\n    <!-- Open Graph / Facebook -->\n    <meta property=\"og:type\" content=\"website\" />\n    <meta property=\"og:url\" content=\"URL_DA_SUA_PAGINA_AQUI\" />\n    <meta\n      property=\"og:title\"\n      content=\"TDJD - Aula 11: Métodos, Eventos e Corrotinas em C#\"\n    />\n    <meta\n      property=\"og:description\"\n      content=\"Domine a manipulação de tempo e eventos na Unity com corrotinas para criar animações, delays e sequências complexas de gameplay.\"\n    />\n    <meta\n      property=\"og:image\"\n      content=\"https://placehold.co/1200x630/be185d/ffffff?text=TDJD\\nAula+11\"\n    />\n\n    <!-- Twitter -->\n    <meta property=\"twitter:card\" content=\"summary_large_image\" />\n    <meta property=\"twitter:url\" content=\"URL_DA_SUA_PAGINA_AQUI\" />\n    <meta\n      property=\"twitter:title\"\n      content=\"TDJD - Aula 11: Métodos, Eventos e Corrotinas em C#\"\n    />\n    <meta\n      property=\"twitter:description\"\n      content=\"Domine a manipulação de tempo e eventos na Unity com corrotinas para criar animações, delays e sequências complexas de gameplay.\"\n    />\n    <meta\n      property=\"twitter:image\"\n      content=\"https://placehold.co/1200x630/be185d/ffffff?text=TDJD\\nAula+11\"\n    />\n\n    <!-- CDN Links -->\n    <script src=\"https://cdn.tailwindcss.com?plugins=typography,aspect-ratio\"></script>\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\"\n      rel=\"stylesheet\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\"\n    />\n\n    <!-- Custom Styles -->\n    <style>\n      body {\n        font-family: \"Inter\", sans-serif;\n        background-color: #f8fafc;\n        /* bg-slate-50 */\n        padding-top: 60px;\n        /* Space for fixed navbar */\n      }\n\n      .callout {\n        border-left-width: 4px;\n        padding: 1.5rem;\n        margin: 1.5rem 0;\n        border-radius: 0.5rem;\n      }\n\n      .callout-info {\n        background-color: #f0f9ff;\n        /* bg-sky-50 */\n        border-color: #7dd3fc;\n        /* border-sky-300 */\n        color: #0c4a6e;\n        /* text-sky-800 */\n      }\n\n      .callout-practice {\n        background-color: #f0fdf4;\n        /* bg-emerald-50 */\n        border-color: #6ee7b7;\n        /* border-emerald-300 */\n        color: #065f46;\n        /* text-emerald-800 */\n      }\n\n      .callout-warning {\n        background-color: #fffbeb; /* bg-amber-50 */\n        border-color: #fcd34d; /* border-amber-300 */\n        color: #92400e; /* text-amber-800 */\n      }\n\n      .code-block-wrapper {\n        position: relative;\n      }\n\n      .copy-code-button {\n        position: absolute;\n        top: 0.5rem;\n        right: 0.5rem;\n        background-color: #4a5568;\n        color: white;\n        border: none;\n        padding: 0.25rem 0.5rem;\n        border-radius: 0.25rem;\n        font-size: 0.75rem;\n        cursor: pointer;\n        transition: background-color 0.2s;\n      }\n\n      .copy-code-button:hover {\n        background-color: #2d3748;\n      }\n\n      .aspect-video {\n        position: relative;\n        padding-bottom: 56.25%;\n        height: 0;\n        overflow: hidden;\n      }\n\n      .aspect-video iframe {\n        position: absolute;\n        inset: 0;\n        width: 100%;\n        height: 100%;\n        border: 0;\n      }\n    </style>\n  </head>\n\n  <body class=\"text-slate-800\">\n    <!-- Fixed Navigation Menu -->\n    <nav\n      class=\"bg-white/80 backdrop-blur-md shadow-sm fixed top-0 left-0 right-0 z-50\"\n      role=\"navigation\"\n      aria-label=\"Navegação Principal\"\n    >\n      <div class=\"container mx-auto px-6\">\n        <div class=\"flex justify-between items-center h-16\">\n          <span class=\"text-lg font-bold text-pink-700\">TDJD - Aula 11</span>\n          <div class=\"hidden md:flex space-x-4 text-sm font-semibold\">\n            <a href=\"#plano-aula\" class=\"text-slate-600 hover:text-pink-600\"\n              >Plano</a\n            >\n            <a\n              href=\"#metodos-eventos\"\n              class=\"text-slate-600 hover:text-pink-600\"\n              >Métodos e Eventos</a\n            >\n            <a href=\"#corrotinas\" class=\"text-slate-600 hover:text-pink-600\"\n              >Corrotinas</a\n            >\n            <a href=\"#estudo-de-caso\" class=\"text-slate-600 hover:text-pink-600\"\n              >Estudo de Caso</a\n            >\n            <a href=\"#tarefa\" class=\"text-slate-600 hover:text-pink-600\">TED</a>\n            <a href=\"#recursos\" class=\"text-slate-600 hover:text-pink-600\"\n              >Recursos</a\n            >\n          </div>\n        </div>\n      </div>\n    </nav>\n\n    <!-- Page Header -->\n    <header class=\"bg-slate-800 shadow-md relative\">\n      <div\n        class=\"w-full h-48 bg-gradient-to-r from-pink-800 to-rose-900 opacity-80\"\n      ></div>\n      <div\n        class=\"container mx-auto px-6 py-8 absolute bottom-0 left-0 right-0 bg-gradient-to-t from-slate-900/70 to-transparent\"\n      >\n        <h1 class=\"text-4xl font-bold text-white\">\n          Aula 11: Métodos, Eventos e Corrotinas\n        </h1>\n        <p class=\"text-xl text-slate-300 mt-2\">\n          Unidade III – Programação com C# para Games\n        </p>\n      </div>\n    </header>\n\n    <!-- Main Content Area -->\n    <main class=\"container mx-auto px-6 py-10\" role=\"main\">\n      <!-- Section: Lesson Plan -->\n      <section\n        id=\"plano-aula\"\n        aria-labelledby=\"plano-aula-heading\"\n        class=\"mb-12 bg-pink-50 border border-pink-200 p-8 rounded-2xl shadow-lg\"\n      >\n        <h2\n          id=\"plano-aula-heading\"\n          class=\"text-3xl font-bold text-pink-700 mb-6 text-center\"\n        >\n          Plano da Aula\n        </h2>\n        <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <div class=\"bg-white p-6 rounded-lg shadow-sm\">\n            <h3 class=\"font-semibold text-lg text-pink-800 mb-2\">\n              <i class=\"fa-solid fa-book-open mr-2\"></i>CONTEÚDO\n            </h3>\n            <p class=\"text-slate-600 mt-1 text-sm\">\n              Organização de código com Métodos. Reação a eventos de física.\n              Manipulação de tempo e sequências com Corrotinas.\n            </p>\n          </div>\n          <div class=\"bg-white p-6 rounded-lg shadow-sm\">\n            <h3 class=\"font-semibold text-lg text-pink-800 mb-2\">\n              <i class=\"fa-solid fa-bullseye mr-2\"></i>OBJETIVO\n            </h3>\n            <p class=\"text-slate-600 text-sm\">\n              Implementar métodos e eventos para criar código modular e reativo.\n              Utilizar corrotinas para criar comportamentos temporizados e\n              sequenciais.\n            </p>\n          </div>\n          <div class=\"bg-white p-6 rounded-lg shadow-sm\">\n            <h3 class=\"font-semibold text-lg text-pink-800 mb-2\">\n              <i class=\"fa-solid fa-gears mr-2\"></i>METODOLOGIA\n            </h3>\n            <p class=\"text-slate-600 text-sm\">\n              Aula prática com aplicação incremental de conceitos (Scaffolded\n              Practice), construindo um sistema funcional passo a passo.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <!-- Section: Introduction -->\n      <section\n        id=\"introducao\"\n        aria-labelledby=\"intro-heading\"\n        class=\"mb-12 bg-white p-8 rounded-lg shadow\"\n      >\n        <h2\n          id=\"intro-heading\"\n          class=\"text-3xl font-semibold text-slate-800 mb-4\"\n        >\n          Orquestrando Ações: O Próximo Nível do Scripting\n        </h2>\n        <div class=\"text-slate-700 leading-relaxed space-y-4\">\n          <p>\n            Na aula anterior, demos os primeiros passos com C#, movendo um\n            objeto com lógica dentro do `Update()`. No entanto, a maioria das\n            ações em um jogo não acontece continuamente. Elas acontecem em\n            resposta a algo (um evento) ou ao longo de um período específico de\n            tempo (uma sequência).\n          </p>\n          <p>\n            Como fazemos para que uma porta se abra <strong>após</strong> o\n            jogador pisar em uma placa de pressão? Como criamos um inimigo que\n            ataca, espera e ataca novamente? A resposta está em organizar nosso\n            código de forma mais inteligente e dominar as ferramentas que a\n            Unity nos oferece para controlar o tempo.\n          </p>\n          <blockquote\n            class=\"text-lg italic text-slate-600 border-l-4 border-pink-300 pl-4\"\n          >\n            \"A complexidade de um bom gameplay não vem de um código complicado,\n            mas de regras simples que interagem de maneiras interessantes ao\n            longo do tempo.\"\n            <footer class=\"text-base not-italic text-slate-500 mt-2\">\n              — Adaptado de Schuytema, P., \"Design de games: uma abordagem\n              prática\"\n            </footer>\n          </blockquote>\n          <p>\n            Hoje, vamos aprender a criar blocos de código reutilizáveis\n            (métodos), a reagir a eventos do mundo do jogo (como colisões) e a\n            orquestrar ações sequenciais com a poderosa ferramenta das\n            <strong>corrotinas</strong>.\n          </p>\n        </div>\n      </section>\n\n      <section id=\"ciclo-execucao\" class=\"mb-12\">\n        <h2\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-pink-500 pb-2 mb-8\"\n        >\n          <i class=\"fa-solid fa-timeline mr-2\"></i>Ciclo de Execução da Unity\n        </h2>\n        <div class=\"bg-white p-8 rounded-lg shadow space-y-4 text-slate-700\">\n          <p>\n            <strong\n              >Awake → OnEnable → Start → Update → LateUpdate → OnDisable →\n              OnDestroy</strong\n            >\n            é a ordem típica de eventos chamados pela Unity. Use:\n          </p>\n          <ul class=\"list-disc list-inside text-sm leading-6\">\n            <li>\n              <strong>Awake</strong>: inicialização essencial (referências).\n            </li>\n            <li>\n              <strong>Start</strong>: começa após todos os\n              <em>Awake</em> concluírem.\n            </li>\n            <li>\n              <strong>Update</strong>: lógica por frame (entrada do jogador).\n            </li>\n            <li>\n              <strong>FixedUpdate</strong>: física/forças em <em>Rigidbody</em>.\n            </li>\n            <li>\n              <strong>LateUpdate</strong>: câmera que segue o jogador (roda\n              depois do <em>Update</em>).\n            </li>\n          </ul>\n          <p class=\"text-xs text-slate-500\">\n            Referência: ordem e recomendações de uso na documentação oficial da\n            Unity (execução por evento).\n          </p>\n        </div>\n      </section>\n\n      <!-- Section: Methods and Events -->\n      <section\n        id=\"metodos-eventos\"\n        aria-labelledby=\"methods-events-heading\"\n        class=\"mb-12\"\n      >\n        <h2\n          id=\"methods-events-heading\"\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-pink-500 pb-2 mb-8\"\n        >\n          <i class=\"fa-solid fa-puzzle-piece mr-2\"></i>Métodos e Eventos:\n          Organização e Reação\n        </h2>\n        <div class=\"bg-white p-8 rounded-lg shadow space-y-6\">\n          <div>\n            <h3 class=\"text-2xl font-semibold text-pink-800 mb-2\">\n              1. Métodos: Organizando seu Código\n            </h3>\n            <p class=\"text-slate-700 leading-relaxed mb-4\">\n              Um método (ou função) é um bloco de código nomeado que pode ser\n              chamado de outras partes do seu script. Usá-los torna o código\n              mais limpo, legível e reutilizável.\n            </p>\n            <h4 class=\"font-semibold text-slate-700\">Anatomia de um Método:</h4>\n            <div class=\"code-block-wrapper my-2\">\n              <pre\n                class=\"bg-slate-800 text-slate-200 p-4 rounded-lg text-sm\"\n              ><code>// Visibilidade | Tipo de Retorno | Nome (Parâmetros)\npublic void MoverJogador(float velocidade) \n{\n    // Corpo do método\n}</code></pre>\n            </div>\n            <div class=\"callout callout-practice\">\n              <h4 class=\"font-bold mb-2\">\n                Exemplo Prático: Refatorando o `Update`\n              </h4>\n              <p class=\"text-sm text-slate-600 mb-2\">\n                Vamos pegar a lógica de movimento da aula passada e encapsulá-la\n                em um método. Isso torna o `Update` mais limpo e a lógica de\n                movimento reutilizável.\n              </p>\n              <div class=\"code-block-wrapper\">\n                <button\n                  class=\"copy-code-button\"\n                  onclick=\"copiarCodigo(this, 'codigo-refatorado')\"\n                >\n                  Copiar\n                </button>\n                <pre\n                  class=\"bg-slate-800 text-slate-200 p-4 rounded-lg text-sm\"\n                ><code id=\"codigo-refatorado\">// Refactored code with a dedicated method\npublic class MovimentoRefatorado : MonoBehaviour\n{\n    public float velocidade = 5f;\n\n    void Update()\n    {\n        // Update is now clean and just calls the method\n        ProcessarInput();\n    }\n\n    // A new method to handle movement logic\n    void ProcessarInput()\n    {\n        float movimentoHorizontal = Input.GetAxis(\"Horizontal\");\n        Vector3 direcao = Vector3.right * movimentoHorizontal;\n        transform.Translate(direcao * velocidade * Time.deltaTime);\n    }\n}</code></pre>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <h3 class=\"text-2xl font-semibold text-pink-800 mb-2\">\n              2. Eventos: Reagindo à Física\n            </h3>\n            <p class=\"text-slate-700 leading-relaxed mb-4\">\n              Unity possui métodos de evento que são chamados automaticamente em\n              resposta a acontecimentos, como colisões físicas. Isso nos permite\n              criar reações sem precisar verificar tudo a cada frame no\n              `Update`.\n            </p>\n            <p class=\"text-slate-700 leading-relaxed mb-4\">\n              O conceito é baseado no <strong>Padrão Observer</strong>, onde um\n              objeto (o \"Observado\", como um colisor) notifica outros objetos\n              (os \"Observadores\", como seus scripts) quando algo importante\n              acontece.\n            </p>\n            <div class=\"callout callout-info\">\n              <h4 class=\"font-bold mb-2\">\n                Evento de Trigger: `OnTriggerEnter`\n              </h4>\n              <p class=\"text-sm text-slate-600 mb-2\">\n                Este método é chamado quando um GameObject com um Collider\n                (marcado como \"Is Trigger\") entra em contato com outro Collider.\n                É perfeito para áreas de ativação, como placas de pressão ou\n                portais.\n              </p>\n              <div class=\"code-block-wrapper\">\n                <button\n                  class=\"copy-code-button\"\n                  onclick=\"copiarCodigo(this, 'codigo-trigger')\"\n                >\n                  Copiar\n                </button>\n                <pre\n                  class=\"bg-slate-800 text-slate-200 p-4 rounded-lg text-sm\"\n                ><code id=\"codigo-trigger\">// Script to be placed on a trigger zone (e.g., a pressure plate)\npublic class PlacaDePressao : MonoBehaviour\n{\n    // This event method is called by Unity automatically\n    private void OnTriggerEnter(Collider other)\n    {\n        // 'other' is the Collider of the object that entered the trigger\n        // We can check its tag to see if it's the player\n        if (other.CompareTag(\"Player\"))\n        {\n            Debug.Log(\"O Jogador pisou na placa!\");\n            // Here we would call a method to open a door, for example\n        }\n    }\n}</code></pre>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <section id=\"eventos-csharp\" class=\"mb-12\">\n        <h2\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-pink-500 pb-2 mb-8\"\n        >\n          <i class=\"fa-solid fa-bell mr-2\"></i>Eventos: C# (delegate) vs\n          UnityEvent\n        </h2>\n        <div class=\"bg-white p-8 rounded-lg shadow space-y-4 text-slate-700\">\n          <p>\n            <strong>C# event/delegate</strong> dá desempenho e segurança de\n            tipo; <strong>UnityEvent</strong> permite conectar callbacks no\n            Inspector (bom para designers).\n          </p>\n\n          <h3 class=\"text-pink-800 font-semibold\">Exemplo (C# event)</h3>\n          <pre\n            class=\"bg-slate-800 text-slate-200 p-4 rounded-lg text-sm overflow-x-auto\"\n          ><code>public class Porta : MonoBehaviour\n{\n    public event System.Action AoAbrir;\n\n    public void Abrir()\n    {\n        // ... animação/efeito ...\n        AoAbrir?.Invoke(); // notifica inscritos\n    }\n}\n\npublic class HUDPorta : MonoBehaviour\n{\n    public Porta porta;\n    void OnEnable()  => porta.AoAbrir += MostrarMensagem;\n    void OnDisable() => porta.AoAbrir -= MostrarMensagem;\n\n    void MostrarMensagem() => Debug.Log(\"A porta foi aberta!\");\n}</code></pre>\n\n          <h3 class=\"text-pink-800 font-semibold\">Exemplo (UnityEvent)</h3>\n          <pre\n            class=\"bg-slate-800 text-slate-200 p-4 rounded-lg text-sm overflow-x-auto\"\n          ><code>using UnityEngine.Events;\n\npublic class BotaoInterativo : MonoBehaviour\n{\n    public UnityEvent aoClicar;\n    void OnMouseDown() => aoClicar?.Invoke();\n}</code></pre>\n        </div>\n      </section>\n\n      <section id=\"fisica-basica\" class=\"mb-12\">\n        <h2\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-pink-500 pb-2 mb-8\"\n        >\n          <i class=\"fa-solid fa-shapes mr-2\"></i>Trigger vs Collision (3D e 2D)\n        </h2>\n        <div class=\"bg-white p-8 rounded-lg shadow space-y-4 text-slate-700\">\n          <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h3 class=\"text-pink-800 font-semibold mb-2\">Trigger (sensor)</h3>\n              <p>\n                Marque <em>Is Trigger</em> no Collider. Eventos:\n                <code>OnTriggerEnter/Stay/Exit</code>. Útil para placas de\n                pressão, áreas de dano e portais.\n              </p>\n            </div>\n            <div>\n              <h3 class=\"text-pink-800 font-semibold mb-2\">\n                Collision (contato físico)\n              </h3>\n              <p>\n                Colliders sem <em>Is Trigger</em> geram\n                <code>OnCollisionEnter/Stay/Exit</code>. Há resposta física\n                (empurrões/quicar) quando há <code>Rigidbody</code>.\n              </p>\n            </div>\n          </div>\n          <p class=\"text-xs text-slate-500 mt-2\">\n            Observação: 2D usa os equivalentes <code>OnTriggerEnter2D</code> /\n            <code>OnCollisionEnter2D</code>.\n          </p>\n        </div>\n      </section>\n\n      <!-- Section: Coroutines -->\n      <section\n        id=\"corrotinas\"\n        aria-labelledby=\"coroutines-heading\"\n        class=\"mb-12\"\n      >\n        <h2\n          id=\"coroutines-heading\"\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-pink-500 pb-2 mb-8\"\n        >\n          <i class=\"fa-solid fa-hourglass-half mr-2\"></i>Corrotinas: Dominando o\n          Tempo\n        </h2>\n        <div class=\"bg-white p-8 rounded-lg shadow space-y-4\">\n          <p class=\"text-slate-700 leading-relaxed\">\n            O `Update()` é executado em todos os frames, o que é ótimo para\n            ações contínuas. Mas e se quisermos uma sequência como: \"piscar a\n            luz, <strong>esperar 1 segundo</strong>, piscar de novo\"? Fazer isso\n            no `Update()` é complexo. A solução da Unity para isso são as\n            <strong>Corrotinas</strong>.\n          </p>\n          <p class=\"text-slate-700 font-semibold\">\n            Uma corrotina é como um método que pode ser pausado e retomado. Ela\n            permite escrever lógicas sequenciais de forma limpa e legível.\n          </p>\n\n          <div class=\"text-center my-6\">\n            <!-- SVG: Update() x Corrotinas (responsivo e acessível) -->\n            <figure class=\"rounded-md w-full bg-white shadow-sm\">\n              <svg\n                role=\"img\"\n                aria-labelledby=\"updvsco-title updvsco-desc\"\n                viewBox=\"0 0 960 320\"\n                class=\"w-full h-auto\"\n                style=\"pointer-events: none\"\n              >\n                <title id=\"updvsco-title\">Update() versus Corrotinas</title>\n                <desc id=\"updvsco-desc\">\n                  Comparação visual entre o fluxo contínuo do método Update, que\n                  roda a cada frame, e o fluxo sequencial de uma corrotina com\n                  pausas usando yield/WaitForSeconds.\n                </desc>\n\n                <defs>\n                  <!-- Gradientes de fundo -->\n                  <linearGradient id=\"gLeft\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                    <stop offset=\"0%\" stop-color=\"#eef2ff\" />\n                    <stop offset=\"100%\" stop-color=\"#ede9fe\" />\n                  </linearGradient>\n                  <linearGradient id=\"gRight\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                    <stop offset=\"0%\" stop-color=\"#fdf2f8\" />\n                    <stop offset=\"100%\" stop-color=\"#ffe4e6\" />\n                  </linearGradient>\n\n                  <!-- Setas finas -->\n                  <marker\n                    id=\"arrowThinPink\"\n                    viewBox=\"0 0 10 10\"\n                    markerWidth=\"8\"\n                    markerHeight=\"8\"\n                    refX=\"9\"\n                    refY=\"5\"\n                    orient=\"auto\"\n                  >\n                    <path d=\"M0,0 10,5 0,10Z\" fill=\"#be185d\"></path>\n                  </marker>\n                  <marker\n                    id=\"arrowThinIndigo\"\n                    viewBox=\"0 0 10 10\"\n                    markerWidth=\"8\"\n                    markerHeight=\"8\"\n                    refX=\"9\"\n                    refY=\"5\"\n                    orient=\"auto\"\n                  >\n                    <path d=\"M0,0 10,5 0,10Z\" fill=\"#4f46e5\"></path>\n                  </marker>\n\n                  <style>\n                    .lbl {\n                      font: 700 16px/1.2 system-ui, -apple-system, \"Segoe UI\",\n                        Roboto, \"Inter\", sans-serif;\n                    }\n                    .sub {\n                      font: 12px/1.2 system-ui, -apple-system, \"Segoe UI\",\n                        Roboto, \"Inter\", sans-serif;\n                      fill: #475569;\n                    }\n                    .mono {\n                      font: 600 13px/1.2 ui-monospace, SFMono-Regular, Menlo,\n                        Monaco, Consolas, \"Liberation Mono\", monospace;\n                    }\n                    .tick {\n                      stroke: #a5b4fc;\n                      stroke-width: 1;\n                      vector-effect: non-scaling-stroke;\n                    }\n                    .dash {\n                      stroke: #be185d;\n                      stroke-width: 2;\n                      stroke-dasharray: 6 6;\n                      vector-effect: non-scaling-stroke;\n                    }\n                    .rail {\n                      stroke: #0ea5e9;\n                      stroke-width: 2;\n                      vector-effect: non-scaling-stroke;\n                    }\n                    .act {\n                      fill: #c7d2fe;\n                      stroke: #4f46e5;\n                      stroke-width: 2;\n                    }\n                    .step {\n                      fill: #fecdd3;\n                      stroke: #fb7185;\n                      stroke-width: 2;\n                    }\n                  </style>\n                </defs>\n\n                <!-- Painéis -->\n                <rect\n                  x=\"10\"\n                  y=\"10\"\n                  width=\"460\"\n                  height=\"300\"\n                  rx=\"16\"\n                  fill=\"url(#gLeft)\"\n                />\n                <rect\n                  x=\"490\"\n                  y=\"10\"\n                  width=\"460\"\n                  height=\"300\"\n                  rx=\"16\"\n                  fill=\"url(#gRight)\"\n                />\n\n                <!-- Títulos -->\n                <text x=\"34\" y=\"48\" class=\"lbl\" fill=\"#312e81\">\n                  Update() — roda a cada frame\n                </text>\n                <text x=\"514\" y=\"48\" class=\"lbl\" fill=\"#9d174d\">\n                  Corrotina — sequência com pausas\n                </text>\n                <text x=\"34\" y=\"70\" class=\"sub\">\n                  Fluxo contínuo no\n                  <tspan class=\"mono\">Update()</tspan>\n                  ; ideal para leituras de input e movimentos constantes.\n                </text>\n                <text x=\"514\" y=\"70\" class=\"sub\">\n                  Controle de tempo com\n                  <tspan class=\"mono\">IEnumerator</tspan>\n                  ,\n                  <tspan class=\"mono\">yield</tspan>\n                  e\n                  <tspan class=\"mono\">WaitForSeconds</tspan>\n                  .\n                </text>\n\n                <!-- LADO ESQUERDO: Update() -->\n                <!-- trilho principal -->\n                <line x1=\"40\" y1=\"120\" x2=\"440\" y2=\"120\" class=\"rail\" />\n                <!-- ticks de frame -->\n                <g transform=\"translate(40,120)\">\n                  <!-- 16 marcas de frame -->\n                  <g>\n                    <line x1=\"0\" y1=\"-18\" x2=\"0\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"25\" y1=\"-18\" x2=\"25\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"50\" y1=\"-18\" x2=\"50\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"75\" y1=\"-18\" x2=\"75\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"100\" y1=\"-18\" x2=\"100\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"125\" y1=\"-18\" x2=\"125\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"150\" y1=\"-18\" x2=\"150\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"175\" y1=\"-18\" x2=\"175\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"200\" y1=\"-18\" x2=\"200\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"225\" y1=\"-18\" x2=\"225\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"250\" y1=\"-18\" x2=\"250\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"275\" y1=\"-18\" x2=\"275\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"300\" y1=\"-18\" x2=\"300\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"325\" y1=\"-18\" x2=\"325\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"350\" y1=\"-18\" x2=\"350\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"375\" y1=\"-18\" x2=\"375\" y2=\"18\" class=\"tick\" />\n                    <line x1=\"400\" y1=\"-18\" x2=\"400\" y2=\"18\" class=\"tick\" />\n                  </g>\n                </g>\n\n                <!-- blocos repetidos de lógica -->\n                <g>\n                  <rect\n                    x=\"70\"\n                    y=\"150\"\n                    width=\"90\"\n                    height=\"26\"\n                    rx=\"6\"\n                    class=\"act\"\n                  />\n                  <rect\n                    x=\"190\"\n                    y=\"150\"\n                    width=\"90\"\n                    height=\"26\"\n                    rx=\"6\"\n                    class=\"act\"\n                  />\n                  <rect\n                    x=\"310\"\n                    y=\"150\"\n                    width=\"90\"\n                    height=\"26\"\n                    rx=\"6\"\n                    class=\"act\"\n                  />\n                  <text\n                    x=\"115\"\n                    y=\"168\"\n                    text-anchor=\"middle\"\n                    class=\"mono\"\n                    fill=\"#3730a3\"\n                  >\n                    Input\n                  </text>\n                  <text\n                    x=\"235\"\n                    y=\"168\"\n                    text-anchor=\"middle\"\n                    class=\"mono\"\n                    fill=\"#3730a3\"\n                  >\n                    Mover\n                  </text>\n                  <text\n                    x=\"355\"\n                    y=\"168\"\n                    text-anchor=\"middle\"\n                    class=\"mono\"\n                    fill=\"#3730a3\"\n                  >\n                    Checar\n                  </text>\n                </g>\n\n                <text x=\"40\" y=\"210\" class=\"sub\">\n                  Frames (ex.: 60/s) — a mesma lógica roda continuamente.\n                </text>\n                <!-- seta de fluxo -->\n                <line\n                  x1=\"40\"\n                  y1=\"220\"\n                  x2=\"440\"\n                  y2=\"220\"\n                  stroke=\"#4f46e5\"\n                  stroke-width=\"2\"\n                  marker-end=\"url(#arrowThinIndigo)\"\n                  vector-effect=\"non-scaling-stroke\"\n                />\n\n                <!-- LADO DIREITO: Corrotina -->\n                <!-- trilho -->\n                <line\n                  x1=\"520\"\n                  y1=\"120\"\n                  x2=\"920\"\n                  y2=\"120\"\n                  stroke=\"#fb7185\"\n                  stroke-width=\"2\"\n                  vector-effect=\"non-scaling-stroke\"\n                />\n                <text x=\"520\" y=\"100\" class=\"sub\">Início:</text>\n                <text x=\"905\" y=\"100\" text-anchor=\"end\" class=\"sub\">Fim:</text>\n\n                <!-- passos de ação -->\n                <rect\n                  x=\"540\"\n                  y=\"140\"\n                  width=\"120\"\n                  height=\"28\"\n                  rx=\"6\"\n                  class=\"step\"\n                />\n                <text\n                  x=\"600\"\n                  y=\"158\"\n                  text-anchor=\"middle\"\n                  class=\"mono\"\n                  fill=\"#9f1239\"\n                >\n                  Ação 1\n                </text>\n\n                <line x1=\"660\" y1=\"154\" x2=\"740\" y2=\"154\" class=\"dash\" />\n                <text x=\"700\" y=\"146\" text-anchor=\"middle\" class=\"sub\">\n                  WaitForSeconds(1)\n                </text>\n\n                <rect\n                  x=\"740\"\n                  y=\"140\"\n                  width=\"120\"\n                  height=\"28\"\n                  rx=\"6\"\n                  class=\"step\"\n                />\n                <text\n                  x=\"800\"\n                  y=\"158\"\n                  text-anchor=\"middle\"\n                  class=\"mono\"\n                  fill=\"#9f1239\"\n                >\n                  Ação 2\n                </text>\n\n                <line\n                  x1=\"520\"\n                  y1=\"220\"\n                  x2=\"920\"\n                  y2=\"220\"\n                  stroke=\"#be185d\"\n                  stroke-width=\"2\"\n                  marker-end=\"url(#arrowThinPink)\"\n                  vector-effect=\"non-scaling-stroke\"\n                />\n                <text x=\"520\" y=\"240\" class=\"sub\">\n                  <tspan class=\"mono\">StartCoroutine(Sequência())</tspan>\n                  → executa, pausa com\n                  <tspan class=\"mono\">yield</tspan>\n                  , retoma, repete.\n                </text>\n              </svg>\n              <figcaption class=\"sr-only\">\n                À esquerda, Update executa continuamente a cada frame; à\n                direita, corrotina executa ações com pausas entre elas.\n              </figcaption>\n            </figure>\n          </div>\n\n          <h4 class=\"font-semibold text-pink-800 mt-6 mb-2\">\n            Anatomia de uma Corrotina:\n          </h4>\n          <ul class=\"list-disc list-inside space-y-2 text-slate-600 text-sm\">\n            <li>O tipo de retorno deve ser <strong>IEnumerator</strong>.</li>\n            <li>\n              Usa a palavra-chave <strong>yield return</strong> para pausar a\n              execução.\n            </li>\n            <li>É iniciada com o método <strong>StartCoroutine()</strong>.</li>\n          </ul>\n\n          <div class=\"callout callout-info\" role=\"note\">\n            <h4 class=\"font-bold mb-2\">Pausas Comuns com `yield return`:</h4>\n            <ul class=\"list-disc list-inside text-sm text-slate-600 space-y-1\">\n              <li>\n                <code>yield return null;</code>: Pausa a corrotina e a retoma no\n                próximo frame.\n              </li>\n              <li>\n                <code>yield return new WaitForSeconds(float tempo);</code>:\n                Pausa a corrotina pela quantidade de segundos especificada. Esta\n                é a mais usada para delays.\n              </li>\n            </ul>\n          </div>\n\n          <h4 class=\"font-semibold text-pink-800 mt-6 mb-2\">\n            Exemplo: Luz Piscante\n          </h4>\n          <div class=\"code-block-wrapper\">\n            <button\n              class=\"copy-code-button\"\n              onclick=\"copiarCodigo(this, 'codigo-corrotina')\"\n            >\n              Copiar\n            </button>\n            <pre\n              class=\"bg-slate-800 text-slate-200 p-4 rounded-lg text-sm overflow-x-auto\"\n            ><code id=\"codigo-corrotina\">// Script that makes a light blink using a coroutine\nusing System.Collections;\nusing UnityEngine;\n\npublic class LuzPiscante : MonoBehaviour\n{\n    public Light minhaLuz;\n\n    void Start()\n    {\n        // Start the coroutine. It will run in the \"background\".\n        StartCoroutine(CicloDePiscar());\n    }\n\n    IEnumerator CicloDePiscar()\n    {\n        // An infinite loop to keep the blinking going\n        while (true)\n        {\n            // Turn the light on\n            minhaLuz.enabled = true;\n            // Pause the execution for 0.5 seconds\n            yield return new WaitForSeconds(0.5f);\n            // Turn the light off\n            minhaLuz.enabled = false;\n            // Pause the execution for 0.5 seconds\n            yield return new WaitForSeconds(0.5f);\n        }\n    }\n}</code></pre>\n          </div>\n        </div>\n      </section>\n\n      <section id=\"corrotinas-avancado\" class=\"mb-12\">\n        <h2\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-pink-500 pb-2 mb-8\"\n        >\n          <i class=\"fa-solid fa-clock-rotate-left mr-2\"></i>Corrotinas: Tempo e\n          Cancelamento\n        </h2>\n        <div class=\"bg-white p-8 rounded-lg shadow space-y-4 text-slate-700\">\n          <h3 class=\"text-pink-800 font-semibold\">\n            Tempo escalado vs não escalado\n          </h3>\n          <ul class=\"list-disc list-inside text-sm leading-6\">\n            <li>\n              <code>WaitForSeconds(x)</code> usa <code>Time.timeScale</code>. Se\n              <code>timeScale=0</code> (pause), a espera “congela”.\n            </li>\n            <li>\n              <code>WaitForSecondsRealtime(x)</code> ignora\n              <code>timeScale</code> (bom para UI/pausa/timeout).\n            </li>\n          </ul>\n          <pre\n            class=\"bg-slate-800 text-slate-200 p-4 rounded-lg text-sm overflow-x-auto\"\n          ><code>// Ex.: contagem regressiva que continua mesmo em pause\nIEnumerator Contagem(float secs)\n{\n    yield return new WaitForSecondsRealtime(secs);\n    Debug.Log(\"Tempo real decorrido mesmo com pause.\");\n}</code></pre>\n          <p class=\"text-xs text-slate-500\">\n            Referência: WaitForSecondsRealtime na documentação da Unity.\n          </p>\n\n          <h3 class=\"text-pink-800 font-semibold mt-4\">\n            Cancelar/evitar duplicação\n          </h3>\n          <pre\n            class=\"bg-slate-800 text-slate-200 p-4 rounded-lg text-sm overflow-x-auto\"\n          ><code>Coroutine rotina;\npublic void AbrirComDelay(float s)\n{\n    if (rotina != null) StopCoroutine(rotina);\n    rotina = StartCoroutine(AbrirDepois(s));\n}\n\nIEnumerator AbrirDepois(float s)\n{\n    yield return new WaitForSeconds(s);\n    // ... abre ...\n    rotina = null;\n}</code></pre>\n\n          <p class=\"text-xs text-slate-500\">\n            Corrotinas iniciadas em um <em>MonoBehaviour</em> são gerenciadas\n            por ele e têm comportamento específico ao habilitar/desabilitar o\n            componente. Veja “Coroutines and disabling” na documentação.\n          </p>\n        </div>\n      </section>\n\n      <!-- Section: Case Study -->\n      <section\n        id=\"estudo-de-caso\"\n        aria-labelledby=\"case-study-heading\"\n        class=\"mb-12\"\n      >\n        <h2\n          id=\"case-study-heading\"\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-pink-500 pb-2 mb-8\"\n        >\n          <i class=\"fa-solid fa-door-open mr-2\"></i>Estudo de Caso: A Porta com\n          Atraso\n        </h2>\n        <div class=\"bg-white p-8 rounded-lg shadow space-y-4\">\n          <p class=\"text-slate-700 leading-relaxed\">\n            Vamos unir tudo o que aprendemos para construir o sistema da nossa\n            tarefa: uma placa de pressão que abre uma porta após um pequeno\n            atraso.\n          </p>\n          <h4 class=\"font-semibold text-pink-800 mt-4 mb-2\">\n            Estrutura na Cena:\n          </h4>\n          <ul class=\"list-disc list-inside text-sm text-slate-600\">\n            <li>Um GameObject \"Jogador\" com a tag \"Player\" e um Rigidbody.</li>\n            <li>\n              Um GameObject \"PlacaDePressao\" com um Box Collider marcado como\n              \"Is Trigger\".\n            </li>\n            <li>Um GameObject \"Porta\" com um Box Collider.</li>\n          </ul>\n          <h4 class=\"font-semibold text-pink-800 mt-4 mb-2\">\n            Script 1: PlacaDePressao.cs\n          </h4>\n          <div class=\"code-block-wrapper\">\n            <button\n              class=\"copy-code-button\"\n              onclick=\"copiarCodigo(this, 'codigo-placa')\"\n            >\n              Copiar\n            </button>\n            <pre\n              class=\"bg-slate-800 text-slate-200 p-4 rounded-lg text-sm\"\n            ><code id=\"codigo-placa\">// Attached to the Pressure Plate object\nusing UnityEngine;\n\npublic class PlacaDePressao : MonoBehaviour\n{\n    // A public reference to the door we want to open\n    public Porta portaParaAbrir;\n\n    private void OnTriggerEnter(Collider other)\n    {\n        if (other.CompareTag(\"Player\"))\n        {\n            Debug.Log(\"Player detected! Telling the door to open...\");\n            // Call the public method on the door script\n            portaParaAbrir.AbrirComAtraso();\n        }\n    }\n}</code></pre>\n          </div>\n          <h4 class=\"font-semibold text-pink-800 mt-4 mb-2\">\n            Script 2: Porta.cs\n          </h4>\n          <div class=\"code-block-wrapper\">\n            <button\n              class=\"copy-code-button\"\n              onclick=\"copiarCodigo(this, 'codigo-porta')\"\n            >\n              Copiar\n            </button>\n            <pre\n              class=\"bg-slate-800 text-slate-200 p-4 rounded-lg text-sm\"\n            ><code id=\"codigo-porta\">// Attached to the Door object\nusing System.Collections;\nusing UnityEngine;\n\npublic class Porta : MonoBehaviour\n{\n    public float atrasoParaAbrir = 2f; // 2 second delay\n\n    // This is a public method that can be called from other scripts\n    public void AbrirComAtraso()\n    {\n        // Start the coroutine that handles the sequence\n        StartCoroutine(SequenciaDeAbertura());\n    }\n\n    private IEnumerator SequenciaDeAbertura()\n    {\n        Debug.Log(\"Coroutine started. Waiting for delay...\");\n        // 1. Wait for the specified delay\n        yield return new WaitForSeconds(atrasoParaAbrir);\n\n        Debug.Log(\"Delay finished. Opening the door!\");\n        // 2. Deactivate the door object to \"open\" it\n        gameObject.SetActive(false);\n    }\n}</code></pre>\n          </div>\n        </div>\n      </section>\n\n      <section id=\"boas-praticas\" class=\"mb-12\">\n        <h2\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-pink-500 pb-2 mb-8\"\n        >\n          <i class=\"fa-solid fa-list-check mr-2\"></i>Boas Práticas Rápidas\n        </h2>\n        <div\n          class=\"bg-white p-8 rounded-lg shadow text-sm text-slate-700 space-y-2\"\n        >\n          <p>\n            ✔️ Use <strong>FixedUpdate</strong> para alterar\n            <code>Rigidbody</code> (forças/velocidades).\n          </p>\n          <p>\n            ✔️ Evite iniciar corrotinas repetidas; guarde a referência e cancele\n            quando preciso.\n          </p>\n          <p>\n            ✔️ Em loops infinitos, sempre tenha um <code>yield</code> (ex.:\n            <code>yield return null;</code>).\n          </p>\n          <p>\n            ✔️ Prefira <code>WaitForSecondsRealtime</code> em contagens/tempo de\n            UI durante pause.\n          </p>\n        </div>\n      </section>\n\n      <!-- Section: TED -->\n      <section id=\"tarefa\" aria-labelledby=\"tarefa-heading\" class=\"mb-12\">\n        <h2\n          id=\"tarefa-heading\"\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-pink-500 pb-2 mb-4\"\n        >\n          📝 Tarefa (TED): Simulando um Evento com Delay\n        </h2>\n        <div\n          class=\"bg-white p-8 rounded-lg shadow space-y-4 text-slate-700 leading-relaxed\"\n        >\n          <p class=\"text-lg\">\n            Sua tarefa é recriar um sistema similar ao do estudo de caso, mas\n            com uma pequena variação: uma porta que abre com um atraso após o\n            jogador clicar nela.\n          </p>\n          <h4 class=\"font-semibold text-pink-800 mt-6 mb-2\">Passo a Passo:</h4>\n          <ol class=\"list-decimal list-inside space-y-2 text-sm\">\n            <li>Crie uma cena com um objeto \"Porta\".</li>\n            <li>Crie um script `PortaInterativa` e anexe-o à porta.</li>\n            <li>\n              Dentro do script, crie um método `OnMouseDown()`. Este é um evento\n              da Unity chamado quando o usuário clica com o mouse sobre um\n              Collider.\n            </li>\n            <li>\n              No `OnMouseDown()`, chame `StartCoroutine()` para iniciar uma\n              corrotina de abertura.\n            </li>\n            <li>\n              Na corrotina, use `yield return new WaitForSeconds()` para criar\n              um delay de 3 segundos.\n            </li>\n            <li>\n              Após o delay, desative o GameObject da porta para simular sua\n              abertura.\n            </li>\n            <li>\n              <strong>Entrega:</strong> Publique o código completo do seu script\n              `PortaInterativa` no fórum do Moodle e comente em uma ou duas\n              frases como o `StartCoroutine()` foi essencial para criar a\n              sequência com tempo de espera.\n            </li>\n          </ol>\n        </div>\n      </section>\n\n      <!-- Section: Vídeos recomendados (PT-BR) -->\n      <section\n        id=\"videos-recomendados\"\n        aria-labelledby=\"videos-heading\"\n        class=\"mb-12\"\n      >\n        <h2\n          id=\"videos-heading\"\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-pink-500 pb-2 mb-8\"\n        >\n          🎬 Vídeos Recomendados (PT-BR)\n        </h2>\n\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6 items-start\">\n          <!-- Vídeo 1 -->\n          <article\n            class=\"bg-white rounded-lg shadow hover:shadow-lg transition overflow-hidden self-start\"\n          >\n            <div class=\"aspect-video\">\n              <iframe\n                src=\"https://www.youtube.com/embed/Ebzo-P5tmtA\"\n                title=\"Corrotinas na Unity — Introdução prática\"\n                allowfullscreen\n                loading=\"lazy\"\n              ></iframe>\n            </div>\n            <div class=\"p-4\">\n              <h3 class=\"font-bold text-pink-800\">\n                Corrotinas na Unity — Introdução prática\n              </h3>\n              <p class=\"text-xs text-slate-500\">\n                Conceitos de <code>IEnumerator</code>, <code>yield</code> e\n                <code>WaitForSeconds</code>.\n              </p>\n            </div>\n          </article>\n\n          <!-- Vídeo 2 -->\n          <article\n            class=\"bg-white rounded-lg shadow hover:shadow-lg transition overflow-hidden self-start\"\n          >\n            <div class=\"aspect-video\">\n              <iframe\n                src=\"https://www.youtube.com/embed/bdcG-oSEgWI\"\n                title=\"Corrotinas na Unity — Exemplos de uso\"\n                allowfullscreen\n                loading=\"lazy\"\n              ></iframe>\n            </div>\n            <div class=\"p-4\">\n              <h3 class=\"font-bold text-pink-800\">\n                Corrotinas na Unity — Exemplos de uso\n              </h3>\n              <p class=\"text-xs text-slate-500\">\n                Sequências temporizadas com <code>StartCoroutine()</code> e\n                múltiplos <code>yield</code>.\n              </p>\n            </div>\n          </article>\n        </div>\n      </section>\n\n      <!-- Section: Resources -->\n      <section id=\"recursos\" aria-labelledby=\"recursos-heading\" class=\"mb-12\">\n        <h2\n          id=\"recursos-heading\"\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-pink-500 pb-2 mb-4\"\n        >\n          📚 Recursos Adicionais\n        </h2>\n        <div\n          class=\"bg-white p-8 rounded-lg shadow grid grid-cols-1 md:grid-cols-2 gap-8\"\n        >\n          <div>\n            <h4 class=\"font-bold text-pink-800 mb-2\">Documentação Oficial</h4>\n            <ul class=\"text-sm space-y-2\">\n              <li>\n                <a\n                  href=\"https://docs.unity3d.com/Manual/Coroutines.html\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  class=\"text-pink-600 hover:underline\"\n                  >Manual da Unity: Corrotinas</a\n                >\n              </li>\n              <li>\n                <a\n                  href=\"https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnTriggerEnter.html\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  class=\"text-pink-600 hover:underline\"\n                  >Documentação: OnTriggerEnter</a\n                >\n              </li>\n              <li>\n                <a\n                  href=\"https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnMouseDown.html\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  class=\"text-pink-600 hover:underline\"\n                  >Documentação: OnMouseDown</a\n                >\n              </li>\n            </ul>\n          </div>\n        </div>\n      </section>\n\n      <!-- Section: Bibliography -->\n      <section\n        id=\"bibliografia\"\n        aria-labelledby=\"bibliografia-heading\"\n        class=\"mb-12\"\n      >\n        <h2\n          id=\"bibliografia-heading\"\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-pink-500 pb-2 mb-4\"\n        >\n          📚 Bibliografia\n        </h2>\n        <div\n          class=\"bg-white p-8 rounded-lg shadow space-y-4 text-slate-700 leading-relaxed\"\n        >\n          <p>\n            ALVES, W. P.\n            <strong>Unity: design e desenvolvimento de jogos.</strong> Rio de\n            Janeiro: Alta Books, 2019.\n          </p>\n          <p>\n            SCHUYTEMA, Paul.\n            <strong>Design de games: uma abordagem prática.</strong> São Paulo:\n            Cengage Learning, 2008.\n          </p>\n        </div>\n      </section>\n    </main>\n\n    <!-- Footer -->\n    <footer class=\"bg-slate-800 text-white mt-12\" role=\"contentinfo\">\n      <div class=\"container mx-auto px-6 py-6 text-center\">\n        <p>\n          &copy; 2025 - Tecnologia e Desenvolvimento de Jogos Digitais |\n          Semestre 2025.2\n        </p>\n        <p class=\"text-sm text-slate-400\">\n          Material desenvolvido para os cursos de ADS e SI da UniChristus.\n        </p>\n        <div class=\"mt-4\">\n          <a href=\"#\" class=\"text-pink-400 hover:underline text-sm\"\n            >Acessar Moodle</a\n          >\n          <span class=\"text-slate-500 mx-2\">|</span>\n          <a href=\"#\" class=\"text-pink-400 hover:underline text-sm\"\n            >Política de Uso</a\n          >\n        </div>\n      </div>\n    </footer>\n\n    <script>\n      function copiarCodigo(button, elementId) {\n        const codeElement = document.getElementById(elementId);\n        const codeToCopy = codeElement.innerText;\n\n        const textarea = document.createElement(\"textarea\");\n        textarea.value = codeToCopy;\n        textarea.style.position = \"fixed\";\n        document.body.appendChild(textarea);\n        textarea.focus();\n        textarea.select();\n        try {\n          document.execCommand(\"copy\");\n          button.innerText = \"Copiado!\";\n        } catch (err) {\n          button.innerText = \"Erro!\";\n          console.error(\"Fallback: Oops, unable to copy\", err);\n        }\n        document.body.removeChild(textarea);\n\n        setTimeout(() => {\n          button.innerText = \"Copiar\";\n        }, 2000);\n      }\n    </script>\n  </body>\n</html>\n"
    }
  ]
}

{
  "id": "lesson11",
  "title": "Aula 11: Publica√ß√£o",
  "objective": "",
  "content": [
    {
      "type": "legacySection",
      "id": "plano-aula",
      "title": "Plano da Aula",
      "html": "<div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"book-open\">üìñ</span>CONTE√öDO </h3> <p> Organiza√ß√£o de c√≥digo com M√©todos. Rea√ß√£o a eventos de f√≠sica. Manipula√ß√£o de tempo e sequ√™ncias com Corrotinas. </p> </div> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"bullseye\">üéØ</span>OBJETIVO </h3> <p> Implementar m√©todos e eventos para criar c√≥digo modular e reativo. Utilizar corrotinas para criar comportamentos temporizados e sequenciais. </p> </div> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"gears\">‚öôÔ∏è</span>METODOLOGIA </h3> <p> Aula pr√°tica com aplica√ß√£o incremental de conceitos (Scaffolded Practice), construindo um sistema funcional passo a passo. </p> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "introducao",
      "title": "Orquestrando A√ß√µes: O Pr√≥ximo N√≠vel do Scripting",
      "html": "<div data-legacy-card=\"\"> <p> Na aula anterior, demos os primeiros passos com C#, movendo um objeto com l√≥gica dentro do `Update()`. No entanto, a maioria das a√ß√µes em um jogo n√£o acontece continuamente. Elas acontecem em resposta a algo (um evento) ou ao longo de um per√≠odo espec√≠fico de tempo (uma sequ√™ncia). </p> <p> Como fazemos para que uma porta se abra <strong>ap√≥s</strong> o jogador pisar em uma placa de press√£o? Como criamos um inimigo que ataca, espera e ataca novamente? A resposta est√° em organizar nosso c√≥digo de forma mais inteligente e dominar as ferramentas que a Unity nos oferece para controlar o tempo. </p> <blockquote> \"A complexidade de um bom gameplay n√£o vem de um c√≥digo complicado, mas de regras simples que interagem de maneiras interessantes ao longo do tempo.\" </blockquote> <p> Hoje, vamos aprender a criar blocos de c√≥digo reutiliz√°veis (m√©todos), a reagir a eventos do mundo do jogo (como colis√µes) e a orquestrar a√ß√µes sequenciais com a poderosa ferramenta das <strong>corrotinas</strong>. </p> </div>"
    },
    {
      "type": "legacySection",
      "id": "ciclo-execucao",
      "title": "Ciclo de Execu√ß√£o da Unity",
      "html": "<div data-legacy-card=\"\"> <p> <strong>Awake ‚Üí OnEnable ‚Üí Start ‚Üí Update ‚Üí LateUpdate ‚Üí OnDisable ‚Üí OnDestroy</strong> √© a ordem t√≠pica de eventos chamados pela Unity. Use: </p> <ul> <li> <strong>Awake</strong>: inicializa√ß√£o essencial (refer√™ncias). </li> <li> <strong>Start</strong>: come√ßa ap√≥s todos os <em>Awake</em> conclu√≠rem. </li> <li> <strong>Update</strong>: l√≥gica por frame (entrada do jogador). </li> <li> <strong>FixedUpdate</strong>: f√≠sica/for√ßas em <em>Rigidbody</em>. </li> <li> <strong>LateUpdate</strong>: c√¢mera que segue o jogador (roda depois do <em>Update</em>). </li> </ul> <p> Refer√™ncia: ordem e recomenda√ß√µes de uso na documenta√ß√£o oficial da Unity (execu√ß√£o por evento). </p> </div>"
    },
    {
      "type": "legacySection",
      "id": "metodos-eventos",
      "title": "üß©M√©todos e Eventos: Organiza√ß√£o e Rea√ß√£o",
      "html": "<div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <h3> 1. M√©todos: Organizando seu C√≥digo </h3> <p> Um m√©todo (ou fun√ß√£o) √© um bloco de c√≥digo nomeado que pode ser chamado de outras partes do seu script. Us√°-los torna o c√≥digo mais limpo, leg√≠vel e reutiliz√°vel. </p> <h4>Anatomia de um M√©todo:</h4> <div> <pre><code>// Visibilidade | Tipo de Retorno | Nome (Par√¢metros)\npublic void MoverJogador(float velocidade) { // Corpo do m√©todo\n}</code></pre> </div> <div> <h4> Exemplo Pr√°tico: Refatorando o `Update` </h4> <p> Vamos pegar a l√≥gica de movimento da aula passada e encapsul√°-la em um m√©todo. Isso torna o `Update` mais limpo e a l√≥gica de movimento reutiliz√°vel. </p> <div> <button onclick=\"copiarCodigo(this, 'codigo-refatorado')\"> Copiar </button> <pre><code id=\"codigo-refatorado\">// Refactored code with a dedicated method\npublic class MovimentoRefatorado : MonoBehaviour\n{ public float velocidade = 5f; void Update() { // Update is now clean and just calls the method ProcessarInput(); } // A new method to handle movement logic void ProcessarInput() { float movimentoHorizontal = Input.GetAxis(\"Horizontal\"); Vector3 direcao = Vector3.right * movimentoHorizontal; transform.Translate(direcao * velocidade * Time.deltaTime); }\n}</code></pre> </div> </div> </div> <div data-legacy-card=\"\"> <h3> 2. Eventos: Reagindo √† F√≠sica </h3> <p> Unity possui m√©todos de evento que s√£o chamados automaticamente em resposta a acontecimentos, como colis√µes f√≠sicas. Isso nos permite criar rea√ß√µes sem precisar verificar tudo a cada frame no `Update`. </p> <p> O conceito √© baseado no <strong>Padr√£o Observer</strong>, onde um objeto (o \"Observado\", como um colisor) notifica outros objetos (os \"Observadores\", como seus scripts) quando algo importante acontece. </p> <div> <h4> Evento de Trigger: `OnTriggerEnter` </h4> <p> Este m√©todo √© chamado quando um GameObject com um Collider (marcado como \"Is Trigger\") entra em contato com outro Collider. √â perfeito para √°reas de ativa√ß√£o, como placas de press√£o ou portais. </p> <div> <button onclick=\"copiarCodigo(this, 'codigo-trigger')\"> Copiar </button> <pre><code id=\"codigo-trigger\">// Script to be placed on a trigger zone (e.g., a pressure plate)\npublic class PlacaDePressao : MonoBehaviour\n{ // This event method is called by Unity automatically private void OnTriggerEnter(Collider other) { // 'other' is the Collider of the object that entered the trigger // We can check its tag to see if it's the player if (other.CompareTag(\"Player\")) { Debug.Log(\"O Jogador pisou na placa!\"); // Here we would call a method to open a door, for example } }\n}</code></pre> </div> </div> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "eventos-csharp",
      "title": "Eventos: C# (delegate) vs UnityEvent",
      "html": "<div data-legacy-card=\"\"> <p> <strong>C# event/delegate</strong> d√° desempenho e seguran√ßa de tipo; <strong>UnityEvent</strong> permite conectar callbacks no Inspector (bom para designers). </p> <h3>Exemplo (C# event)</h3> <pre><code>public class Porta : MonoBehaviour\n{ public event System.Action AoAbrir; public void Abrir() { // ... anima√ß√£o/efeito ... AoAbrir?.Invoke(); // notifica inscritos }\n} public class HUDPorta : MonoBehaviour\n{ public Porta porta; void OnEnable() =&gt; porta.AoAbrir += MostrarMensagem; void OnDisable() =&gt; porta.AoAbrir -= MostrarMensagem; void MostrarMensagem() =&gt; Debug.Log(\"A porta foi aberta!\");\n}</code></pre> <h3>Exemplo (UnityEvent)</h3> <pre><code>using UnityEngine.Events; public class BotaoInterativo : MonoBehaviour\n{ public UnityEvent aoClicar; void OnMouseDown() =&gt; aoClicar?.Invoke();\n}</code></pre> </div>"
    },
    {
      "type": "legacySection",
      "id": "fisica-basica",
      "title": "üß±Trigger vs Collision (3D e 2D)",
      "html": "<div data-legacy-card=\"\"> <div> <div> <h3>Trigger (sensor)</h3> <p> Marque <em>Is Trigger</em> no Collider. Eventos: <code>OnTriggerEnter/Stay/Exit</code>. √ötil para placas de press√£o, √°reas de dano e portais. </p> </div> <div> <h3> Collision (contato f√≠sico) </h3> <p> Colliders sem <em>Is Trigger</em> geram <code>OnCollisionEnter/Stay/Exit</code>. H√° resposta f√≠sica (empurr√µes/quicar) quando h√° <code>Rigidbody</code>. </p> </div> </div> <p> Observa√ß√£o: 2D usa os equivalentes <code>OnTriggerEnter2D</code> / <code>OnCollisionEnter2D</code>. </p> </div>"
    },
    {
      "type": "legacySection",
      "id": "corrotinas",
      "title": "Corrotinas: Dominando o Tempo",
      "html": "<div data-legacy-grid=\"\"> <p> O `Update()` √© executado em todos os frames, o que √© √≥timo para a√ß√µes cont√≠nuas. Mas e se quisermos uma sequ√™ncia como: \"piscar a luz, <strong>esperar 1 segundo</strong>, piscar de novo\"? Fazer isso no `Update()` √© complexo. A solu√ß√£o da Unity para isso s√£o as <strong>Corrotinas</strong>. </p> <p> Uma corrotina √© como um m√©todo que pode ser pausado e retomado. Ela permite escrever l√≥gicas sequenciais de forma limpa e leg√≠vel. </p> <div data-legacy-card=\"\"> <!-- SVG: Update() x Corrotinas (responsivo e acess√≠vel) --> <figure> <svg role=\"img\" aria-labelledby=\"updvsco-title updvsco-desc\" viewBox=\"0 0 960 320\" style=\"pointer-events: none\"> <title id=\"updvsco-title\">Update() versus Corrotinas</title> <desc id=\"updvsco-desc\"> Compara√ß√£o visual entre o fluxo cont√≠nuo do m√©todo Update, que roda a cada frame, e o fluxo sequencial de uma corrotina com pausas usando yield/WaitForSeconds. </desc> <defs> <!-- Gradientes de fundo --> <linearGradient id=\"gLeft\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\"> <stop offset=\"0%\" stop-color=\"#eef2ff\"></stop> <stop offset=\"100%\" stop-color=\"#ede9fe\"></stop> </linearGradient> <linearGradient id=\"gRight\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\"> <stop offset=\"0%\" stop-color=\"#fdf2f8\"></stop> <stop offset=\"100%\" stop-color=\"#ffe4e6\"></stop> </linearGradient> <!-- Setas finas --> <marker id=\"arrowThinPink\" viewBox=\"0 0 10 10\" markerWidth=\"8\" markerHeight=\"8\" refX=\"9\" refY=\"5\" orient=\"auto\"> <path d=\"M0,0 10,5 0,10Z\" fill=\"#be185d\"></path> </marker> <marker id=\"arrowThinIndigo\" viewBox=\"0 0 10 10\" markerWidth=\"8\" markerHeight=\"8\" refX=\"9\" refY=\"5\" orient=\"auto\"> <path d=\"M0,0 10,5 0,10Z\" fill=\"#4f46e5\"></path> </marker> </defs> <!-- Pain√©is --> <rect x=\"10\" y=\"10\" width=\"460\" height=\"300\" rx=\"16\" fill=\"url(#gLeft)\"></rect> <rect x=\"490\" y=\"10\" width=\"460\" height=\"300\" rx=\"16\" fill=\"url(#gRight)\"></rect> <!-- T√≠tulos --> <text x=\"34\" y=\"48\" fill=\"#312e81\"> Update() ‚Äî roda a cada frame </text> <text x=\"514\" y=\"48\" fill=\"#9d174d\"> Corrotina ‚Äî sequ√™ncia com pausas </text> <text x=\"34\" y=\"70\"> Fluxo cont√≠nuo no <tspan>Update()</tspan> ; ideal para leituras de input e movimentos constantes. </text> <text x=\"514\" y=\"70\"> Controle de tempo com <tspan>IEnumerator</tspan> , <tspan>yield</tspan> e <tspan>WaitForSeconds</tspan> . </text> <!-- LADO ESQUERDO: Update() --> <!-- trilho principal --> <line x1=\"40\" y1=\"120\" x2=\"440\" y2=\"120\"></line> <!-- ticks de frame --> <g transform=\"translate(40,120)\"> <!-- 16 marcas de frame --> <g> <line x1=\"0\" y1=\"-18\" x2=\"0\" y2=\"18\"></line> <line x1=\"25\" y1=\"-18\" x2=\"25\" y2=\"18\"></line> <line x1=\"50\" y1=\"-18\" x2=\"50\" y2=\"18\"></line> <line x1=\"75\" y1=\"-18\" x2=\"75\" y2=\"18\"></line> <line x1=\"100\" y1=\"-18\" x2=\"100\" y2=\"18\"></line> <line x1=\"125\" y1=\"-18\" x2=\"125\" y2=\"18\"></line> <line x1=\"150\" y1=\"-18\" x2=\"150\" y2=\"18\"></line> <line x1=\"175\" y1=\"-18\" x2=\"175\" y2=\"18\"></line> <line x1=\"200\" y1=\"-18\" x2=\"200\" y2=\"18\"></line> <line x1=\"225\" y1=\"-18\" x2=\"225\" y2=\"18\"></line> <line x1=\"250\" y1=\"-18\" x2=\"250\" y2=\"18\"></line> <line x1=\"275\" y1=\"-18\" x2=\"275\" y2=\"18\"></line> <line x1=\"300\" y1=\"-18\" x2=\"300\" y2=\"18\"></line> <line x1=\"325\" y1=\"-18\" x2=\"325\" y2=\"18\"></line> <line x1=\"350\" y1=\"-18\" x2=\"350\" y2=\"18\"></line> <line x1=\"375\" y1=\"-18\" x2=\"375\" y2=\"18\"></line> <line x1=\"400\" y1=\"-18\" x2=\"400\" y2=\"18\"></line> </g> </g> <!-- blocos repetidos de l√≥gica --> <g> <rect x=\"70\" y=\"150\" width=\"90\" height=\"26\" rx=\"6\"></rect> <rect x=\"190\" y=\"150\" width=\"90\" height=\"26\" rx=\"6\"></rect> <rect x=\"310\" y=\"150\" width=\"90\" height=\"26\" rx=\"6\"></rect> <text x=\"115\" y=\"168\" text-anchor=\"middle\" fill=\"#3730a3\"> Input </text> <text x=\"235\" y=\"168\" text-anchor=\"middle\" fill=\"#3730a3\"> Mover </text> <text x=\"355\" y=\"168\" text-anchor=\"middle\" fill=\"#3730a3\"> Checar </text> </g> <text x=\"40\" y=\"210\"> Frames (ex.: 60/s) ‚Äî a mesma l√≥gica roda continuamente. </text> <!-- seta de fluxo --> <line x1=\"40\" y1=\"220\" x2=\"440\" y2=\"220\" stroke=\"#4f46e5\" stroke-width=\"2\" marker-end=\"url(#arrowThinIndigo)\" vector-effect=\"non-scaling-stroke\"></line> <!-- LADO DIREITO: Corrotina --> <!-- trilho --> <line x1=\"520\" y1=\"120\" x2=\"920\" y2=\"120\" stroke=\"#fb7185\" stroke-width=\"2\" vector-effect=\"non-scaling-stroke\"></line> <text x=\"520\" y=\"100\">In√≠cio:</text> <text x=\"905\" y=\"100\" text-anchor=\"end\">Fim:</text> <!-- passos de a√ß√£o --> <rect x=\"540\" y=\"140\" width=\"120\" height=\"28\" rx=\"6\"></rect> <text x=\"600\" y=\"158\" text-anchor=\"middle\" fill=\"#9f1239\"> A√ß√£o 1 </text> <line x1=\"660\" y1=\"154\" x2=\"740\" y2=\"154\"></line> <text x=\"700\" y=\"146\" text-anchor=\"middle\"> WaitForSeconds(1) </text> <rect x=\"740\" y=\"140\" width=\"120\" height=\"28\" rx=\"6\"></rect> <text x=\"800\" y=\"158\" text-anchor=\"middle\" fill=\"#9f1239\"> A√ß√£o 2 </text> <line x1=\"520\" y1=\"220\" x2=\"920\" y2=\"220\" stroke=\"#be185d\" stroke-width=\"2\" marker-end=\"url(#arrowThinPink)\" vector-effect=\"non-scaling-stroke\"></line> <text x=\"520\" y=\"240\"> <tspan>StartCoroutine(Sequ√™ncia())</tspan> ‚Üí executa, pausa com <tspan>yield</tspan> , retoma, repete. </text> </svg> <figcaption> √Ä esquerda, Update executa continuamente a cada frame; √† direita, corrotina executa a√ß√µes com pausas entre elas. </figcaption> </figure> </div> <h4> Anatomia de uma Corrotina: </h4> <ul> <li>O tipo de retorno deve ser <strong>IEnumerator</strong>.</li> <li> Usa a palavra-chave <strong>yield return</strong> para pausar a execu√ß√£o. </li> <li>√â iniciada com o m√©todo <strong>StartCoroutine()</strong>.</li> </ul> <div role=\"note\" data-legacy-card=\"\"> <h4>Pausas Comuns com `yield return`:</h4> <ul> <li> <code>yield return null;</code>: Pausa a corrotina e a retoma no pr√≥ximo frame. </li> <li> <code>yield return new WaitForSeconds(float tempo);</code>: Pausa a corrotina pela quantidade de segundos especificada. Esta √© a mais usada para delays. </li> </ul> </div> <h4> Exemplo: Luz Piscante </h4> <div data-legacy-card=\"\"> <button onclick=\"copiarCodigo(this, 'codigo-corrotina')\"> Copiar </button> <pre><code id=\"codigo-corrotina\">// Script that makes a light blink using a coroutine\nusing System.Collections;\nusing UnityEngine; public class LuzPiscante : MonoBehaviour\n{ public Light minhaLuz; void Start() { // Start the coroutine. It will run in the \"background\". StartCoroutine(CicloDePiscar()); } IEnumerator CicloDePiscar() { // An infinite loop to keep the blinking going while (true) { // Turn the light on minhaLuz.enabled = true; // Pause the execution for 0.5 seconds yield return new WaitForSeconds(0.5f); // Turn the light off minhaLuz.enabled = false; // Pause the execution for 0.5 seconds yield return new WaitForSeconds(0.5f); } }\n}</code></pre> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "corrotinas-avancado",
      "title": "Corrotinas: Tempo e Cancelamento",
      "html": "<div data-legacy-card=\"\"> <h3> Tempo escalado vs n√£o escalado </h3> <ul> <li> <code>WaitForSeconds(x)</code> usa <code>Time.timeScale</code>. Se <code>timeScale=0</code> (pause), a espera ‚Äúcongela‚Äù. </li> <li> <code>WaitForSecondsRealtime(x)</code> ignora <code>timeScale</code> (bom para UI/pausa/timeout). </li> </ul> <pre><code>// Ex.: contagem regressiva que continua mesmo em pause\nIEnumerator Contagem(float secs)\n{ yield return new WaitForSecondsRealtime(secs); Debug.Log(\"Tempo real decorrido mesmo com pause.\");\n}</code></pre> <p> Refer√™ncia: WaitForSecondsRealtime na documenta√ß√£o da Unity. </p> <h3> Cancelar/evitar duplica√ß√£o </h3> <pre><code>Coroutine rotina;\npublic void AbrirComDelay(float s)\n{ if (rotina != null) StopCoroutine(rotina); rotina = StartCoroutine(AbrirDepois(s));\n} IEnumerator AbrirDepois(float s)\n{ yield return new WaitForSeconds(s); // ... abre ... rotina = null;\n}</code></pre> <p> Corrotinas iniciadas em um <em>MonoBehaviour</em> s√£o gerenciadas por ele e t√™m comportamento espec√≠fico ao habilitar/desabilitar o componente. Veja ‚ÄúCoroutines and disabling‚Äù na documenta√ß√£o. </p> </div>"
    },
    {
      "type": "legacySection",
      "id": "estudo-de-caso",
      "title": "Estudo de Caso: A Porta com Atraso",
      "html": "<div data-legacy-grid=\"\"> <p> Vamos unir tudo o que aprendemos para construir o sistema da nossa tarefa: uma placa de press√£o que abre uma porta ap√≥s um pequeno atraso. </p> <h4> Estrutura na Cena: </h4> <ul> <li>Um GameObject \"Jogador\" com a tag \"Player\" e um Rigidbody.</li> <li> Um GameObject \"PlacaDePressao\" com um Box Collider marcado como \"Is Trigger\". </li> <li>Um GameObject \"Porta\" com um Box Collider.</li> </ul> <h4> Script 1: PlacaDePressao.cs </h4> <div data-legacy-card=\"\"> <button onclick=\"copiarCodigo(this, 'codigo-placa')\"> Copiar </button> <pre><code id=\"codigo-placa\">// Attached to the Pressure Plate object\nusing UnityEngine; public class PlacaDePressao : MonoBehaviour\n{ // A public reference to the door we want to open public Porta portaParaAbrir; private void OnTriggerEnter(Collider other) { if (other.CompareTag(\"Player\")) { Debug.Log(\"Player detected! Telling the door to open...\"); // Call the public method on the door script portaParaAbrir.AbrirComAtraso(); } }\n}</code></pre> </div> <h4> Script 2: Porta.cs </h4> <div data-legacy-card=\"\"> <button onclick=\"copiarCodigo(this, 'codigo-porta')\"> Copiar </button> <pre><code id=\"codigo-porta\">// Attached to the Door object\nusing System.Collections;\nusing UnityEngine; public class Porta : MonoBehaviour\n{ public float atrasoParaAbrir = 2f; // 2 second delay // This is a public method that can be called from other scripts public void AbrirComAtraso() { // Start the coroutine that handles the sequence StartCoroutine(SequenciaDeAbertura()); } private IEnumerator SequenciaDeAbertura() { Debug.Log(\"Coroutine started. Waiting for delay...\"); // 1. Wait for the specified delay yield return new WaitForSeconds(atrasoParaAbrir); Debug.Log(\"Delay finished. Opening the door!\"); // 2. Deactivate the door object to \"open\" it gameObject.SetActive(false); }\n}</code></pre> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "boas-praticas",
      "title": "‚úÖBoas Pr√°ticas R√°pidas",
      "html": "<div data-legacy-card=\"\"> <p> ‚úîÔ∏è Use <strong>FixedUpdate</strong> para alterar <code>Rigidbody</code> (for√ßas/velocidades). </p> <p> ‚úîÔ∏è Evite iniciar corrotinas repetidas; guarde a refer√™ncia e cancele quando preciso. </p> <p> ‚úîÔ∏è Em loops infinitos, sempre tenha um <code>yield</code> (ex.: <code>yield return null;</code>). </p> <p> ‚úîÔ∏è Prefira <code>WaitForSecondsRealtime</code> em contagens/tempo de UI durante pause. </p> </div>"
    },
    {
      "type": "legacySection",
      "id": "tarefa",
      "title": "üìù Tarefa (TED): Simulando um Evento com Delay",
      "html": "<div data-legacy-card=\"\"> <p> Sua tarefa √© recriar um sistema similar ao do estudo de caso, mas com uma pequena varia√ß√£o: uma porta que abre com um atraso ap√≥s o jogador clicar nela. </p> <h4>Passo a Passo:</h4> <ol> <li>Crie uma cena com um objeto \"Porta\".</li> <li>Crie um script `PortaInterativa` e anexe-o √† porta.</li> <li> Dentro do script, crie um m√©todo `OnMouseDown()`. Este √© um evento da Unity chamado quando o usu√°rio clica com o mouse sobre um Collider. </li> <li> No `OnMouseDown()`, chame `StartCoroutine()` para iniciar uma corrotina de abertura. </li> <li> Na corrotina, use `yield return new WaitForSeconds()` para criar um delay de 3 segundos. </li> <li> Ap√≥s o delay, desative o GameObject da porta para simular sua abertura. </li> <li> <strong>Entrega:</strong> Publique o c√≥digo completo do seu script `PortaInterativa` no f√≥rum do Moodle e comente em uma ou duas frases como o `StartCoroutine()` foi essencial para criar a sequ√™ncia com tempo de espera. </li> </ol> </div>"
    },
    {
      "type": "legacySection",
      "id": "videos-recomendados",
      "title": "üé¨ V√≠deos Recomendados (PT-BR)",
      "html": "<div data-legacy-card=\"\"> <!-- V√≠deo 1 --> <article> <div> </div> <div> <h3> Corrotinas na Unity ‚Äî Introdu√ß√£o pr√°tica </h3> <p> Conceitos de <code>IEnumerator</code>, <code>yield</code> e <code>WaitForSeconds</code>. </p> </div> </article> <!-- V√≠deo 2 --> <article> <div> </div> <div> <h3> Corrotinas na Unity ‚Äî Exemplos de uso </h3> <p> Sequ√™ncias temporizadas com <code>StartCoroutine()</code> e m√∫ltiplos <code>yield</code>. </p> </div> </article> </div>"
    },
    {
      "type": "legacySection",
      "id": "recursos",
      "title": "üìö Recursos Adicionais",
      "html": "<div data-legacy-card=\"\"> <div> <h4>Documenta√ß√£o Oficial</h4> <ul> <li> <a href=\"https://docs.unity3d.com/Manual/Coroutines.html\" target=\"_blank\" rel=\"noopener noreferrer\">Manual da Unity: Corrotinas</a> </li> <li> <a href=\"https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnTriggerEnter.html\" target=\"_blank\" rel=\"noopener noreferrer\">Documenta√ß√£o: OnTriggerEnter</a> </li> <li> <a href=\"https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnMouseDown.html\" target=\"_blank\" rel=\"noopener noreferrer\">Documenta√ß√£o: OnMouseDown</a> </li> </ul> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "bibliografia",
      "title": "üìö Bibliografia",
      "html": "<div data-legacy-card=\"\"> <p> ALVES, W. P. <strong>Unity: design e desenvolvimento de jogos.</strong> Rio de Janeiro: Alta Books, 2019. </p> <p> SCHUYTEMA, Paul. <strong>Design de games: uma abordagem pr√°tica.</strong> S√£o Paulo: Cengage Learning, 2008. </p> </div>"
    }
  ]
}

{
  "id": "lesson-05",
  "title": "Aula 5: Fundamentos da Unity e Prototipagem",
  "objective": "Configurar um projeto Unity com URP e implementar interações básicas de usuário para prototipar rapidamente.",
  "content": [
    {
      "type": "lessonPlan",
      "title": "Plano da Aula",
      "cards": [
        {
          "icon": "book-open",
          "title": "CONTEÚDO",
          "content": "Interface da Unity, painéis principais, estrutura de cena, configuração do URP e introdução ao novo Input System."
        },
        {
          "icon": "bullseye",
          "title": "OBJETIVO",
          "content": "Compreender a estrutura da interface da Unity, configurar um projeto com URP e utilizar o Input System para eventos básicos de entrada."
        },
        {
          "icon": "gears",
          "title": "METODOLOGIA",
          "content": "Aula prática guiada (hands-on), seguindo o formato de aprendizagem baseada em projetos."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Da Teoria à Prática: Abrindo a Caixa de Ferramentas",
      "content": [
        {
          "type": "paragraph",
          "text": "Nas aulas anteriores, exploramos a história e os conceitos de design. Agora, abrimos a \"caixa de ferramentas\" para construir. A Unity Engine será nosso principal ambiente de criação."
        },
        {
          "type": "callout",
          "variant": "info",
          "title": "Recomendação de Versão",
          "content": [
            {
              "type": "paragraph",
              "text": "Para esta disciplina, recomendamos o uso da versão mais recente LTS (Long-Term Support) da Unity ou a Unity 6. Utilize o template 3D (URP) ao criar novos projetos. Consulte os links na seção \"Recursos\" para download."
            }
          ]
        }
      ]
    },
    {
      "type": "cardGrid",
      "title": "Glossário Essencial da Unity",
      "cards": [
        {
          "title": "GameObject",
          "content": "Qualquer objeto na sua cena (personagens, luzes, câmeras)."
        },
        {
          "title": "Component",
          "content": "Blocos de construção\" que adicionam funcionalidade a um GameObject (ex: Rigidbody para física, um Script para lógica).\""
        },
        {
          "title": "Prefab",
          "content": "Um GameObject pré-configurado e salvo que pode ser reutilizado (ex: um inimigo com todos os seus componentes)."
        },
        {
          "title": "Scene",
          "content": "Um nível ou uma tela do seu jogo. Contém uma coleção de GameObjects."
        },
        {
          "title": "Asset",
          "content": "Qualquer arquivo usado no projeto (imagens, sons, scripts, modelos 3D)."
        },
        {
          "title": "Package",
          "content": "Coleções de funcionalidades da Unity que podem ser adicionadas via Package Manager (ex: Input System, Cinemachine)."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Anatomia da Interface da Unity",
      "content": [
        {
          "type": "paragraph",
          "text": "A interface da Unity é modular e pode ser customizada, mas ela se organiza em torno de algumas janelas (painéis) principais. Entender a função de cada uma é a chave para um fluxo de trabalho eficiente."
        },
        {
          "type": "image",
          "src": "https://sombraprof.github.io/tdjd/imagens/aula_5_imagem_1.svg",
          "alt": "Diagrama da Interface da Unity"
        },
        {
          "type": "cardGrid",
          "cards": [
            {
              "title": "1. Scene View",
              "content": "Sua \"mesa de trabalho\" 3D/2D. É aqui que você posiciona, move, rotaciona e escala todos os objetos do seu jogo (GameObjects)."
            },
            {
              "title": "2. Game View",
              "content": "A visão da câmera do jogador. Mostra como o jogo será visto quando estiver rodando. Use o botão de Play para testar."
            },
            {
              "title": "3. Hierarchy",
              "content": "Uma lista de todos os GameObjects presentes na sua cena atual. A organização aqui (objetos \"filhos\" de outros) afeta o comportamento deles."
            },
            {
              "title": "4. Project Window",
              "content": "Seu \"explorador de arquivos\". Contém todos os assets do seu projeto (modelos 3D, texturas, scripts, sons, etc.), organizados em pastas."
            },
            {
              "title": "5. Inspector",
              "content": "A janela mais importante. Mostra todas as propriedades e componentes do GameObject selecionado na Hierarchy ou na Scene. É aqui que você ajusta tudo: posição, cor, física, scripts, etc."
            }
          ]
        },
        {
          "type": "callout",
          "variant": "warning",
          "title": "Play Mode vs. Edit Mode",
          "content": [
            {
              "type": "paragraph",
              "text": "Qualquer alteração feita enquanto o jogo está rodando (Play Mode - o editor fica com um tom azulado) será perdida ao parar a execução. Sempre faça alterações permanentes no Edit Mode."
            }
          ]
        },
        {
          "type": "callout",
          "variant": "info",
          "title": "Atalhos Essenciais",
          "content": [
            {
              "type": "paragraph",
              "text": "Q: Mão (Pan), W: Mover, E: Rotacionar, R: Escala. F: Focar no objeto selecionado. Alt + Clique Direito: Zoom."
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Configurando o Universal Render Pipeline (URP)",
      "content": [
        {
          "type": "paragraph",
          "text": "O URP é o pipeline de renderização moderno da Unity, otimizado para performance e flexibilidade. A configuração correta é crucial."
        },
        {
          "type": "list",
          "title": "Checklist de Configuração do URP:",
          "items": [
            "Criar com Template: Sempre inicie projetos com o template 3D (URP) no Unity Hub.",
            "Verificar Graphics Settings: Em Edit > Project Settings > Graphics, confirme se um asset \"URP-HighFidelity\" ou similar está no campo Scriptable Render Pipeline Settings.",
            "Verificar Quality Settings: Em Edit > Project Settings > Quality, certifique-se de que o mesmo asset URP está atribuído para cada nível de qualidade.",
            "Converter Materiais: Se você importar assets antigos, eles podem aparecer rosa. Use Window > Rendering > Render Pipeline Converter para atualizá-los para o URP.",
            "Configurações Recomendadas: Em Project Settings > Player > Other Settings, defina Color Space para Linear para cores mais realistas."
          ]
        },
        {
          "type": "list",
          "title": "Pós-processamento com Volumes",
          "items": [
            "Crie um GameObject na cena (GameObject > Volume > Global Volume).",
            "No Inspector do Volume, crie um novo Profile.",
            "Clique em Add Override > Post-processing e adicione efeitos como Bloom e Vignette. Marque as caixas para ativá-los e ajuste os valores.",
            "Selecione sua Main Camera e, no Inspector, ative a opção Post Processing."
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Introdução ao Novo Input System",
      "content": [
        {
          "type": "paragraph",
          "text": "O novo Input System é uma abordagem robusta para gerenciar entradas de múltiplos dispositivos."
        },
        {
          "type": "list",
          "title": "Checklist de Configuração do Input System:",
          "items": [
            "Instalar o Pacote: Via Window > Package Manager, instale o pacote \"Input System\".",
            "Habilitar Backend: Em Project Settings > Player > Other Settings, em Active Input Handling, selecione \"Input System Package (New)\" ou \"Both\". O editor irá reiniciar.",
            "Criar Input Actions: Crie um asset Create > Input Actions. Dentro dele, defina: - Action Maps: Contextos de controle (ex: \"Player\", \"UI\", \"Vehicle\"). - Actions: Ações semânticas (ex: \"Move\", \"Jump\", \"Fire\"). Defina o Action Type (Value para eixos, Button para cliques). - Bindings: As teclas/botões físicos associados a cada Action. Use Composite Bindings para criar vetores 2D (ex: \"Up/Down/Left/Right WASD\").",
            "Gerar Classe C#: No Inspector do asset de Input Actions, marque \"Generate C# Class\" e aplique."
          ]
        },
        {
          "type": "callout",
          "variant": "good-practice",
          "title": "Exemplo de Código C# com CharacterController",
          "content": [
            {
              "type": "paragraph",
              "text": "Este script usa um CharacterController para um movimento mais robusto e baseado em colisão."
            },
            {
              "type": "code",
              "language": "csharp",
              "code": "// NOTE: CharacterController + new Input System \n// (Actions: Player/Move as 2D Vector Composite)\nusing UnityEngine;\nusing UnityEngine.InputSystem;\n\n[RequireComponent(typeof(CharacterController))]\npublic class PlayerController : MonoBehaviour\n{\n  // Auto-generated C# class from your .inputactions\n    private PlayerControls _controls;     \n    private Vector2 _moveInput;\n    private CharacterController _cc;\n\n    private void Awake() {\n        _cc = GetComponent<CharacterController>();\n        _controls = new PlayerControls();\n    }\n\n    private void OnEnable() {\n        var player = _controls.Player;\n        player.Enable();\n\n        // Subscribe to \"Move\" action events\n        player.Move.performed += ctx => _moveInput = ctx.ReadValue<Vector2>();\n        player.Move.canceled  += _  => _moveInput = Vector2.zero;\n    }\n\n    private void OnDisable() {\n        // It's fine to disable the whole map; Unity will\n        // release callbacks on domain reloads.\n        _controls.Player.Disable();\n    }\n\n    private void Update() {\n        // Convert 2D input (X,Y) to world movement (X,Z)\n        Vector3 move = new Vector3(_moveInput.x, 0f, _moveInput.y);\n        _cc.Move(move * 5f * Time.deltaTime);\n    }\n}"
            }
          ]
        }
      ]
    },
    {
      "type": "component",
      "component": "Md3BlockDiagram",
      "props": {
        "title": "UML do controlador de jogador (Input System)",
        "summary": "O diagrama sintetiza a hierarquia discutida no exercício guiado, destacando como o script PlayerController reutiliza o ciclo de vida do MonoBehaviour, delega física ao CharacterController e consome o asset gerado pelo novo Input System.",
        "blocks": [
          {
            "id": "monoBehaviour",
            "title": "MonoBehaviour",
            "summary": "Ciclo de vida disponível: OnEnable(), Update(), OnDisable().",
            "layer": 1,
            "kind": "external"
          },
          {
            "id": "playerController",
            "title": "PlayerController",
            "summary": "Atributos: _controls: PlayerControls, _moveInput: Vector2, _cc: CharacterController. Métodos: Awake(), OnEnable(), OnDisable(), Update().",
            "layer": 2
          },
          {
            "id": "characterController",
            "title": "CharacterController",
            "summary": "Componente de física que expõe Move(Vector3) para deslocar o jogador.",
            "layer": 3,
            "kind": "process"
          },
          {
            "id": "playerControls",
            "title": "PlayerControls",
            "summary": "Classe auto-gerada pelo Input System. Métodos: Enable(), Disable(); atributo Player: PlayerActions.",
            "layer": 3,
            "kind": "process"
          },
          {
            "id": "playerActions",
            "title": "PlayerActions",
            "summary": "Mapa 'Player' com a ação Move: InputAction; métodos Enable()/Disable().",
            "layer": 4,
            "kind": "data-store"
          }
        ],
        "channels": [
          {
            "id": "inheritance",
            "from": "monoBehaviour",
            "to": "playerController",
            "description": "Herança garante acesso aos ganchos do ciclo de vida discutidos em aula.",
            "kind": "control"
          },
          {
            "id": "physics",
            "from": "playerController",
            "to": "characterController",
            "description": "[RequireComponent] assegura a presença do CharacterController antes de rodar o protótipo.",
            "kind": "control"
          },
          {
            "id": "inputAsset",
            "from": "playerController",
            "to": "playerControls",
            "description": "Instancia e habilita o asset gerado pelo Input System na rotina Awake/OnEnable().",
            "kind": "data"
          },
          {
            "id": "mapExpose",
            "from": "playerControls",
            "to": "playerActions",
            "description": "Classe expõe o mapa Player com a ação Move configurada no exercício guiado.",
            "kind": "control"
          },
          {
            "id": "eventFlow",
            "from": "playerActions",
            "to": "playerController",
            "description": "Eventos Move.performed/Move.canceled alimentam _moveInput e mantêm o vetor normalizado.",
            "kind": "data"
          }
        ],
        "legend": [
          {
            "id": "design",
            "label": "Decisão de design",
            "description": "O controlador herda MonoBehaviour para reutilizar o ciclo de vida padronizado sem reinventar hooks."
          },
          {
            "id": "fisica",
            "label": "Física reaproveitada",
            "description": "A composição com CharacterController reproduz a recomendação de usar componentes prontos para colisão estável."
          },
          {
            "id": "input",
            "label": "Fluxo de entrada",
            "description": "O asset PlayerControls gera callbacks que sincronizam _moveInput com os bindings definidos durante a demonstração."
          }
        ]
      }
    },
    {
      "type": "cardGrid",
      "title": "Erros Comuns e Soluções",
      "cards": [
        {
          "title": "URP",
          "content": "- Materiais Rosas: Use o Render Pipeline Converter.\n- Pós-processamento não funciona: Verifique se o Post Processing está ativo na Câmera e se há um Volume na cena.\n- Cena escura: Ajuste a luz direcional, o skybox ou a exposição (Exposure) no Volume."
        },
        {
          "title": "Input System",
          "content": "- Input não funciona: Verifique se o Active Input Handling está como \"New\" ou \"Both\".\n- UI não responde: Adicione o componente Input System UI Input Module ao seu EventSystem.\n- Ações não salvas: Sempre clique em \"Save Asset\" na janela de Input Actions após modificar."
        }
      ]
    },
    {
      "type": "videosBlock",
      "title": "🎬 Vídeos em Português (PT-BR)",
      "videos": [
        {
          "youtubeId": "zhi14HpKqnU",
          "title": "Novo Input System (introdução)",
          "description": "Conceitos e configuração do pacote."
        },
        {
          "youtubeId": "PDPI5SBOzck",
          "title": "Input System: o método que eu uso",
          "description": "Fluxo de trabalho com Actions/Bindings."
        },
        {
          "youtubeId": "qPFhrC5r7ao",
          "title": "Multi-Input (mouse, gamepad, mobile)",
          "description": "Mapas e esquemas de controle."
        },
        {
          "youtubeId": "Yc1pcD_Kl3I",
          "title": "Minicurso: Novo Input System",
          "description": "Aprofundamento prático."
        },
        {
          "youtubeId": "IsewuyLXy2I",
          "title": "URP: atualizando projeto",
          "description": "Converter materiais e ajustes."
        },
        {
          "youtubeId": "DTPaZP-rUTo",
          "title": "HDRP vs URP",
          "description": "Quando usar cada pipeline."
        },
        {
          "youtubeId": "eJPD2Os9leI",
          "title": "Movimentação 3D (CharacterController)",
          "description": "Base para o protótipo da aula."
        },
        {
          "youtubeId": "7sc72lCpsHs",
          "title": "Curso Unity (introdução)",
          "description": "Base para iniciantes (PT-BR)."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "📝 Tarefa (TED): Meu Primeiro Protótipo",
      "content": [
        {
          "type": "paragraph",
          "text": "O objetivo é aplicar os conceitos da aula para criar uma cena mínima funcional, garantindo que seu ambiente de desenvolvimento está pronto."
        },
        {
          "type": "list",
          "title": "Checklist de Entrega:",
          "items": [
            "Nome do Projeto: NOME_SOBRENOME_TDJD_AULA5",
            "Estrutura de Pastas: Crie pastas _Project/Scenes, Scripts, Prefabs.",
            "Entrega: Poste um vídeo/GIF no Moodle mostrando o jogador se movendo. Anexe o projeto compactado (.zip, máx 50MB)."
          ]
        },
        {
          "type": "callout",
          "variant": "good-practice",
          "title": "Extensões (Opcional)",
          "content": [
            {
              "type": "paragraph",
              "text": "Para um desafio extra, tente implementar: um efeito de pós-processamento (Bloom), suporte a gamepad no Input Action, ou uma câmera que segue o jogador."
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "📚 Recursos Oficiais e Vídeos",
      "content": [
        {
          "type": "button",
          "text": "Unity — Releases & Support (LTS/Updates)",
          "href": "https://unity.com/releases/editor/qa/lts-releases"
        },
        {
          "type": "button",
          "text": "Unity — Download Archive (todas as versões)",
          "href": "https://unity.com/download/archive"
        },
        {
          "type": "button",
          "text": "Unity Hub — Instalar versões",
          "href": "https://unity.com/download"
        },
        {
          "type": "button",
          "text": "Shortcuts Manager (atalhos)",
          "href": "https://docs.unity3d.com/Manual/ShortcutsManager.html"
        },
        {
          "type": "button",
          "text": "Upgrading from Built-In RP to URP",
          "href": "https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@14.0/manual/upgrading-your-project-to-urp.html"
        },
        {
          "type": "button",
          "text": "SRP Batcher (overview e uso)",
          "href": "https://docs.unity3d.com/Manual/srp-batcher.html"
        },
        {
          "type": "button",
          "text": "Color spaces (Linear vs Gamma)",
          "href": "https://docs.unity3d.com/Manual/LinearRendering-LinearOrGammaWorkflow.html"
        },
        {
          "type": "button",
          "text": "Volumes e pós-processamento no URP",
          "href": "https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@14.0/manual/post-processing-urp.html"
        },
        {
          "type": "button",
          "text": "Unity Learn — Introduction to URP",
          "href": "https://learn.unity.com/project/introduction-to-the-universal-render-pipeline-for-advanced-creators"
        },
        {
          "type": "button",
          "text": "Installation & Active Input Handling",
          "href": "https://docs.unity3d.com/Packages/com.unity.inputsystem@1.7/manual/Installation.html"
        },
        {
          "type": "button",
          "text": "Quick start (Actions e PlayerInput)",
          "href": "https://docs.unity3d.com/Packages/com.unity.inputsystem@1.7/manual/QuickStart.html"
        },
        {
          "type": "button",
          "text": "PlayerInput (manual)",
          "href": "https://docs.unity3d.com/Packages/com.unity.inputsystem@1.7/manual/Components.html"
        },
        {
          "type": "button",
          "text": "InputSystemUIInputModule (UI)",
          "href": "https://docs.unity3d.com/Packages/com.unity.inputsystem@1.7/manual/UI.html"
        },
        {
          "type": "button",
          "text": "Using the Input System in Unity (curso)",
          "href": "https://learn.unity.com/project/using-the-input-system-in-unity"
        }
      ]
    },
    {
      "type": "bibliographyBlock",
      "title": "📚 Bibliografia e Referências",
      "references": [
        "ALVES, W. P. Unity: design e desenvolvimento de jogos. Rio de Janeiro: Alta Books, 2019.",
        "ALVES, George Santiago. Projeto de jogos 3D: modelagem e programação. São Paulo: Platos, 2021."
      ]
    }
  ],
  "formatVersion": "md3.lesson.v1",
  "slug": "fundamentos-da-unity-e-prototipagem",
  "summary": "Introduz a interface da Unity, configura projetos com URP e explora entradas básicas usando o Input System em protótipos simples.",
  "objectives": [
    "Reconhecer painéis e fluxos principais da interface da Unity.",
    "Configurar um projeto com Universal Render Pipeline.",
    "Mapear entradas do jogador usando o novo Input System."
  ],
  "competencies": [
    "Prototipagem ágil",
    "Domínio de ferramentas técnicas",
    "Experiência do usuário"
  ],
  "skills": [
    "Organizar hierarquia de GameObjects em cenas.",
    "Aplicar URP e ajustar iluminação base.",
    "Configurar ações e eventos no Input System."
  ],
  "outcomes": [
    "Cria um projeto Unity funcional com URP.",
    "Implementa interações básicas via teclado ou controle.",
    "Documenta decisões de setup para referência da equipe."
  ],
  "prerequisites": [
    "Conhecimento introdutório de engines e mercado.",
    "Computador com Unity instalado."
  ],
  "tags": ["unity", "prototipagem", "input-system"],
  "duration": 150,
  "modality": "in-person",
  "resources": [
    {
      "label": "Unity Learn – Introdução ao Editor",
      "url": "https://learn.unity.com/pathway/junior-programmer",
      "type": "course"
    },
    {
      "label": "Configuring the Universal Render Pipeline",
      "url": "https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@latest",
      "type": "documentation"
    }
  ],
  "bibliography": [
    "PENNY, J. Introduction to Game Programming with Unity. CRC Press, 2022.",
    "Unity Technologies. Input System Manual. 2024."
  ],
  "assessment": {
    "type": "practical",
    "description": "Checklist de configuração do projeto base entregue no final da aula."
  },
  "metadata": {
    "status": "published",
    "updatedAt": "2025-03-31T00:00:00.000Z",
    "owners": ["Prof. Tiago Sombra"],
    "sources": ["Plano de ensino TDJD 2025.1"]
  }
}

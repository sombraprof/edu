{
  "id": "lesson-12",
  "title": "Aula 12: Input System na Unity (C#)",
  "objective": "Mapear e consumir entradas do jogador usando o Input System em C#.",
  "content": [
    {
      "type": "flightPlan",
      "title": "Etapas da aula",
      "items": [
        "Setup: Instalar e ativar o pacote Input System no projeto.",
        "Mapear: Criar Action Maps para gameplay e menus.",
        "Codar: Consumir callbacks gerados em scripts C#.",
        "Testar: Validar teclado, gamepad e dispositivos mobile.",
        "Iterar: Configurar rebinding básico e registrar aprendizados."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Criando mapas de ação",
      "content": [
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Asset",
              "text": "Crie um Input Actions asset com os mapas Player e UI."
            },
            {
              "title": "Actions",
              "text": "Adicione ações como Move, Jump, Pause definindo bindings para teclado e gamepad."
            },
            {
              "title": "Generate C# Class",
              "text": "Habilite o wrapper C# para consumir eventos com tipagem forte."
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Consumindo entradas no script",
      "content": [
        {
          "type": "code",
          "language": "csharp",
          "code": "public class PlayerInputHandler : MonoBehaviour, PlayerInputActions.IPlayerActions\n{\n    private PlayerInputActions input;\n    private Vector2 moveInput;\n\n    private void Awake()\n    {\n        input = new PlayerInputActions();\n        input.Player.SetCallbacks(this);\n    }\n\n    private void OnEnable() => input.Player.Enable();\n    private void OnDisable() => input.Player.Disable();\n\n    public void OnMove(InputAction.CallbackContext context)\n    {\n        moveInput = context.ReadValue<Vector2>();\n    }\n\n    public void OnJump(InputAction.CallbackContext context)\n    {\n        if (context.performed)\n        {\n            // Trigger jump\n        }\n    }\n\n    private void Update()\n    {\n        // Consumir moveInput aqui\n    }\n}\n"
        },
        {
          "type": "callout",
          "variant": "info",
          "title": "Lifecycle",
          "content": [
            {
              "type": "paragraph",
              "text": "Habilite/desabilite mapas em OnEnable/OnDisable para evitar eventos duplicados."
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Testes multiplataforma",
      "content": [
        {
          "type": "paragraph",
          "text": "Utilize o Input Debugger para inspecionar dispositivos conectados e verificar se os bindings respondem corretamente."
        },
        {
          "type": "callout",
          "variant": "good-practice",
          "title": "Checklist de QA",
          "content": [
            {
              "type": "paragraph",
              "text": "Teste transição de gamepad para teclado sem reiniciar a cena, valide deadzones e documente feedback dos testers."
            }
          ]
        }
      ]
    },
    {
      "type": "checklist",
      "title": "Entrega mínima",
      "items": [
        "Action Maps configurados e versionados.",
        "Scripts consomem callbacks sem erros de referência.",
        "Planilha registra resultados de testes com diferentes dispositivos."
      ]
    }
  ],
  "formatVersion": "md3.lesson.v1",
  "slug": "input-system-na-unity",
  "summary": "Configura mapas de controle com o Input System, conectando ações a scripts C# e permitindo múltiplos dispositivos.",
  "objectives": [
    "Configurar Action Maps e esquemas de controle.",
    "Associar callbacks de entrada a scripts de gameplay.",
    "Testar múltiplos dispositivos e rebinding em tempo de execução."
  ],
  "competencies": ["Experiência do usuário", "Programação de gameplay", "Acessibilidade"],
  "skills": [
    "Criar ativos de Input Actions e gerar C# wrappers.",
    "Consumir eventos de entrada em scripts componentizados.",
    "Implementar rebinding básico para personalização."
  ],
  "outcomes": [
    "Entrega protótipo com controles responsivos usando Input System.",
    "Documenta mapeamentos e esquemas no GDD.",
    "Planeja testes de acessibilidade para diferentes dispositivos."
  ],
  "prerequisites": ["Fundamentos de C# na Unity.", "Noções de design centrado no jogador."],
  "tags": ["unity", "input-system", "controle"],
  "duration": 150,
  "modality": "in-person",
  "resources": [
    {
      "label": "Input System Quickstart",
      "url": "https://docs.unity3d.com/Packages/com.unity.inputsystem@1.7/manual/QuickStartGuide.html",
      "type": "documentation"
    },
    {
      "label": "Unity Learn – Advanced Input",
      "url": "https://learn.unity.com/tutorial/new-input-system",
      "type": "course"
    }
  ],
  "bibliography": [
    "Unity Technologies. Input System Manual. 2024.",
    "BARRERA, R. Game Programming with Unity and C#. Apress, 2022."
  ],
  "assessment": {
    "type": "practical",
    "description": "Checklist de controle com múltiplos esquemas testados em sala."
  },
  "metadata": {
    "status": "published",
    "updatedAt": "2025-02-05T00:00:00.000Z",
    "owners": ["Prof. Lucas Azevedo"],
    "sources": ["Plano de ensino TDJD 2025.1"]
  }
}

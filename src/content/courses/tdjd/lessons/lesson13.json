{
  "id": "lesson13",
  "title": "Aula 13: Projeto Final",
  "objective": "",
  "content": [
    {
      "type": "html",
      "html": "<!DOCTYPE html>\n<html lang=\"pt-BR\" class=\"scroll-smooth\">\n\n<head>\n  <!-- Essential Meta Tags -->\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>TDJD - Aula 13: Arquitetura Baseada em Componentes (CBA)</title>\n  <meta name=\"description\"\n    content=\"Unidade III – Programação com C# para Games. Entenda o paradigma da Arquitetura Baseada em Componentes da Unity para criar scripts modulares, reutilizáveis e organizados.\" />\n  <meta name=\"author\" content=\"Prof. Tiago Guimarães Sombra\" />\n  <meta name=\"keywords\"\n    content=\"Unity, C#, Arquitetura de Software, Component-Based Architecture, CBA, GameObjects, Componentes, SOLID\" />\n\n  <!-- Open Graph / Facebook -->\n  <meta property=\"og:type\" content=\"website\" />\n  <meta property=\"og:url\" content=\"URL_DA_SUA_PAGINA_AQUI\" />\n  <meta property=\"og:title\" content=\"TDJD - Aula 13: Arquitetura Baseada em Componentes (CBA)\" />\n  <meta property=\"og:description\"\n    content=\"Aprenda a organizar seus scripts na Unity de forma profissional com o paradigma de Component-Based Architecture.\" />\n  <meta property=\"og:image\" content=\"https://placehold.co/1200x630/5b21b6/ffffff?text=TDJD\\nAula+13\" />\n\n  <!-- Twitter -->\n  <meta property=\"twitter:card\" content=\"summary_large_image\" />\n  <meta property=\"twitter:url\" content=\"URL_DA_SUA_PAGINA_AQUI\" />\n  <meta property=\"twitter:title\" content=\"TDJD - Aula 13: Arquitetura Baseada em Componentes (CBA)\" />\n  <meta property=\"twitter:description\"\n    content=\"Aprenda a organizar seus scripts na Unity de forma profissional com o paradigma de Component-Based Architecture.\" />\n  <meta property=\"twitter:image\" content=\"https://placehold.co/1200x630/5b21b6/ffffff?text=TDJD\\nAula+13\" />\n\n  <!-- CDN Links -->\n  <script src=\"https://cdn.tailwindcss.com?plugins=typography\"></script>\n  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n  <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" rel=\"stylesheet\" />\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\" />\n\n  <!-- Custom Styles -->\n  <style>\n    body {\n      font-family: \"Inter\", sans-serif;\n      background-color: #f8fafc;\n      padding-top: 60px;\n    }\n\n    .callout {\n      border-left-width: 4px;\n      padding: 1.5rem;\n      margin: 1.5rem 0;\n      border-radius: 0.5rem;\n    }\n\n    .callout-info {\n      background-color: #f0f9ff;\n      border-color: #7dd3fc;\n      color: #0c4a6e;\n    }\n\n    .callout-practice {\n      background-color: #f0fdf4;\n      border-color: #6ee7b7;\n      color: #065f46;\n    }\n\n    .code-block-wrapper {\n      position: relative;\n    }\n\n    .copy-code-button {\n      position: absolute;\n      top: 0.5rem;\n      right: 0.5rem;\n      background-color: #4a5568;\n      color: white;\n      border: none;\n      padding: 0.25rem 0.5rem;\n      border-radius: 0.25rem;\n      font-size: 0.75rem;\n      cursor: pointer;\n      transition: background-color 0.2s;\n    }\n\n    .copy-code-button:hover {\n      background-color: #2d3748;\n    }\n  </style>\n</head>\n\n<body class=\"text-slate-800\">\n  <!-- Fixed Navigation Menu -->\n  <nav class=\"bg-white/80 backdrop-blur-md shadow-sm fixed top-0 left-0 right-0 z-50\" role=\"navigation\"\n    aria-label=\"Navegação Principal\">\n    <div class=\"container mx-auto px-6\">\n      <div class=\"flex justify-between items-center h-16\">\n        <span class=\"text-lg font-bold text-violet-700\">TDJD - Aula 13</span>\n        <div class=\"hidden md:flex space-x-4 text-sm font-semibold\">\n          <a href=\"#plano-aula\" class=\"text-slate-600 hover:text-violet-600\">Plano</a>\n          <a href=\"#paradigma\" class=\"text-slate-600 hover:text-violet-600\">Paradigma</a>\n          <a href=\"#monolito-vs-modular\" class=\"text-slate-600 hover:text-violet-600\">Monólito vs Modular</a>\n          <a href=\"#comunicacao\" class=\"text-slate-600 hover:text-violet-600\">Comunicação</a>\n          <a href=\"#tarefa\" class=\"text-slate-600 hover:text-violet-600\">TED</a>\n          <a href=\"#recursos\" class=\"text-slate-600 hover:text-violet-600\">Recursos</a>\n        </div>\n      </div>\n    </div>\n  </nav>\n\n  <!-- Page Header -->\n  <header class=\"bg-slate-800 shadow-md relative\">\n    <div class=\"w-full h-48 bg-gradient-to-r from-violet-800 to-purple-900 opacity-80\"></div>\n    <div\n      class=\"container mx-auto px-6 py-8 absolute bottom-0 left-0 right-0 bg-gradient-to-t from-slate-900/70 to-transparent\">\n      <h1 class=\"text-4xl font-bold text-white\">\n        Aula 13: Arquitetura Baseada em Componentes\n      </h1>\n      <p class=\"text-xl text-slate-300 mt-2\">\n        Unidade III – Programação com C# para Games\n      </p>\n    </div>\n  </header>\n\n  <!-- Main Content Area -->\n  <main class=\"container mx-auto px-6 py-10\" role=\"main\">\n    <!-- Section: Lesson Plan -->\n    <section id=\"plano-aula\" aria-labelledby=\"plano-aula-heading\"\n      class=\"mb-12 bg-violet-50 border border-violet-200 p-8 rounded-2xl shadow-lg\">\n      <h2 id=\"plano-aula-heading\" class=\"text-3xl font-bold text-violet-700 mb-6 text-center\">Plano da Aula</h2>\n      <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <div class=\"bg-white p-6 rounded-lg shadow-sm\">\n          <h3 class=\"font-semibold text-lg text-violet-800 mb-2\"><i class=\"fa-solid fa-book-open mr-2\"></i>CONTEÚDO</h3>\n          <p class=\"text-slate-600 mt-1 text-sm\">Introdução à Arquitetura Baseada em Componentes (CBA). Organização de scripts e responsabilidades. Relação entre GameObjects, componentes e scripts.</p>\n        </div>\n        <div class=\"bg-white p-6 rounded-lg shadow-sm\">\n          <h3 class=\"font-semibold text-lg text-violet-800 mb-2\"><i class=\"fa-solid fa-bullseye mr-2\"></i>OBJETIVO</h3>\n          <p class=\"text-slate-600 text-sm\">Compreender o paradigma da Unity e aplicar o modelo de CBA para estruturar comportamentos de forma modular e reutilizável.</p>\n        </div>\n        <div class=\"bg-white p-6 rounded-lg shadow-sm\">\n          <h3 class=\"font-semibold text-lg text-violet-800 mb-2\"><i class=\"fa-solid fa-vial-circle-check mr-2\"></i>METODOLOGIA</h3>\n          <p class=\"text-slate-600 text-sm\">Aula prática com análise e refatoração de scripts, contrastando um exemplo monolítico com uma solução modular (estudo de arquitetura aplicada).</p>\n        </div>\n      </div>\n    </section>\n\n    <!-- Section: The Paradigm -->\n    <section id=\"paradigma\" aria-labelledby=\"paradigm-heading\" class=\"mb-12 bg-white p-8 rounded-lg shadow\">\n      <h2 id=\"paradigm-heading\" class=\"text-3xl font-semibold text-slate-800 mb-4\">O Fim do \"Faz-Tudo\": Por Que Arquitetura Importa?</h2>\n      <div class=\"text-slate-700 leading-relaxed space-y-4\">\n        <p>Até agora, focamos em fazer nossos scripts funcionarem. Hoje, vamos focar em fazê-los funcionarem <strong>bem</strong>. Em desenvolvimento de software, e especialmente em jogos, a complexidade cresce exponencialmente. Uma boa arquitetura não é um luxo, é uma necessidade para que o projeto não se torne impossível de manter.</p>\n        <p>A Unity é construída sobre um poderoso paradigma de design de software: a <strong>Arquitetura Baseada em Componentes (CBA)</strong>. A ideia central é simples e elegante:</p>\n        <blockquote class=\"text-xl italic text-slate-600 border-l-4 border-violet-300 pl-4\">\n          \"Prefira <strong>Composição</strong> em vez de <strong>Herança</strong>.\"\n        </blockquote>\n        <p>Isso significa que, em vez de criar uma classe gigante `Player` que herda de `Character`, que herda de `MovableObject` em uma complexa árvore de herança, nós criamos um `GameObject` vazio e o \"montamos\" com peças menores e independentes: um componente para movimento, um para vida, um para ataque, e assim por diante.</p>\n        <div class=\"callout callout-info\">\n          <h4 class=\"font-bold mb-2\">Analogia: Montando um Carro</h4>\n          <p class=\"text-sm\">Pense em um carro. Ele não é uma única peça monolítica. Ele é um chassi (o `GameObject`) ao qual você adiciona componentes: um `Motor`, `Rodas`, um `SistemaDeFreio`, etc. Cada componente tem uma única responsabilidade e pode ser trocado ou melhorado sem afetar os outros. A Unity funciona da mesma forma.</p>\n        </div>\n      </div>\n    </section>\n    \n    <!-- Section: Monolith vs. Modular -->\n    <section id=\"monolito-vs-modular\" aria-labelledby=\"monolith-heading\" class=\"mb-12\">\n        <h2 id=\"monolith-heading\" class=\"text-3xl font-semibold text-slate-800 border-b-2 border-violet-500 pb-2 mb-8\"><i class=\"fa-solid fa-right-left mr-2\"></i>O Monólito vs. O Modular</h2>\n        <p class=\"text-slate-600 mb-6\">Vamos analisar um problema comum: um script que tenta fazer tudo. Chamamos isso de <strong>Script Monolítico</strong> ou \"God Class\".</p>\n        <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            <!-- Monolith Column -->\n            <article class=\"bg-white p-6 rounded-lg shadow border-t-4 border-red-500\">\n                <h3 class=\"text-2xl font-semibold text-red-700 mb-4\">O Anti-Padrão: Script Monolítico</h3>\n                <p class=\"text-sm text-slate-600 mb-4\">Um único script `Player.cs` controla movimento, vida, ataque, som e animação.</p>\n                <div class=\"code-block-wrapper\">\n                    <button class=\"copy-code-button\" onclick=\"copiarCodigo(this, 'codigo-monolito')\">Copiar</button>\n                    <pre class=\"bg-slate-800 text-slate-200 p-4 rounded-lg text-xs overflow-x-auto\"><code id=\"codigo-monolito\">public class Player : MonoBehaviour\n{\n    // Movement variables\n    public float speed;\n    private Vector2 moveInput;\n\n    // Health variables\n    public int maxHealth;\n    private int currentHealth;\n\n    // Attack variables\n    public int attackDamage;\n    public float attackRate;\n\n    void Update()\n    {\n        // Movement logic...\n        HandleMovement();\n        \n        // Attack logic...\n        HandleAttack();\n    }\n    \n    void HandleMovement() { /* ... */ }\n    void HandleAttack() { /* ... */ }\n\n    public void TakeDamage(int damage)\n    {\n        currentHealth -= damage;\n        // Play sound, update UI, check for death...\n    }\n}</code></pre>\n                </div>\n                <h4 class=\"font-semibold text-red-700 mt-4 mb-2\">Problemas:</h4>\n                <ul class=\"list-disc list-inside text-sm text-slate-600 space-y-1\">\n                    <li><strong>Difícil de ler e manter:</strong> Centenas de linhas com responsabilidades misturadas.</li>\n                    <li><strong>Não reutilizável:</strong> Como usar a lógica de vida em um inimigo? Copiando e colando?</li>\n                    <li><strong>Propenso a bugs:</strong> Mudar a lógica de ataque pode quebrar o movimento.</li>\n                    <li><strong>Ruim para colaboração:</strong> Dois programadores não podem trabalhar no mesmo arquivo ao mesmo tempo.</li>\n                </ul>\n            </article>\n\n            <!-- Modular Column -->\n            <article class=\"bg-white p-6 rounded-lg shadow border-t-4 border-green-500\">\n                <h3 class=\"text-2xl font-semibold text-green-700 mb-4\">O Padrão Unity: Componentes</h3>\n                <p class=\"text-sm text-slate-600 mb-4\">O mesmo comportamento é dividido em scripts menores e focados.</p>\n                <div class=\"space-y-2\">\n                    <div class=\"bg-slate-100 p-2 rounded text-xs\"><strong>PlayerMovement.cs:</strong> Controla apenas o movimento.</div>\n                    <div class=\"bg-slate-100 p-2 rounded text-xs\"><strong>Health.cs:</strong> Gerencia apenas a vida. Pode ser usado no Player, em inimigos, em caixas destrutíveis...</div>\n                    <div class=\"bg-slate-100 p-2 rounded text-xs\"><strong>Attacker.cs:</strong> Lida apenas com a lógica de ataque.</div>\n                </div>\n                 <h4 class=\"font-semibold text-green-700 mt-4 mb-2\">Vantagens:</h4>\n                <ul class=\"list-disc list-inside text-sm text-slate-600 space-y-1\">\n                    <li><strong>Princípio da Responsabilidade Única (SOLID):</strong> Cada classe faz uma única coisa.</li>\n                    <li><strong>Reutilizável:</strong> O componente `Health.cs` pode ser anexado a qualquer GameObject.</li>\n                    <li><strong>Fácil de testar e depurar:</strong> Se a vida está com bug, você sabe que o problema está no `Health.cs`.</li>\n                    <li><strong>Flexível:</strong> Quer um inimigo que se move mas não ataca? Anexe apenas `EnemyMovement.cs` e `Health.cs`.</li>\n                </ul>\n            </article>\n        </div>\n    </section>\n\n    <!-- Section: Communication -->\n    <section id=\"comunicacao\" aria-labelledby=\"communication-heading\" class=\"mb-12\">\n        <h2 id=\"communication-heading\" class=\"text-3xl font-semibold text-slate-800 border-b-2 border-violet-500 pb-2 mb-8\"><i class=\"fa-solid fa-comments mr-2\"></i>Como Componentes Conversam Entre Si?</h2>\n        <div class=\"bg-white p-8 rounded-lg shadow space-y-4\">\n            <p class=\"text-slate-700 leading-relaxed\">Se os scripts são separados, como o componente de ataque sabe que precisa reduzir a vida no componente de vida? Existem várias estratégias de comunicação, cada uma com seus prós e contras.</p>\n            \n            <h3 class=\"text-xl font-semibold text-violet-800 pt-4\">1. `GetComponent<T>()`</h3>\n            <p class=\"text-sm text-slate-600\">A forma mais direta de um componente encontrar outro no mesmo GameObject.</p>\n            <div class=\"code-block-wrapper\">\n                <button class=\"copy-code-button\" onclick=\"copiarCodigo(this, 'codigo-getcomponent')\">Copiar</button>\n                <pre class=\"bg-slate-800 text-slate-200 p-4 rounded-lg text-xs overflow-x-auto\"><code id=\"codigo-getcomponent\">// Em um script 'DamageZone.cs'\nprivate void OnTriggerEnter(Collider other)\n{\n    // Try to find a Health component on the object we collided with\n    Health targetHealth = other.GetComponent<Health>();\n\n    if (targetHealth != null)\n    {\n        targetHealth.TakeDamage(10);\n    }\n}</code></pre>\n            </div>\n             <div class=\"callout callout-info text-sm\"><strong>Boa Prática:</strong> `GetComponent` pode ser lento. Se você precisa da referência com frequência, chame-o uma vez no método `Awake()` ou `Start()` e armazene o resultado em uma variável (cache).</div>\n\n            <h3 class=\"text-xl font-semibold text-violet-800 pt-4\">2. Referências Diretas com `[SerializeField]`</h3>\n            <p class=\"text-sm text-slate-600\">Exponha uma variável no Inspector e arraste a referência manualmente. É ótimo para conectar objetos diferentes na cena.</p>\n            <div class=\"code-block-wrapper\">\n                <button class=\"copy-code-button\" onclick=\"copiarCodigo(this, 'codigo-serializefield')\">Copiar</button>\n                <pre class=\"bg-slate-800 text-slate-200 p-4 rounded-lg text-xs overflow-x-auto\"><code id=\"codigo-serializefield\">// Em um script 'UIManager.cs'\npublic class UIManager : MonoBehaviour\n{\n    [SerializeField] private Health playerHealth; // Drag the Player's Health component here in the Inspector\n    [SerializeField] private Text healthText;\n\n    private void Update()\n    {\n        healthText.text = \"HP: \" + playerHealth.GetCurrentHealth();\n    }\n}</code></pre>\n            </div>\n             <div class=\"callout callout-info text-sm\"><strong>Vantagem:</strong> Cria um acoplamento fraco. O `UIManager` não precisa saber como encontrar o `playerHealth`, ele apenas recebe a referência.</div>\n\n        </div>\n    </section>\n\n    <!-- Section: TED -->\n    <section id=\"tarefa\" aria-labelledby=\"tarefa-heading\" class=\"mb-12\">\n      <h2 id=\"tarefa-heading\" class=\"text-3xl font-semibold text-slate-800 border-b-2 border-violet-500 pb-2 mb-4\">\n        📝 Tarefa (TED): Refatorando um Script Monolítico\n      </h2>\n      <div class=\"bg-white p-8 rounded-lg shadow space-y-4 text-slate-700 leading-relaxed\">\n        <p class=\"text-lg\">Sua tarefa é pegar um script monolítico que controla uma porta e refatorá-lo, aplicando os princípios da Arquitetura Baseada em Componentes.</p>\n        \n        <h4 class=\"font-semibold text-violet-800 mt-6 mb-2\">O Script \"Antes\" (Monolítico):</h4>\n        <div class=\"code-block-wrapper\">\n            <button class=\"copy-code-button\" onclick=\"copiarCodigo(this, 'codigo-ted-antes')\">Copiar</button>\n            <pre class=\"bg-slate-800 text-slate-200 p-4 rounded-lg text-xs overflow-x-auto\"><code id=\"codigo-ted-antes\">public class MonolithicDoor : MonoBehaviour\n{\n    public bool isLocked = false;\n    public AudioClip openSound;\n    public AudioClip closeSound;\n    private bool isOpen = false;\n    private AudioSource audioSource;\n    private Animator animator;\n\n    void Awake()\n    {\n        audioSource = GetComponent<AudioSource>();\n        animator = GetComponent<Animator>();\n    }\n\n    public void Interact()\n    {\n        if (isLocked) return;\n\n        isOpen = !isOpen;\n        animator.SetBool(\"IsOpen\", isOpen);\n\n        if (isOpen) {\n            audioSource.PlayOneShot(openSound);\n        } else {\n            audioSource.PlayOneShot(closeSound);\n        }\n    }\n}</code></pre>\n        </div>\n        \n        <h4 class=\"font-semibold text-violet-800 mt-6 mb-2\">Sua Missão:</h4>\n        <ol class=\"list-decimal list-inside space-y-2 text-sm\">\n            <li>Crie um projeto Unity simples. Crie um GameObject \"Porta\".</li>\n            <li>Crie os seguintes scripts, separando as responsabilidades do script acima:\n                <ul class=\"list-disc list-inside mt-2 pl-4\">\n                    <li><code>DoorInteraction.cs</code>: Deve detectar a interação (ex: um método público `Interact()`).</li>\n                    <li><code>DoorAnimator.cs</code>: Deve ser responsável <strong>apenas</strong> por controlar o `Animator`.</li>\n                    <li><code>DoorAudio.cs</code>: Deve ser responsável <strong>apenas</strong> por tocar os sons de abrir e fechar.</li>\n                    <li><code>DoorLockSystem.cs</code>: Deve gerenciar <strong>apenas</strong> o estado de \"trancada\" (`isLocked`).</li>\n                </ul>\n            </li>\n            <li>Use `GetComponent` dentro dos scripts para que eles se comuniquem (ex: `DoorInteraction` chama métodos em `DoorAnimator` e `DoorAudio`).</li>\n            <li><strong>Entrega:</strong> Poste no Moodle os 4 novos scripts em blocos de código. Abaixo de cada um, escreva uma frase explicando sua única responsabilidade.</li>\n        </ol>\n      </div>\n    </section>\n\n    <!-- Section: Resources -->\n    <section id=\"recursos\" aria-labelledby=\"recursos-heading\" class=\"mb-12\">\n        <h2 id=\"recursos-heading\" class=\"text-3xl font-semibold text-slate-800 border-b-2 border-violet-500 pb-2 mb-4\">📚 Recursos Adicionais</h2>\n        <div class=\"bg-white p-8 rounded-lg shadow grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <div><h4 class=\"font-bold text-violet-800 mb-2\">Documentação Oficial da Unity</h4><ul class=\"text-sm space-y-2\">\n                <li><a href=\"https://docs.unity3d.com/Manual/CreatingAndUsingScripts.html\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-violet-600 hover:underline\">Creating and Using Scripts</a></li>\n                <li><a href=\"https://docs.unity3d.com/Manual/ComponentReference.html\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-violet-600 hover:underline\">Component Reference</a></li>\n                <li><a href=\"https://docs.unity3d.com/ScriptReference/GameObject.GetComponent.html\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-violet-600 hover:underline\">Scripting API: GetComponent</a></li>\n            </ul></div>\n            <div><h4 class=\"font-bold text-violet-800 mb-2\">Artigos e Vídeos</h4><ul class=\"text-sm space-y-2\">\n                <li><a href=\"https://www.gamedeveloper.com/design/unity-s-component-based-architecture\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-violet-600 hover:underline\">Unity's Component-Based Architecture (Game Developer)</a></li>\n                <li><a href=\"https://www.youtube.com/watch?v=k_i8a-9t_pA\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-violet-600 hover:underline\">SOLID Principles in C# for Unity (Video)</a></li>\n                <li><a href=\"https://www.youtube.com/watch?v=k_Q_wzz-Q5c\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-violet-600 hover:underline\">Comunicação entre Scripts na Unity (Fábrica de Jogos - PT-BR)</a></li>\n            </ul></div>\n        </div>\n    </section>\n\n    <!-- Section: Bibliography -->\n    <section id=\"bibliografia\" aria-labelledby=\"bibliografia-heading\" class=\"mb-12\">\n      <h2 id=\"bibliografia-heading\"\n        class=\"text-3xl font-semibold text-slate-800 border-b-2 border-violet-500 pb-2 mb-4\">\n        📚 Bibliografia\n      </h2>\n      <div class=\"bg-white p-8 rounded-lg shadow space-y-4 text-slate-700 leading-relaxed\">\n        <p>ALVES, W. P. <strong>Unity: design e desenvolvimento de jogos.</strong> Rio de Janeiro: Alta Books, 2019.</p>\n        <p>MASTROCOLA, Vicente Martin. <strong>Game design: modelos de negócio e processos criativos.</strong> São Paulo: Cengage Learning, 2015.</p>\n      </div>\n    </section>\n  </main>\n\n  <!-- Footer -->\n  <footer class=\"bg-slate-800 text-white mt-12\" role=\"contentinfo\">\n    <div class=\"container mx-auto px-6 py-6 text-center\">\n      <p>&copy; 2025 - Tecnologia e Desenvolvimento de Jogos Digitais | Semestre 2025.2</p>\n      <p class=\"text-sm text-slate-400\">Material desenvolvido para os cursos de ADS e SI da UniChristus.</p>\n      <div class=\"mt-4\">\n        <a href=\"#\" class=\"text-violet-400 hover:underline text-sm\">Acessar Moodle</a>\n        <span class=\"text-slate-500 mx-2\">|</span>\n        <a href=\"#\" class=\"text-violet-400 hover:underline text-sm\">Política de Uso</a>\n      </div>\n    </div>\n  </footer>\n\n  <script>\n    function copiarCodigo(button, elementId) {\n      const codeElement = document.getElementById(elementId);\n      const codeToCopy = codeElement.innerText;\n      \n      // Fallback for environments where clipboard API is restricted\n      const textarea = document.createElement('textarea');\n      textarea.value = codeToCopy;\n      textarea.style.position = 'fixed'; // Prevent scrolling to bottom of page in MS Edge.\n      document.body.appendChild(textarea);\n      textarea.focus();\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        button.innerText = 'Copiado!';\n      } catch (err) {\n        button.innerText = 'Erro!';\n        console.error('Fallback: Oops, unable to copy', err);\n      }\n      document.body.removeChild(textarea);\n\n      setTimeout(() => {\n        button.innerText = 'Copiar';\n      }, 2000);\n    }\n  </script>\n</body>\n\n</html>\n"
    }
  ]
}

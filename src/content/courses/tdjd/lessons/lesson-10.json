{
  "id": "lesson-10",
  "title": "Aula 10: Fundamentos de C# na Unity",
  "objective": "Implementar scripts C# fundamentais para controlar comportamentos em Unity.",
  "content": [
    {
      "type": "flightPlan",
      "title": "Roadmap da aula",
      "items": [
        "Recapitular: Componentes e hierarquia de GameObjects na cena.",
        "Introduzir: Estrutura base de um script C# e o ciclo de vida do MonoBehaviour.",
        "Codar: Implementar movimento e intera√ß√£o com entrada do jogador.",
        "Depurar: Usar logs e inspe√ß√£o no Inspector para validar comportamentos.",
        "Consolidar: Registrar aprendizados e preparar o exerc√≠cio de casa."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Anatomia de um MonoBehaviour",
      "content": [
        {
          "type": "paragraph",
          "text": "Scripts em Unity s√£o componentes anexados a GameObjects. O MonoBehaviour oferece ganchos como Start e Update que a engine chama automaticamente."
        },
        {
          "type": "code",
          "language": "csharp",
          "code": "using UnityEngine;\n\npublic class PlayerController : MonoBehaviour\n{\n    [SerializeField] private float speed = 5f;\n    private Rigidbody2D body;\n\n    private void Awake()\n    {\n        body = GetComponent<Rigidbody2D>();\n    }\n\n    private void Update()\n    {\n        var input = new Vector2(Input.GetAxis(\"Horizontal\"), Input.GetAxis(\"Vertical\"));\n        Move(input);\n    }\n\n    private void Move(Vector2 direction)\n    {\n        body.velocity = direction * speed;\n    }\n}\n"
        },
        {
          "type": "callout",
          "variant": "info",
          "title": "Boas pr√°ticas",
          "content": [
            {
              "type": "paragraph",
              "text": "Use [SerializeField] para expor configura√ß√µes sem tornar campos p√∫blicos e prefira inicializa√ß√µes em Awake quando depender de outros componentes."
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "üîÄ Comparativo: if-else vs switch-case",
      "content": [
        {
          "type": "paragraph",
          "text": "Escolher a estrutura condicional correta impacta legibilidade e performance ao controlar estados do jogo."
        },
        {
          "type": "truthTable",
          "title": "Quando usar cada estrutura",
          "headers": ["Cen√°rio", "if-else", "switch-case", "Observa√ß√µes"],
          "rows": [
            [
              { "value": "Intervalos num√©ricos (ex.: vida < 20)" },
              { "state": "true", "display": "‚úî" },
              { "state": "false", "display": "‚úñ" },
              { "value": "Avalia express√µes booleanas e compara√ß√µes complexas." }
            ],
            [
              { "value": "M√∫ltiplos estados discretos (MenuState)" },
              { "state": "true", "display": "‚úî" },
              { "state": "true", "display": "‚úî" },
              { "value": "switch mant√©m leg√≠vel quando h√° muitas op√ß√µes constantes." }
            ],
            [
              { "value": "Valores inteiros ou enum fixos" },
              { "state": "false", "display": "‚úñ" },
              { "state": "true", "display": "‚úî" },
              { "value": "switch-case evita cadeia extensa de else if." }
            ],
            [
              { "value": "Condi√ß√µes com ranges + verifica√ß√£o adicional" },
              { "state": "true", "display": "‚úî" },
              { "state": "false", "display": "‚úñ" },
              { "value": "Combine if-else com m√©todos auxiliares para clareza." }
            ]
          ]
        },
        {
          "type": "code",
          "language": "csharp",
          "title": "Exemplo h√≠brido",
          "code": "public void HandleState(GameState state, int score)\n{\n    if (score < 0) return;\n\n    switch (state)\n    {\n        case GameState.Menu:\n            ShowMainMenu();\n            break;\n        case GameState.Playing when score > highScore:\n            UpdateHighScore();\n            break;\n        case GameState.Paused:\n            TogglePauseUI(true);\n            break;\n        default:\n            Debug.LogWarning($\"Estado n√£o tratado: {state}\");\n            break;\n    }\n}\n"
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "üéØ Rubrica do simulador de l√≥gica",
      "content": [
        {
          "type": "md3Table",
          "headers": ["Crit√©rio", "Excelente (100%)", "Adequado (70%)", "Revisar (40%)"],
          "rows": [
            [
              "Implementa√ß√£o",
              "Scripts compilam, sem warnings, e cobrem todos os estados previstos.",
              "Scripts funcionam, mas h√° warnings ou casos n√£o tratados.",
              "Erros impedem a execu√ß√£o ou faltam estados essenciais."
            ],
            [
              "Organiza√ß√£o",
              "Nomes, coment√°rios e pastas seguem padr√£o da turma.",
              "Pequenos desvios de padr√£o, por√©m compreens√≠vel.",
              "Arquivos soltos, dif√≠cil rastrear responsabilidades."
            ],
            [
              "Testes",
              "Console limpo e logs relevantes anexados na entrega.",
              "H√° logs, por√©m sem evid√™ncias completas.",
              "Sem testes registrados ou logs inconsistentes."
            ]
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Hands-on guiado",
      "content": [
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Criar GameObject",
              "text": "Na cena, adicione um objeto Player com SpriteRenderer e Rigidbody2D."
            },
            {
              "title": "Anexar script",
              "text": "Arraste o script PlayerController para o GameObject e configure a velocidade pelo Inspector."
            },
            {
              "title": "Testar entradas",
              "text": "Execute a cena, observe o Console e ajuste velocidade ou input conforme necess√°rio."
            }
          ]
        },
        {
          "type": "callout",
          "variant": "good-practice",
          "title": "Desafio extra",
          "content": [
            {
              "type": "paragraph",
              "text": "Implemente uma tecla de sprint que multiplique a velocidade por 1.5 enquanto pressionada."
            }
          ]
        }
      ]
    },
    {
      "type": "checklist",
      "title": "Crit√©rios de conclus√£o",
      "items": [
        "Scripts compilam sem erros e est√£o versionados.",
        "Jogador se move suavemente com teclado ou gamepad.",
        "Logs registram valores cr√≠ticos durante testes."
      ]
    }
  ],
  "formatVersion": "md3.lesson.v1",
  "slug": "fundamentos-de-csharp-na-unity",
  "summary": "Apresenta a estrutura de scripts em C# na Unity, cobrindo componentes, ciclo de vida e manipula√ß√£o b√°sica de GameObjects.",
  "objectives": [
    "Compreender o ciclo de vida dos MonoBehaviours.",
    "Declarar vari√°veis, m√©todos e eventos para intera√ß√µes simples.",
    "Referenciar componentes e GameObjects via c√≥digo."
  ],
  "competencies": [
    "Programa√ß√£o orientada a componentes",
    "L√≥gica de programa√ß√£o",
    "Integra√ß√£o c√≥digo-arte"
  ],
  "skills": [
    "Criar scripts e anex√°-los a GameObjects.",
    "Utilizar Start, Update e eventos customizados.",
    "Manipular transforma√ß√µes e entradas b√°sicas via c√≥digo."
  ],
  "outcomes": [
    "Entrega script funcional controlando comportamento de objeto.",
    "Explica rela√ß√£o entre componentes, GameObjects e cenas.",
    "Versiona scripts seguindo conven√ß√µes da equipe."
  ],
  "prerequisites": [
    "Familiaridade com l√≥gica de programa√ß√£o.",
    "Projeto Unity configurado com URP."
  ],
  "tags": ["unity", "csharp", "programacao"],
  "duration": 150,
  "modality": "in-person",
  "resources": [
    {
      "label": "Unity Learn ‚Äì Scripting",
      "url": "https://learn.unity.com/tutorial/introduction-to-scripting",
      "type": "course"
    },
    {
      "label": "MonoBehaviour reference",
      "url": "https://docs.unity3d.com/ScriptReference/MonoBehaviour.html",
      "type": "documentation"
    }
  ],
  "bibliography": [
    "HARRISON, T. Learning C# by Developing Games with Unity. Packt, 2023.",
    "Unity Technologies. Scripting API. 2024."
  ],
  "assessment": {
    "type": "practical",
    "description": "Exerc√≠cio guiado de movimenta√ß√£o e intera√ß√£o com coleta de logs."
  },
  "metadata": {
    "status": "published",
    "updatedAt": "2025-02-05T00:00:00.000Z",
    "owners": ["Prof. Tiago Sombra"],
    "sources": ["Plano de ensino TDJD 2025.1"]
  }
}

{
  "id": "lesson-10",
  "title": "Aula 10: Fundamentos de C# na Unity",
  "objective": "Implementar scripts C# fundamentais para controlar comportamentos em Unity.",
  "content": [
    {
      "type": "flightPlan",
      "title": "Roadmap da aula",
      "items": [
        "Recapitular: Componentes e hierarquia de GameObjects na cena.",
        "Introduzir: Estrutura base de um script C# e o ciclo de vida do MonoBehaviour.",
        "Codar: Implementar movimento e interação com entrada do jogador.",
        "Depurar: Usar logs e inspeção no Inspector para validar comportamentos.",
        "Consolidar: Registrar aprendizados e preparar o exercício de casa."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Anatomia de um MonoBehaviour",
      "content": [
        {
          "type": "paragraph",
          "text": "Scripts em Unity são componentes anexados a GameObjects. O MonoBehaviour oferece ganchos como Start e Update que a engine chama automaticamente."
        },
        {
          "type": "code",
          "language": "csharp",
          "code": "using UnityEngine;\n\npublic class PlayerController : MonoBehaviour\n{\n    [SerializeField] private float speed = 5f;\n    private Rigidbody2D body;\n\n    private void Awake()\n    {\n        body = GetComponent<Rigidbody2D>();\n    }\n\n    private void Update()\n    {\n        var input = new Vector2(Input.GetAxis(\"Horizontal\"), Input.GetAxis(\"Vertical\"));\n        Move(input);\n    }\n\n    private void Move(Vector2 direction)\n    {\n        body.velocity = direction * speed;\n    }\n}\n"
        },
        {
          "type": "callout",
          "variant": "info",
          "title": "Boas práticas",
          "content": [
            {
              "type": "paragraph",
              "text": "Use [SerializeField] para expor configurações sem tornar campos públicos e prefira inicializações em Awake quando depender de outros componentes."
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Hands-on guiado",
      "content": [
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Criar GameObject",
              "text": "Na cena, adicione um objeto Player com SpriteRenderer e Rigidbody2D."
            },
            {
              "title": "Anexar script",
              "text": "Arraste o script PlayerController para o GameObject e configure a velocidade pelo Inspector."
            },
            {
              "title": "Testar entradas",
              "text": "Execute a cena, observe o Console e ajuste velocidade ou input conforme necessário."
            }
          ]
        },
        {
          "type": "callout",
          "variant": "good-practice",
          "title": "Desafio extra",
          "content": [
            {
              "type": "paragraph",
              "text": "Implemente uma tecla de sprint que multiplique a velocidade por 1.5 enquanto pressionada."
            }
          ]
        }
      ]
    },
    {
      "type": "checklist",
      "title": "Critérios de conclusão",
      "items": [
        "Scripts compilam sem erros e estão versionados.",
        "Jogador se move suavemente com teclado ou gamepad.",
        "Logs registram valores críticos durante testes."
      ]
    }
  ],
  "formatVersion": "md3.lesson.v1",
  "slug": "fundamentos-de-csharp-na-unity",
  "summary": "Apresenta a estrutura de scripts em C# na Unity, cobrindo componentes, ciclo de vida e manipulação básica de GameObjects.",
  "objectives": [
    "Compreender o ciclo de vida dos MonoBehaviours.",
    "Declarar variáveis, métodos e eventos para interações simples.",
    "Referenciar componentes e GameObjects via código."
  ],
  "competencies": [
    "Programação orientada a componentes",
    "Lógica de programação",
    "Integração código-arte"
  ],
  "skills": [
    "Criar scripts e anexá-los a GameObjects.",
    "Utilizar Start, Update e eventos customizados.",
    "Manipular transformações e entradas básicas via código."
  ],
  "outcomes": [
    "Entrega script funcional controlando comportamento de objeto.",
    "Explica relação entre componentes, GameObjects e cenas.",
    "Versiona scripts seguindo convenções da equipe."
  ],
  "prerequisites": [
    "Familiaridade com lógica de programação.",
    "Projeto Unity configurado com URP."
  ],
  "tags": ["unity", "csharp", "programacao"],
  "duration": 150,
  "modality": "in-person",
  "resources": [
    {
      "label": "Unity Learn – Scripting",
      "url": "https://learn.unity.com/tutorial/introduction-to-scripting",
      "type": "course"
    },
    {
      "label": "MonoBehaviour reference",
      "url": "https://docs.unity3d.com/ScriptReference/MonoBehaviour.html",
      "type": "documentation"
    }
  ],
  "bibliography": [
    "HARRISON, T. Learning C# by Developing Games with Unity. Packt, 2023.",
    "Unity Technologies. Scripting API. 2024."
  ],
  "assessment": {
    "type": "practical",
    "description": "Exercício guiado de movimentação e interação com coleta de logs."
  },
  "metadata": {
    "status": "published",
    "updatedAt": "2025-02-05T00:00:00.000Z",
    "owners": ["Prof. Tiago Sombra"],
    "sources": ["Plano de ensino TDJD 2025.1"]
  }
}

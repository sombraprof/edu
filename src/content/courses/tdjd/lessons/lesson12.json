{
  "id": "lesson12",
  "title": "Aula 12: Marketing",
  "objective": "",
  "content": [
    {
      "type": "legacySection",
      "id": "plano-aula",
      "title": "Plano da Aula",
      "html": "<div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"book-open\">üìñ</span>CONTE√öDO </h3> <p> Input System na pr√°tica: Action Maps, bindings (teclado/mouse/gamepad), leitura de eventos via C# e v√≠nculo com o personagem. </p> </div> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"bullseye\">üéØ</span>OBJETIVO </h3> <p> Configurar e usar o Input System para capturar a√ß√µes do jogador e acionar comportamentos de movimento e intera√ß√£o via script. </p> </div> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"gears\">‚öôÔ∏è</span>METODOLOGIA </h3> <p> Aula pr√°tica guiada + pair programming (projeto incremental). </p> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "introducao",
      "title": "Por que o Input System?",
      "html": "<p> O <strong>Input System</strong> unifica teclado, mouse, gamepad e toques em um s√≥ fluxo de trabalho. Em vez de ler teclas soltas, definimos <em>A√ß√µes</em> (ex.: <code>Move</code>, <code>Jump</code>, <code>Interact</code>) e mapeamos diferentes dispositivos para cada uma. Isso facilita remapeamento, suporte a m√∫ltiplos joysticks e testes. </p> <blockquote> ‚ÄúO Input System desacopla a inten√ß√£o do jogador do hardware, permitindo incluir novos dispositivos sem reescrever a l√≥gica de jogo.‚Äù </blockquote>"
    },
    {
      "type": "legacySection",
      "id": "comparativo",
      "title": "Input Manager (antigo) √ó Input System (novo)",
      "html": "<div data-legacy-card=\"\"> <table> <thead> <tr> <th>Caracter√≠stica</th> <th>Input Manager</th> <th>Input System</th> </tr> </thead> <tbody> <tr> <td>Abordagem</td> <td>Eixos/strings</td> <td>A√ß√µes/objetos</td> </tr> <tr> <td>Configura√ß√£o</td> <td>Project Settings</td> <td>Asset visual (Action Maps)</td> </tr> <tr> <td>Dispositivos</td> <td>Limitado</td> <td>Amplo (gamepads, touch, etc.)</td> </tr> <tr> <td>Remapeamento</td> <td>Manual e complexo</td> <td>Nativo</td> </tr> <tr> <td>Leitura</td> <td>Polling no <code>Update</code></td> <td>Eventos + polling quando necess√°rio</td> </tr> </tbody> </table> </div>"
    },
    {
      "type": "legacySection",
      "id": "setup",
      "title": "Configura√ß√£o r√°pida",
      "html": "<div data-legacy-grid=\"\"> <ol> <li>Projeto Unity URP aberto.</li> <li> Instale o pacote <strong>Input System</strong> via Package Manager. </li> <li> Ative em <em>Edit &gt; Project Settings &gt; Player &gt; Active Input Handling</em>: <strong>Input System Package (New)</strong> ou <strong>Both</strong>. </li> <li> No <em>Project</em>: <em>Create &gt; Input Actions</em> (<code>PlayerControls</code>). </li> <li> No asset: crie o <strong>Action Map</strong> <code>Player</code> com <code>Move (Vector2)</code>, <code>Jump (Button)</code>, <code>Interact (Button)</code>. </li> <li> Bindings (sugest√£o): <code>Move</code> ‚Üí WASD/Setas/Left Stick; <code>Jump</code> ‚Üí Space + South Button; <code>Interact</code> ‚Üí E + West Button. </li> <li> Marque <strong>Generate C# Class</strong> (<code>PlayerControls.cs</code>) e clique <em>Save Asset</em>. </li> </ol> <div role=\"note\" data-legacy-card=\"\"> <strong>Rein√≠cio do editor</strong>: ao alternar o backend de input, o Unity reinicia para aplicar o novo sistema em todo o editor e no runtime. </div> <div role=\"note\" data-legacy-card=\"\"> <strong>Erros comuns</strong>: esquecer de salvar o asset; n√£o habilitar o mapa com <code>Enable()</code>; colisor sem <em>Is Trigger</em> para intera√ß√µes por √°rea. </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "action-map",
      "title": "Mapa de A√ß√µes (sugest√£o)",
      "html": "<div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <table> <thead> <tr> <th>Action</th> <th>Tipo</th> <th>Bindings (Teclado/Mouse)</th> <th>Bindings (Gamepad)</th> <th>Uso no jogo</th> </tr> </thead> <tbody> <tr> <td>Move</td> <td>Value / Vector2</td> <td>WASD / Setas (2D Vector Composite)</td> <td>Left Stick</td> <td>Dire√ß√£o (X/Z) do personagem</td> </tr> <tr> <td>Jump</td> <td>Button</td> <td>Espa√ßo</td> <td>South Button (A/‚úï)</td> <td>Pular</td> </tr> <tr> <td>Interact</td> <td>Button</td> <td>E</td> <td>West Button (X/‚ñ°)</td> <td>Ativar/Coletar/Usar</td> </tr> </tbody> </table> </div> <div data-legacy-card=\"\"> <h3> Passos r√°pidos para o <code>Move</code> (Composite 2D) </h3> <ol> <li> No Action Map <strong>Player</strong>, crie a Action <code>Move</code> com <em>Action Type: Value</em> e <em>Control Type: Vector2</em>. </li> <li> Adicione um <em>Add 2D Vector Composite</em> e nomeie <code>WASD</code>. </li> <li> Configure: <em>Up=W</em>, <em>Down=S</em>, <em>Left=A</em>, <em>Right=D</em>. Adicione outro composite para setas, se quiser. </li> <li>Adicione binding de <em>Left Stick [Gamepad]</em>.</li> <li>Salve o asset (<em>Save Asset</em>).</li> </ol> </div> <div role=\"note\" data-legacy-card=\"\"> <strong>UX de controle</strong>: deixe pulo em Space/South Button e a√ß√µes frequentes em bot√µes confort√°veis; planeje remapeamento depois. </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "control-schemes",
      "title": "Control Schemes & Auto-Switch",
      "html": "<div data-legacy-grid=\"\"> <p> Separe dispositivos em <strong>Control Schemes</strong> (ex.: <em>Keyboard&amp;Mouse</em> e <em>Gamepad</em>) no asset de <em>Input Actions</em>. O <strong>PlayerInput</strong> pode alternar automaticamente o esquema conforme o √∫ltimo dispositivo usado. </p> <div data-legacy-card=\"\"> <table> <thead> <tr> <th>Esquema</th> <th>Dispositivos</th> <th>Uso</th> </tr> </thead> <tbody> <tr> <td>Keyboard&amp;Mouse</td> <td>Keyboard, Mouse</td> <td>PC/Desktop</td> </tr> <tr> <td>Gamepad</td> <td>XInput/DualShock/DualSense</td> <td>Console/PC com controle</td> </tr> </tbody> </table> </div> <div data-legacy-card=\"\"> <button onclick=\"copiarCodigo(this, 'codigo-autoswitch')\"> Copiar </button> <pre><code id=\"codigo-autoswitch\">using UnityEngine;\nusing UnityEngine.InputSystem; [RequireComponent(typeof(PlayerInput))]\npublic class SchemeIndicator : MonoBehaviour\n{ private PlayerInput pi; void Awake() { pi = GetComponent&lt;PlayerInput&gt;(); } void OnEnable() { pi.onControlsChanged += OnControlsChanged; } void OnDisable() { pi.onControlsChanged -= OnControlsChanged; } private void OnControlsChanged(PlayerInput _) { Debug.Log(\"Esquema ativo: \" + pi.currentControlScheme); // \"Keyboard&amp;Mouse\" ou \"Gamepad\" }\n}</code></pre> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "rebinding",
      "title": "Remapeamento (Rebinding) com persist√™ncia",
      "html": "<div data-legacy-card=\"\"> <p> Permita ao jogador alterar bindings em runtime e salvar prefer√™ncias localmente. </p> <div> <button onclick=\"copiarCodigo(this, 'codigo-rebind')\"> Copiar </button> <pre><code id=\"codigo-rebind\">using UnityEngine;\nusing UnityEngine.InputSystem;\nusing UnityEngine.InputSystem.Utilities; public class SimpleRebind : MonoBehaviour\n{ public InputActionAsset actions; // arraste o asset (PlayerControls) public string actionPath = \"Player/Jump\"; // Action que ser√° remapeada private InputAction GetAction() =&gt; actions.FindAction(actionPath, throwIfNotFound:true); void Awake() { // Carrega overrides salvos (se houver) var json = PlayerPrefs.GetString(\"rebinds\", \"\"); if (!string.IsNullOrEmpty(json)) actions.LoadBindingOverridesFromJson(json); } public void StartRebind() { var action = GetAction(); action.Disable(); action.PerformInteractiveRebinding() .WithControlsExcluding(\"&lt;Mouse&gt;/position\") .WithCancelingThrough(\"&lt;Keyboard&gt;/escape\") .OnComplete(op =&gt; { action.Enable(); op.Dispose(); Save(); Debug.Log(\"Rebind conclu√≠do: \" + action.bindings[action.GetBindingIndexForControl(action.controls[0])].effectivePath); }) .Start(); } private void Save() { var json = actions.SaveBindingOverridesAsJson(); PlayerPrefs.SetString(\"rebinds\", json); }\n}</code></pre> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "padroes-codigo",
      "title": "Padr√µes de leitura no C#",
      "html": "<!-- Padr√£o A --> <div data-legacy-card=\"\"> <h3> Padr√£o A ‚Äî Classe gerada + <em>polling</em> no Update + eventos </h3> <p> Usa a classe <code>PlayerControls</code> gerada. L√™ <code>Move</code> a cada frame e escuta <code>Jump/Interact</code>. </p> <div> <button onclick=\"copiarCodigo(this, 'codigo-a')\"> Copiar </button> <pre><code id=\"codigo-a\">using UnityEngine;\nusing UnityEngine.InputSystem; [RequireComponent(typeof(Rigidbody))]\npublic class PlayerController : MonoBehaviour\n{ public float moveSpeed = 5f; public float jumpForce = 5f; private Rigidbody rb; private PlayerControls controls; private Vector2 moveInput; private bool jumpQueued; void Awake() { rb = GetComponent&lt;Rigidbody&gt;(); controls = new PlayerControls(); } void OnEnable() { controls.Player.Enable(); controls.Player.Jump.performed += OnJump; controls.Player.Interact.performed += OnInteract; } void OnDisable() { controls.Player.Jump.performed -= OnJump; controls.Player.Interact.performed -= OnInteract; controls.Player.Disable(); } void Update() { moveInput = controls.Player.Move.ReadValue&lt;Vector2&gt;(); } void FixedUpdate() { Vector3 v = new Vector3(moveInput.x, 0f, moveInput.y) * moveSpeed; rb.MovePosition(rb.position + v * Time.fixedDeltaTime); if (jumpQueued) { rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse); jumpQueued = false; } } private void OnJump(InputAction.CallbackContext ctx) { if (ctx.performed) jumpQueued = true; } private void OnInteract(InputAction.CallbackContext ctx) { if (ctx.performed) Debug.Log(\"Interagir!\"); }\n}</code></pre> </div> </div> <!-- Padr√£o B --> <div data-legacy-card=\"\"> <h3> Padr√£o B ‚Äî Componente <code>PlayerInput</code> (Send Messages) </h3> <p> Adicione <strong>PlayerInput</strong> ao Player, arraste o asset, <em>Default Map: Player</em>, <em>Behavior: Send Messages</em>. </p> <div> <button onclick=\"copiarCodigo(this, 'codigo-b')\"> Copiar </button> <pre><code id=\"codigo-b\">using UnityEngine;\nusing UnityEngine.InputSystem; public class PlayerInputController : MonoBehaviour\n{ public float speed = 5f; private Vector2 move; public void OnMove(InputValue value) { move = value.Get&lt;Vector2&gt;(); } public void OnJump(InputValue value) { if (value.isPressed) Debug.Log(\"Pulo!\"); } public void OnInteract(InputValue value) { if (value.isPressed) Debug.Log(\"Interagir!\"); } void Update() { Vector3 dir = new Vector3(move.x, 0f, move.y); transform.Translate(dir * speed * Time.deltaTime, Space.World); }\n}</code></pre> </div> </div> <!-- Alternativa (do Gemini) --> <div data-legacy-card=\"\"> <h3> Alternativa ‚Äî <code>CharacterController</code> com eventos <em>performed/canceled</em> </h3> <p> Leitura via callbacks e movimenta√ß√£o com <code>CharacterController</code>. </p> <div> <button onclick=\"copiarCodigo(this, 'codigo-cc')\"> Copiar </button> <pre><code id=\"codigo-cc\">using UnityEngine;\nusing UnityEngine.InputSystem; [RequireComponent(typeof(CharacterController))]\npublic class CCPlayerController : MonoBehaviour\n{ private PlayerControls controls; private CharacterController cc; private Vector2 moveInput; public float speed = 8f; void Awake() { cc = GetComponent&lt;CharacterController&gt;(); controls = new PlayerControls(); } void OnEnable() { controls.Player.Enable(); controls.Player.Move.performed += OnMovePerformed; controls.Player.Move.canceled += OnMoveCanceled; } void OnDisable() { controls.Player.Move.performed -= OnMovePerformed; controls.Player.Move.canceled -= OnMoveCanceled; controls.Player.Disable(); } private void OnMovePerformed(InputAction.CallbackContext ctx) { moveInput = ctx.ReadValue&lt;Vector2&gt;(); } private void OnMoveCanceled(InputAction.CallbackContext ctx) { moveInput = Vector2.zero; } void Update() { Vector3 dir = new Vector3(moveInput.x, 0f, moveInput.y); cc.Move(dir * speed * Time.deltaTime); }\n}</code></pre> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "checklist",
      "title": "‚úÖChecklist de valida√ß√£o",
      "html": "<div data-legacy-card=\"\"> <ul> <li> Pacote instalado e <em>Active Input Handling</em> configurado. </li> <li> Asset <code>PlayerControls</code> salvo (e classe gerada, se usar Padr√£o A). </li> <li> Bindings de teclado e gamepad testados (<em>Window &gt; Analysis &gt; Input Debugger</em>). </li> <li> <code>Enable()</code> chamado no mapa/a√ß√£o (Padr√£o A) ou <code>PlayerInput</code> ativo (Padr√£o B). </li> <li> Com <code>Rigidbody</code>, mova em <code>FixedUpdate()</code>; com <code>CharacterController</code>, use <code>Update()</code>. </li> </ul> <div role=\"note\"> <strong>Debug</strong>: coloque <code>Debug.Log()</code> nos handlers e confira eventos no <em>Input Debugger</em>. </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "ui-input",
      "title": "Navega√ß√£o de UI (Menus) com o Input System",
      "html": "<div data-legacy-grid=\"\"> <p> Para navegar menus com teclado/mouse/gamepad, use o <strong>InputSystemUIInputModule</strong> no <em>EventSystem</em> e um <strong>Action Map \"UI\"</strong>. </p> <div data-legacy-card=\"\"> <table> <thead> <tr> <th>Action (UI)</th> <th>Tipo</th> <th>Bindings (Teclado/Mouse)</th> <th>Bindings (Gamepad)</th> <th>Uso</th> </tr> </thead> <tbody> <tr> <td>Navigate</td> <td>Value / Vector2</td> <td>Setas / WASD</td> <td>Left Stick / D-Pad</td> <td>Mover foco</td> </tr> <tr> <td>Submit</td> <td>Button</td> <td>Enter / Space</td> <td>South Button (A/‚úï)</td> <td>Selecionar</td> </tr> <tr> <td>Cancel</td> <td>Button</td> <td>Esc</td> <td>East Button (B/‚óã)</td> <td>Voltar</td> </tr> <tr> <td>Point</td> <td>Value / Vector2</td> <td>Mouse Position</td> <td>‚Äî</td> <td>Cursor</td> </tr> <tr> <td>Click</td> <td>Button</td> <td>Left Mouse Button</td> <td>South Button (A/‚úï)</td> <td>Clique</td> </tr> </tbody> </table> </div> <ol> <li> Crie no asset um <strong>Action Map \"UI\"</strong> com as actions acima. </li> <li> Na cena, adicione <strong>EventSystem</strong> e troque o componente de entrada para <strong>Input System UI Input Module</strong>. </li> <li> Arraste seu asset de <em>Input Actions</em> para o campo <em>Actions Asset</em> e mapeie <em>Point/Navigate/Submit/Cancel/Click</em>. </li> </ol> <p> Use a a√ß√£o <code>Pause</code> para alternar entre o mapa <code>Player</code> (jogo) e <code>UI</code> (menu): </p> <div data-legacy-card=\"\"> <button onclick=\"copiarCodigo(this, 'codigo-toggle-ui')\"> Copiar </button> <pre><code id=\"codigo-toggle-ui\">using UnityEngine;\nusing UnityEngine.InputSystem; [RequireComponent(typeof(PlayerInput))]\npublic class ToggleUIActionMap : MonoBehaviour\n{ public GameObject pauseMenu; // painel Canvas do menu private PlayerInput pi; private bool paused; void Awake() { pi = GetComponent&lt;PlayerInput&gt;(); } // Vincule esta fun√ß√£o √† Action \"Pause\" (performed) public void OnPause(InputValue v) { if (!v.isPressed) return; paused = !paused; pauseMenu.SetActive(paused); pi.SwitchCurrentActionMap(paused ? \"UI\" : \"Player\"); Time.timeScale = paused ? 0f : 1f; }\n}</code></pre> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "local-multiplayer",
      "title": "Multiplayer Local com PlayerInputManager",
      "html": "<div data-legacy-card=\"\"> <p> Permite que jogadores entrem pressionando um bot√£o em controles diferentes. Cada jogador instancia um <em>Player Prefab</em> com <strong>PlayerInput</strong>. </p> <ol> <li> Crie um <strong>Player Prefab</strong> com <code>PlayerInput</code> configurado (Default Map: <code>Player</code>). </li> <li> Na cena, adicione um objeto vazio com <strong>PlayerInputManager</strong>: <ul> <li> <em>Join Behavior</em>: <strong>Join Players When Button Is Pressed</strong> </li> <li><em>Player Prefab</em>: seu prefab do jogador</li> </ul> </li> <li> (Opcional) Adicione o script abaixo para definir posi√ß√£o/cor ao entrar. </li> </ol> <div> <button onclick=\"copiarCodigo(this, 'codigo-join')\"> Copiar </button> <pre><code id=\"codigo-join\">using UnityEngine;\nusing UnityEngine.InputSystem; public class LocalMPSetup : MonoBehaviour\n{ public Transform[] spawnPoints; // arraste pontos de spawn private int nextIndex = 0; void OnEnable() { PlayerInputManager.instance.onPlayerJoined += OnPlayerJoined; } void OnDisable() { PlayerInputManager.instance.onPlayerJoined -= OnPlayerJoined; } private void OnPlayerJoined(PlayerInput player) { // posiciona no pr√≥ximo spawn if (spawnPoints != null &amp;&amp; spawnPoints.Length &gt; 0) { var t = spawnPoints[nextIndex % spawnPoints.Length]; player.transform.SetPositionAndRotation(t.position, t.rotation); nextIndex++; } // exemplo visual por jogador var rend = player.GetComponentInChildren&lt;Renderer&gt;(); if (rend != null) { var c = Random.ColorHSV(0f,1f, .7f,1f, .8f,1f); rend.material.color = c; } Debug.Log($\"Jogador {player.playerIndex} entrou via {player.currentControlScheme}\"); }\n}</code></pre> </div> <p> Cada jogador ter√° seu pr√≥prio <code>PlayerInput</code> e conjunto de a√ß√µes. Para UI compartilhada, mantenha um √∫nico <em>EventSystem</em> com <strong>InputSystemUIInputModule</strong> e esquema ativo alternado automaticamente por dispositivo. </p> </div>"
    },
    {
      "type": "legacySection",
      "id": "videos",
      "title": "üé¨ V√≠deos Recomendados",
      "html": "<div data-legacy-card=\"\"> <article> <div> </div> <div> <h3> Input System ‚Äî Vis√£o geral </h3> <p> A√ß√µes, bindings e fluxo b√°sico para come√ßar. </p> <a href=\"https://www.youtube.com/watch?v=PDPI5SBOzck\" target=\"_blank\" rel=\"noopener\">Abrir no YouTube</a> </div> </article> <article> <div> </div> <div> <h3> PlayerInput + Action Maps na pr√°tica </h3> <p> Configurando o componente, eventos e m√∫ltiplos dispositivos. </p> <a href=\"https://www.youtube.com/watch?v=zhi14HpKqnU\" target=\"_blank\" rel=\"noopener\">Abrir no YouTube</a> </div> </article> </div>"
    },
    {
      "type": "legacySection",
      "id": "tarefa",
      "title": "üìù Tarefa (TED)",
      "html": "<div data-legacy-card=\"\"> <p> Crie um <strong>Action Map</strong> com as a√ß√µes <code>Andar</code>, <code>Pular</code> e <code>Interagir</code> e integre ao seu script do player. </p> <h4> Entrega no Moodle: </h4> <ol> <li> Print do <em>Input Actions</em> mostrando o Action Map e os bindings. </li> <li> Trecho do c√≥digo C# (m√°x. 40 linhas) que l√™ as a√ß√µes e move/interage. </li> <li> Informe qual padr√£o voc√™ usou (A ‚Äî classe gerada / B ‚Äî PlayerInput) e o porqu√™. </li> </ol> </div>"
    },
    {
      "type": "legacySection",
      "id": "recursos",
      "title": "üìö Recursos",
      "html": "<div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <h4>Documenta√ß√£o</h4> <ul> <li> <a target=\"_blank\" rel=\"noopener\" href=\"https://docs.unity3d.com/Packages/com.unity.inputsystem@latest\">Manual do Input System (Unity)</a> </li> <li> <a target=\"_blank\" rel=\"noopener\" href=\"https://docs.unity3d.com/Packages/com.unity.inputsystem@latest/manual/PlayerInput.html\">Componente PlayerInput</a> </li> <li> <a target=\"_blank\" rel=\"noopener\" href=\"https://learn.unity.com/tutorial/using-the-input-system\">Unity Learn: Using the Input System</a> </li> <li> <a target=\"_blank\" rel=\"noopener\" href=\"https://learn.microsoft.com/pt-br/dotnet/csharp/\">C# ‚Äì Documenta√ß√£o (Microsoft)</a> </li> </ul> </div> <div data-legacy-card=\"\"> <h4> Leituras complementares </h4> <ul> <li> ALVES, W. P. <em>Unity: design e desenvolvimento de jogos</em>. Alta Books, 2019. </li> <li> ALVES, George S. <em>Projeto de jogos 3D: modelagem e programa√ß√£o</em>. Platos, 2021. </li> <li> (Material IMD) <em>Entradas do jogador e movimento</em> ‚Äî apostila do curso. </li> </ul> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "bibliografia",
      "title": "üìö Bibliografia",
      "html": "<div data-legacy-card=\"\"> <p> ALVES, W. P. <strong>Unity: design e desenvolvimento de jogos.</strong> Rio de Janeiro: Alta Books, 2019. </p> <p> ALVES, George Santiago. <strong>Projeto de jogos 3D: modelagem e programa√ß√£o.</strong> S√£o Paulo: Platos, 2021. </p> </div>"
    }
  ]
}

{
  "id": "lesson-13",
  "title": "Aula 13: Arquitetura Baseada em Componentes",
  "objective": "Projetar arquitetura baseada em componentes para manter o projeto escalável e modular.",
  "content": [
    {
      "type": "flightPlan",
      "title": "Trilha da aula",
      "items": [
        "Introdução: Revisar composição vs. herança na Unity.",
        "Padrões: Apresentar ScriptableObjects e serviços desacoplados.",
        "Workshop: Refatorar sistemas usando componentes coesos.",
        "Documentar: Criar diagramas de dependência e convenções de pastas.",
        "Checklist: Preparar o mapa de arquitetura para o sprint atual."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Composição orientada a componentes",
      "content": [
        {
          "type": "paragraph",
          "text": "Prefira combinar pequenos comportamentos reutilizáveis a criar hierarquias profundas. Cada script deve ter uma responsabilidade clara."
        },
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Componentes funcionais",
              "text": "Divida lógica em scripts como Health, DamageDealer, Movement."
            },
            {
              "title": "Comunicação",
              "text": "Use eventos, interfaces ou ScriptableObjects para compartilhar estado sem acoplamento rígido."
            },
            {
              "title": "Organização",
              "text": "Estruture pastas por domínio (Gameplay, UI, Systems) e crie namespaces correspondentes."
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "ScriptableObjects para dados",
      "content": [
        {
          "type": "code",
          "language": "csharp",
          "code": "[CreateAssetMenu(menuName = \"Configs/EnemyConfig\")]\npublic class EnemyConfig : ScriptableObject\n{\n    public string id;\n    public int health;\n    public float speed;\n}\n\npublic class Enemy : MonoBehaviour\n{\n    [SerializeField] private EnemyConfig config;\n\n    private void Awake()\n    {\n        // Usa dados imutáveis do config\n    }\n}\n"
        },
        {
          "type": "callout",
          "variant": "info",
          "title": "Benefícios",
          "content": [
            {
              "type": "paragraph",
              "text": "ScriptableObjects evitam duplicação de dados, facilitam balanceamento e podem ser carregados sem instanciar GameObjects."
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Workshop de refatoração",
      "content": [
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Mapear responsabilidades",
              "text": "Liste scripts que estão fazendo mais de uma função e proponha divisão em componentes menores."
            },
            {
              "title": "Definir contratos",
              "text": "Use interfaces ou eventos para comunicação entre componentes recém-criados."
            },
            {
              "title": "Atualizar documentação",
              "text": "Desenhe um diagrama simples destacando dependências principais e fluxo de dados."
            }
          ]
        }
      ]
    },
    {
      "type": "checklist",
      "title": "Critérios de qualidade",
      "items": [
        "Componentes possuem responsabilidades únicas.",
        "Dados compartilhados migraram para ScriptableObjects.",
        "Estrutura de pastas e namespaces está documentada no repositório."
      ]
    }
  ],
  "formatVersion": "md3.lesson.v1",
  "slug": "arquitetura-baseada-em-componentes",
  "summary": "Discute padrões de arquitetura na Unity, enfatizando composição de componentes, ScriptableObjects e organização escalável do projeto.",
  "objectives": [
    "Aplicar princípios de composição sobre herança.",
    "Utilizar ScriptableObjects para dados compartilhados.",
    "Estruturar pastas e namespaces alinhados à arquitetura."
  ],
  "competencies": [
    "Arquitetura de software",
    "Organização de código",
    "Escalabilidade de projetos"
  ],
  "skills": [
    "Criar componentes reutilizáveis com responsabilidades claras.",
    "Persistir dados imutáveis com ScriptableObjects.",
    "Documentar arquitetura em diagramas simples."
  ],
  "outcomes": [
    "Entrega diagrama de arquitetura do projeto.",
    "Aplica padrões de composição em scripts existentes.",
    "Define convenções de pastas e namespaces para a equipe."
  ],
  "prerequisites": ["Fundamentos de C# na Unity.", "Gestão básica de projeto Unity."],
  "tags": ["arquitetura", "componentes", "scriptableobject"],
  "duration": 120,
  "modality": "in-person",
  "resources": [
    {
      "label": "Unity – ScriptableObject Architecture",
      "url": "https://unity.com/how-to/scriptable-object-architecture",
      "type": "article"
    },
    {
      "label": "S.O.L.I.D. in Unity",
      "url": "https://www.raywenderlich.com/847-first-steps-with-s-o-l-i-d",
      "type": "article"
    }
  ],
  "bibliography": [
    "PERSSON, J. Hands-On Game Development Patterns with Unity. Packt, 2021.",
    "Unity Technologies. Architecture Best Practices. 2024."
  ],
  "assessment": {
    "type": "formative",
    "description": "Revisão guiada de arquitetura com mapa de componentes atualizado."
  },
  "metadata": {
    "status": "published",
    "updatedAt": "2025-02-05T00:00:00.000Z",
    "owners": ["Prof. Tiago Sombra"],
    "sources": ["Plano de ensino TDJD 2025.1"]
  }
}

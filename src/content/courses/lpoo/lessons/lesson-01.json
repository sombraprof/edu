{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-01",
  "title": "Aula 1: Fundamentos da Programação Orientada a Objetos",
  "summary": "Contextualiza a evolução da orientação a objetos, diferencia paradigmas e alinha expectativas do curso com foco no ecossistema Java.",
  "objective": "Apresentar os pilares da orientação a objetos e posicionar o estudante dentro da jornada prática do semestre.",
  "objectives": [
    "Comparar paradigmas estruturado e orientado a objetos destacando seus impactos em manutenção e reuso.",
    "Identificar os quatro pilares da orientação a objetos e exemplos aplicados em Java.",
    "Planejar o cronograma da disciplina relacionando entregas avaliativas e competências desenvolvidas."
  ],
  "competencies": [
    "Pensamento computacional orientado a objetos",
    "Modelagem conceitual de sistemas",
    "Planejamento de projetos de software"
  ],
  "skills": [
    "Reconhecer quando aplicar orientação a objetos em vez de abordagens estruturadas.",
    "Descrever papéis de classes, objetos e mensagens em um sistema simples.",
    "Organizar entregas do semestre a partir do plano de ensino e dos roteiros práticos."
  ],
  "outcomes": [
    "Mapa mental comparando paradigmas estruturado e orientado a objetos.",
    "Glossário inicial dos pilares com exemplos reais da turma.",
    "Checklist individual de preparação para o projeto semestral."
  ],
  "prerequisites": [
    "Revisão de lógica de programação e estruturas de controle básicas.",
    "Ambiente Java configurado (JDK 21 + IntelliJ IDEA ou VS Code com extensão)."
  ],
  "tags": ["poo", "java", "fundamentos"],
  "duration": 110,
  "modality": "in-person",
  "resources": [
    {
      "label": "Plano de ensino LPOO 2025.2",
      "type": "document",
      "description": "Plano de ensino oficial atualizado da disciplina para o semestre 2025.2.",
      "url": "https://example.edu/lpoo/plano-ensino-2025-2"
    },
    {
      "label": "Configuração do ambiente Java",
      "type": "guide",
      "url": "https://developer.oracle.com/java/get-started/"
    }
  ],
  "bibliography": [
    "HORSTMANN, C. S. Core Java Volume I — Fundamentals. 12. ed. Prentice Hall, 2023.",
    "LARMAN, C. Applying UML and Patterns. 4. ed. Pearson, 2022."
  ],
  "assessment": {
    "type": "formative",
    "description": "Entrega de um quadro comparativo entre paradigmas e checklist de preparação para o projeto.",
    "rubric": "Quadro com pelo menos cinco diferenças relevantes e checklist com evidências das ferramentas instaladas."
  },
  "content": [
    {
      "type": "lessonPlan",
      "title": "Plano da aula",
      "unit": {
        "title": "Unidade I — Visão geral da orientação a objetos",
        "content": "Ambientação na disciplina, revisão de conceitos prévios e alinhamento das entregas que serão desenvolvidas ao longo do semestre."
      },
      "cards": [
        {
          "icon": "target",
          "title": "Objetivo geral",
          "content": "Posicionar a orientação a objetos como estratégia de modelagem e engenharia de software predominante."
        },
        {
          "icon": "calendar-days",
          "title": "Dinâmica da aula",
          "content": "Conversa guiada sobre experiência prévia, mini exposição e oficina colaborativa com quadro digital."
        },
        {
          "icon": "tasks",
          "title": "Produtos esperados",
          "content": "Mapa mental dos paradigmas, glossário dos pilares e checklist de preparação para o projeto."
        }
      ]
    },
    {
      "type": "flightPlan",
      "title": "Plano de voo (1h50)",
      "items": [
        "(10 min) Check-in e expectativas da disciplina.",
        "(20 min) Linha do tempo da orientação a objetos no mercado.",
        "(25 min) Mini aula: pilares da orientação a objetos com exemplos Java.",
        "(20 min) Oficina em grupos: comparar paradigmas e registrar insights.",
        "(15 min) Apresentação dos grupos e consolidação do glossário.",
        "(10 min) Orientações sobre o projeto semestral e tarefas assíncronas."
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Pergunta disparadora",
      "content": [
        {
          "type": "paragraph",
          "text": "Quais problemas você já enfrentou em projetos estruturados que poderiam ser minimizados com encapsulamento e reuso?"
        }
      ]
    },
    {
      "type": "cardGrid",
      "title": "Paradigmas em perspectiva",
      "columns": 2,
      "cards": [
        {
          "title": "Estruturado",
          "subtitle": "Fluxo sequencial",
          "tone": "neutral",
          "content": "Organiza o código em funções e procedimentos; ideal para scripts pequenos, porém difícil de escalar."
        },
        {
          "title": "Orientado a Objetos",
          "subtitle": "Modelagem de domínio",
          "tone": "info",
          "content": "Agrupa dados e comportamentos em objetos que colaboram via mensagens, promovendo reuso e baixo acoplamento."
        },
        {
          "title": "Funcional",
          "subtitle": "Composição de funções",
          "tone": "success",
          "content": "Foca em imutabilidade e expressões matemáticas; inspira boas práticas usadas junto com POO em linguagens modernas."
        },
        {
          "title": "Event-driven",
          "subtitle": "Reatividade",
          "tone": "warning",
          "content": "Modelo centrado em eventos e assincronismo, comum em interfaces gráficas e sistemas distribuídos."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Os quatro pilares aplicados",
      "content": [
        {
          "type": "paragraph",
          "text": "A orientação a objetos combina encapsulamento, abstração, herança e polimorfismo para organizar sistemas complexos."
        },
        {
          "type": "subBlock",
          "title": "Encapsulamento",
          "items": [
            "Protege invariantes ao esconder detalhes de implementação atrás de interfaces públicas.",
            {
              "component": "Callout",
              "props": {
                "variant": "good-practice",
                "title": "Exemplo",
                "content": "Classe ContaBancaria expõe métodos depositar() e sacar() sem revelar campos internos."
              }
            }
          ]
        },
        {
          "type": "subBlock",
          "title": "Abstração",
          "items": [
            "Foca no que o objeto faz, não em como faz. Permite representar conceitos do domínio."
          ]
        },
        {
          "type": "subBlock",
          "title": "Herança e Polimorfismo",
          "items": ["Viabilizam famílias de tipos relacionados e substituição segura entre eles."]
        }
      ]
    },
    {
      "type": "component",
      "component": "Md3BlockDiagram",
      "props": {
        "title": "Camadas típicas de um sistema orientado a objetos",
        "summary": "Visão macro das responsabilidades distribuídas entre camadas de um projeto Java empresarial.",
        "blocks": [
          {
            "id": "ui",
            "title": "Camada de Apresentação",
            "summary": "Controllers, views e DTOs",
            "layer": 1,
            "kind": "input-output"
          },
          {
            "id": "application",
            "title": "Serviços de Aplicação",
            "summary": "Orquestram casos de uso",
            "layer": 2,
            "kind": "process"
          },
          {
            "id": "domain",
            "title": "Domínio",
            "summary": "Entidades ricas e agregados",
            "layer": 3,
            "kind": "process"
          },
          {
            "id": "infra",
            "title": "Infraestrutura",
            "summary": "Repositórios, integrações externas",
            "layer": 4,
            "kind": "data-store"
          },
          {
            "id": "external",
            "title": "Serviços Externos",
            "summary": "APIs, filas e gateways",
            "layer": 5,
            "kind": "external"
          }
        ],
        "channels": [
          {
            "id": "ch1",
            "from": "ui",
            "to": "application",
            "description": "Recebe requisições do usuário e delega casos de uso",
            "kind": "control"
          },
          {
            "id": "ch2",
            "from": "application",
            "to": "domain",
            "description": "Invoca regras de negócio encapsuladas",
            "kind": "control"
          },
          {
            "id": "ch3",
            "from": "domain",
            "to": "infra",
            "description": "Solicita persistência e consultas",
            "kind": "data"
          },
          {
            "id": "ch4",
            "from": "infra",
            "to": "external",
            "description": "Integra com provedores externos",
            "kind": "data"
          }
        ],
        "legend": [
          {
            "id": "process",
            "label": "Processo",
            "description": "Camadas que concentram regras de negócio."
          },
          {
            "id": "data-store",
            "label": "Dados",
            "description": "Elementos responsáveis por persistência."
          },
          {
            "id": "input-output",
            "label": "Interação",
            "description": "Interface com usuários e sistemas."
          },
          {
            "id": "external",
            "label": "Serviço externo",
            "description": "Dependências fora do controle da equipe."
          }
        ]
      }
    }
  ],
  "metadata": {
    "status": "in-review",
    "updatedAt": "2025-02-01T00:00:00.000Z",
    "owners": ["Prof. Tiago Sombra"],
    "sources": ["Plano de ensino LPOO 2025.2", "Anotações de aula 2023.2"]
  }
}

{
  "id": "lesson7",
  "title": "Aula 7: Interfaces e Classes Abstratas",
  "objective": "",
  "content": [
    {
      "type": "html",
      "html": "<!DOCTYPE html>\n<html lang=\"pt-BR\" class=\"scroll-smooth\">\n  <head>\n    <!-- Metadados Essenciais -->\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>LPOO - Aula 7: Classes Abstratas e Interfaces</title>\n    <meta\n      name=\"description\"\n      content=\"Aula 7 da disciplina de LPOO. Aprenda a usar classes abstratas e interfaces em Java para criar designs de software flex√≠veis e robustos.\"\n    />\n    <meta name=\"author\" content=\"Prof. Tiago Guimar√£es Sombra\" />\n\n    <!-- Open Graph / Facebook -->\n    <meta property=\"og:type\" content=\"website\" />\n    <meta\n      property=\"og:title\"\n      content=\"LPOO - Aula 7: Classes Abstratas e Interfaces\"\n    />\n    <meta\n      property=\"og:description\"\n      content=\"Aprenda a usar classes abstratas e interfaces em Java para criar designs de software flex√≠veis e robustos.\"\n    />\n    <meta\n      property=\"og:image\"\n      content=\"https://placehold.co/1200x630/4f46e5/ffffff?text=LPOO%0AAula%207\"\n    />\n\n    <!-- Twitter -->\n    <meta property=\"twitter:card\" content=\"summary_large_image\" />\n    <meta\n      property=\"twitter:title\"\n      content=\"LPOO - Aula 7: Classes Abstratas e Interfaces\"\n    />\n    <meta\n      property=\"twitter:description\"\n      content=\"Aprenda a usar classes abstratas e interfaces em Java para criar designs de software flex√≠veis e robustos.\"\n    />\n    <meta\n      property=\"twitter:image\"\n      content=\"https://placehold.co/1200x630/4f46e5/ffffff?text=LPOO%0AAula%207\"\n    />\n\n    <!-- Tailwind CSS via CDN -->\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <!-- Google Fonts: Inter & Roboto Mono -->\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Roboto+Mono:wght@400;700&display=swap\"\n      rel=\"stylesheet\"\n    />\n    <!-- Font Awesome for icons -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\"\n      integrity=\"sha256-HtsXJanqjKTc8vVQjO4YMhiqFoXkfBsjBWcX91T1jr8=\"\n      crossorigin=\"anonymous\"\n    />\n\n    <!-- Estilos locais removidos: usamos css/style.css global para callouts, code-block e copy-btn -->\n  </head>\n\n  <body class=\"text-slate-800\">\n    <nav\n      class=\"bg-white/80 backdrop-blur-md shadow-sm fixed top-0 left-0 right-0 z-50\"\n      aria-label=\"Menu de navega√ß√£o principal\"\n    >\n      <div class=\"container mx-auto px-6\">\n        <div class=\"flex justify-between items-center h-16\">\n          <span class=\"text-lg font-bold text-indigo-700\">LPOO - Aula 7</span>\n          <div class=\"hidden md:flex space-x-4 text-sm font-semibold\">\n            <a href=\"#plano-aula\" class=\"text-slate-600 hover:text-indigo-600\"\n              >Plano</a\n            >\n            <a href=\"#teoria\" class=\"text-slate-600 hover:text-indigo-600\"\n              >Teoria</a\n            >\n            <a href=\"#pratica\" class=\"text-slate-600 hover:text-indigo-600\"\n              >Pr√°tica</a\n            >\n            <a href=\"#ted\" class=\"text-slate-600 hover:text-indigo-600\">TED</a>\n            <a href=\"#bibliografia\" class=\"text-slate-600 hover:text-indigo-600\"\n              >Bibliografia</a\n            >\n          </div>\n        </div>\n      </div>\n    </nav>\n\n    <header\n      class=\"bg-gradient-to-r from-indigo-700 to-indigo-900 text-white shadow-lg\"\n    >\n      <div class=\"container mx-auto px-6 py-10\">\n        <h1 class=\"text-4xl font-bold\">Classes Abstratas e Interfaces</h1>\n        <p class=\"text-xl text-indigo-200 mt-2\">\n          Aula 7: Unidade III - Conceitos pr√°ticos de OO e seus pilares\n        </p>\n      </div>\n    </header>\n\n    <main class=\"container mx-auto px-6 py-10\" role=\"main\">\n      <section\n        id=\"ementa\"\n        class=\"mb-12 bg-white p-8 rounded-lg shadow\"\n        aria-labelledby=\"ementa-heading\"\n      >\n        <h2\n          id=\"ementa-heading\"\n          class=\"text-3xl font-semibold text-slate-800 mb-6\"\n        >\n          Ementa e Contextualiza√ß√£o\n        </h2>\n        <p class=\"text-slate-700 leading-relaxed\">\n          At√© agora, trabalhamos com classes concretas, que podem ser\n          instanciadas diretamente. No entanto, ao modelar sistemas complexos,\n          muitas vezes precisamos de um n√≠vel maior de abstra√ß√£o. As\n          <strong>classes abstratas</strong> nos permitem criar \"modelos\" de\n          classes incompletas, for√ßando as subclasses a fornecerem\n          implementa√ß√µes espec√≠ficas. J√° as <strong>interfaces</strong> levam a\n          abstra√ß√£o a um novo patamar, definindo \"contratos\" de comportamento\n          que classes completamente diferentes podem seguir. Dominar esses dois\n          conceitos √© crucial para projetar sistemas desacoplados, flex√≠veis e\n          que seguem os princ√≠pios de design SOLID.\n        </p>\n      </section>\n\n      <section\n        id=\"plano-aula\"\n        class=\"mb-12 bg-indigo-50 border border-indigo-200 p-8 rounded-2xl shadow-lg\"\n        aria-labelledby=\"plano-aula-heading\"\n      >\n        <h2\n          id=\"plano-aula-heading\"\n          class=\"text-3xl font-bold text-indigo-700 mb-6 text-center\"\n        >\n          Plano da Aula\n        </h2>\n        <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div class=\"bg-white p-6 rounded-lg shadow-sm\">\n            <h3 class=\"font-semibold text-lg text-indigo-800 mb-2\">\n              <i class=\"fa-solid fa-book-open mr-2\" aria-hidden=\"true\"></i\n              >CONTE√öDO\n            </h3>\n            <p class=\"text-slate-600\">\n              Classes Abstratas, M√©todos Abstratos, Interfaces, palavra-chave\n              <code-text>implements</code-text>, e a diferen√ßa entre os dois\n              conceitos.\n            </p>\n          </div>\n          <div class=\"bg-white p-6 rounded-lg shadow-sm\">\n            <h3 class=\"font-semibold text-lg text-indigo-800 mb-2\">\n              <i class=\"fa-solid fa-bullseye mr-2\" aria-hidden=\"true\"></i\n              >OBJETIVO\n            </h3>\n            <p class=\"text-slate-600\">\n              Capacitar o aluno a projetar e implementar hierarquias de classes\n              flex√≠veis usando classes abstratas e a definir contratos com\n              interfaces.\n            </p>\n          </div>\n          <div class=\"bg-white p-6 rounded-lg shadow-sm\">\n            <h3 class=\"font-semibold text-lg text-indigo-800 mb-2\">\n              <i class=\"fa-solid fa-gears mr-2\" aria-hidden=\"true\"></i\n              >METODOLOGIA\n            </h3>\n            <p class=\"text-slate-600\">\n              Aula expositiva, exemplos comparativos de c√≥digo, uma tabela de\n              diferen√ßas e uma atividade pr√°tica de modelagem de sistema.\n            </p>\n          </div>\n        </div>\n\n        <div class=\"bg-white p-6 rounded-lg shadow mt-6\">\n          <h3 class=\"text-xl font-semibold text-slate-800 mb-2\">Exemplo 3: Conflito de <code-text>default</code-text> em M√∫ltiplas Interfaces</h3>\n          <p class=\"text-slate-600 mb-4\">Quando duas interfaces definem o mesmo m√©todo <code-text>default</code-text>, a classe precisa resolver o conflito explicitamente.</p>\n          <div class=\"code-block\">\n            <button class=\"copy-btn\" data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo de m√∫ltiplas interfaces com default\"><i class=\"fa-solid fa-copy mr-1\" aria-hidden=\"true\"></i>Copiar</button>\n            <pre><code class=\"language-java\">interface A { default void log() { System.out.println(\"A\"); } }\ninterface B { default void log() { System.out.println(\"B\"); } }\n\nclass C implements A, B {\n    @Override // Must resolve the conflict explicitly\n    public void log() {\n        A.super.log(); // or B.super.log(); or custom logic\n        System.out.println(\"C\");\n    }\n}\n            </code></pre>\n          </div>\n        </div>\n\n        <div class=\"bg-white p-6 rounded-lg shadow mt-6\">\n          <h3 class=\"text-xl font-semibold text-slate-800 mb-2\">Extras Modernos: Hierarquias <em>sealed</em> (Java 17+)</h3>\n          <p class=\"text-slate-600 mb-4\">Interfaces e classes podem ser seladas para restringir quem pode implement√°-las/herd√°-las.</p>\n          <div class=\"code-block\">\n            <button class=\"copy-btn\" data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo de sealed interfaces\"><i class=\"fa-solid fa-copy mr-1\" aria-hidden=\"true\"></i>Copiar</button>\n            <pre><code class=\"language-java\">public sealed interface Voavel permits Passaro, Aviao {\n    void voar();\n}\n\npublic final class Passaro implements Voavel { // final: cannot be subclassed further\n    @Override public void voar() { System.out.println(\"Batendo asas\"); }\n}\n\npublic non-sealed class Aviao implements Voavel {\n    @Override public void voar() { System.out.println(\"Turbinas ligadas\"); }\n}\n            </code></pre>\n          </div>\n        </div>\n      </section>\n\n      <section id=\"teoria\" class=\"mb-12\" aria-labelledby=\"teoria-heading\">\n        <h2\n          id=\"teoria-heading\"\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-indigo-500 pb-2 mb-8\"\n        >\n          üìú Definindo Contratos e Modelos\n        </h2>\n\n        <div class=\"bg-white p-6 rounded-lg shadow mb-6\">\n          <h3 class=\"text-2xl font-semibold text-slate-800 mb-4\">\n            1. Classes Abstratas: O Modelo Incompleto\n          </h3>\n          <p class=\"text-slate-700 leading-relaxed mb-4\">\n            Uma classe abstrata √© uma classe que\n            <strong>n√£o pode ser instanciada</strong>. Ela serve como um modelo\n            base para outras classes. Pode conter tanto m√©todos concretos (com\n            implementa√ß√£o) quanto m√©todos abstratos (sem implementa√ß√£o).\n          </p>\n          <ul class=\"list-disc list-inside space-y-2 text-slate-700\">\n            <li>\n              <strong>Palavra-chave <code-text>abstract</code-text>:</strong>\n              Usada para declarar tanto a classe quanto os m√©todos abstratos.\n            </li>\n            <li>\n              <strong>M√©todos Abstratos:</strong> S√£o como uma promessa. Eles\n              declaram uma assinatura de m√©todo, mas sem corpo. Qualquer classe\n              concreta que herda da classe abstrata √©\n              <strong>obrigada</strong> a implementar todos os m√©todos\n              abstratos.\n            </li>\n            <li>\n              <strong>Quando usar?</strong> Quando voc√™ tem uma rela√ß√£o \"√©-um\"\n              (heran√ßa) e quer fornecer um comportamento base comum para todas\n              as subclasses, mas ao mesmo tempo for√ßar que cada uma delas\n              implemente uma parte espec√≠fica do comportamento.\n            </li>\n          </ul>\n        </div>\n\n        <div class=\"bg-white p-6 rounded-lg shadow mb-6\">\n          <h3 class=\"text-2xl font-semibold text-slate-800 mb-4\">\n            2. Interfaces: O Contrato de Comportamento\n          </h3>\n          <p class=\"text-slate-700 leading-relaxed mb-4\">\n            Uma interface √© uma refer√™ncia de tipo completamente abstrata. Ela\n            s√≥ pode conter assinaturas de m√©todos e constantes (<code-text\n              >public static final</code-text\n            >). Uma classe pode <strong>implementar</strong> uma ou mais\n            interfaces.\n          </p>\n          <ul class=\"list-disc list-inside space-y-2 text-slate-700\">\n            <li>\n              <strong\n                >Palavra-chave <code-text>interface</code-text> e\n                <code-text>implements</code-text>:</strong\n              >\n              <code-text>interface</code-text> para declarar e\n              <code-text>implements</code-text> para uma classe implementar a\n              interface.\n            </li>\n            <li>\n              <strong>100% Abstrata (antes do Java 8):</strong> Todos os m√©todos\n              s√£o implicitamente <code-text>public</code-text> e\n              <code-text>abstract</code-text>. Todos os atributos s√£o\n              <code-text>public static final</code-text>.\n            </li>\n            <li>\n              <strong>Quando usar?</strong> Quando voc√™ quer definir um\n              \"contrato\" de comportamento que pode ser implementado por classes\n              de diferentes hierarquias. √â a base para um design de software\n              desacoplado e a forma como Java simula a \"heran√ßa m√∫ltipla\".\n            </li>\n          </ul>\n        </div>\n\n        <div class=\"bg-white p-8 rounded-lg shadow\">\n          <h3 class=\"text-2xl font-semibold text-slate-800 mb-4 text-center\">\n            Classe Abstrata vs. Interface\n          </h3>\n          <div class=\"overflow-x-auto\">\n            <table class=\"w-full text-sm text-left text-slate-500\">\n              <thead class=\"text-xs text-slate-700 uppercase bg-slate-100\">\n                <tr>\n                  <th scope=\"col\" class=\"px-6 py-3\">Caracter√≠stica</th>\n                  <th scope=\"col\" class=\"px-6 py-3\">Classe Abstrata</th>\n                  <th scope=\"col\" class=\"px-6 py-3\">Interface (Java 8+)</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr class=\"bg-white border-b\">\n                  <th\n                    scope=\"row\"\n                    class=\"px-6 py-4 font-medium text-slate-900 whitespace-nowrap\"\n                  >\n                    Instancia√ß√£o\n                  </th>\n                  <td class=\"px-6 py-4\">N√£o pode ser instanciada; pode ter construtor (chamado via <code-text>super()</code-text>).</td>\n                  <td class=\"px-6 py-4\">N√£o pode ser instanciada; sem construtor.</td>\n                </tr>\n                <tr class=\"bg-slate-50 border-b\">\n                  <th\n                    scope=\"row\"\n                    class=\"px-6 py-4 font-medium text-slate-900 whitespace-nowrap\"\n                  >\n                    M√©todos\n                  </th>\n                  <td class=\"px-6 py-4\">\n                    Pode ter m√©todos abstratos e concretos.\n                  </td>\n                  <td class=\"px-6 py-4\">\n                    Abstratos, <strong>default</strong>, <strong>static</strong> e (Java 9+) <strong>private</strong>.\n                  </td>\n                </tr>\n                <tr class=\"bg-white border-b\">\n                  <th\n                    scope=\"row\"\n                    class=\"px-6 py-4 font-medium text-slate-900 whitespace-nowrap\"\n                  >\n                    Atributos/Estado\n                  </th>\n                  <td class=\"px-6 py-4\">\n                    Pode ter qualquer tipo de atributo (static, final,\n                    non-final).\n                  </td>\n                  <td class=\"px-6 py-4\">\n                    S√≥ pode ter constantes (<code-text\n                      >public static final</code-text\n                    >).\n                  </td>\n                </tr>\n                <tr class=\"bg-slate-50 border-b\">\n                  <th\n                    scope=\"row\"\n                    class=\"px-6 py-4 font-medium text-slate-900 whitespace-nowrap\"\n                  >\n                    Heran√ßa\n                  </th>\n                  <td class=\"px-6 py-4\">\n                    Uma classe pode herdar de apenas <strong>uma</strong> classe\n                    abstrata (<code-text>extends</code-text>).\n                  </td>\n                  <td class=\"px-6 py-4\">\n                    Pode <code-text>extends</code-text> m√∫ltiplas interfaces\n                    (heran√ßa m√∫ltipla de tipo).\n                  </td>\n                </tr>\n                <tr class=\"bg-white border-b\">\n                  <th\n                    scope=\"row\"\n                    class=\"px-6 py-4 font-medium text-slate-900 whitespace-nowrap\"\n                  >\n                    Construtor\n                  </th>\n                  <td class=\"px-6 py-4\">\n                    Pode ter construtores (chamados via\n                    <code-text>super()</code-text> pelas subclasses).\n                  </td>\n                  <td class=\"px-6 py-4\">N√£o pode ter construtores.</td>\n                </tr>\n                <tr class=\"bg-slate-50 border-b\">\n                  <th\n                    scope=\"row\"\n                    class=\"px-6 py-4 font-medium text-slate-900 whitespace-nowrap\"\n                  >\n                    Prop√≥sito\n                  </th>\n                  <td class=\"px-6 py-4\">\n                    Definir um modelo base com comportamento comum para uma\n                    hierarquia (rela√ß√£o \"√©-um\").\n                  </td>\n                  <td class=\"px-6 py-4\">\n                    Definir um contrato de capacidades que podem ser\n                    compartilhadas por classes n√£o relacionadas.\n                  </td>\n                </tr>\n                <tr class=\"bg-white\">\n                  <th\n                    scope=\"row\"\n                    class=\"px-6 py-4 font-medium text-slate-900 whitespace-nowrap\"\n                  >\n                    Extras modernos\n                  </th>\n                  <td class=\"px-6 py-4\">Pode ser <em>sealed</em> (Java 17+) para controlar subclasses.</td>\n                  <td class=\"px-6 py-4\">Conflitos de <code-text>default</code-text>; <code-text>@FunctionalInterface</code-text>; tamb√©m pode ser <em>sealed</em>.</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </section>\n\n      <section id=\"pratica\" class=\"mb-12\" aria-labelledby=\"pratica-heading\">\n        <h2\n          id=\"pratica-heading\"\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-indigo-500 pb-2 mb-8\"\n        >\n          üíª Abstra√ß√£o na Pr√°tica\n        </h2>\n\n        <div class=\"bg-white p-6 rounded-lg shadow mb-6\">\n          <h3 class=\"text-xl font-semibold text-slate-800 mb-2\">\n            Exemplo 1: Classe Abstrata <code-text>FormaGeometrica</code-text>\n          </h3>\n          <p class=\"text-slate-600 mb-4\">\n            <code-text>FormaGeometrica</code-text> define o conceito de \"√°rea\",\n            mas n√£o sabe como calcul√°-la. <code-text>Retangulo</code-text> e\n            <code-text>Circulo</code-text> s√£o obrigados a fornecer a f√≥rmula.\n          </p>\n          <div class=\"code-block\">\n            <button\n              class=\"copy-btn\"\n              data-tooltip=\"Copiar c√≥digo\"\n              aria-label=\"Copiar c√≥digo da classe abstrata FormaGeometrica e subclasses\"\n            >\n              <i class=\"fa-solid fa-copy mr-1\" aria-hidden=\"true\"></i>Copiar\n            </button>\n            <pre><code class=\"language-java\">// Abstract base class with state and constructor\npublic abstract class FormaGeometrica {\n    private final String nome;\n\n    public FormaGeometrica(String nome) {\n        this.nome = nome;\n    }\n\n    public String getNome() { // Exposes read-only state\n        return nome;\n    }\n\n    public abstract double calcularArea(); // Must be implemented by subclasses\n}\n\npublic class Retangulo extends FormaGeometrica {\n    private final double largura;\n    private final double altura;\n\n    public Retangulo(double largura, double altura) {\n        super(\"Retangulo\");\n        this.largura = largura;\n        this.altura = altura;\n    }\n\n    @Override\n    public double calcularArea() {\n        return largura * altura;\n    }\n}\n\npublic class Circulo extends FormaGeometrica {\n    private final double raio;\n\n    public Circulo(double raio) {\n        super(\"Circulo\");\n        this.raio = raio;\n    }\n\n    @Override\n    public double calcularArea() {\n        return Math.PI * raio * raio;\n    }\n}\n                </code></pre>\n          </div>\n        </div>\n\n        <div class=\"bg-white p-6 rounded-lg shadow\">\n          <h3 class=\"text-xl font-semibold text-slate-800 mb-2\">\n            Exemplo 2: Interface <code-text>Tributavel</code-text>\n          </h3>\n          <p class=\"text-slate-600 mb-4\">\n            Tanto uma <code-text>ContaCorrente</code-text> quanto um\n            <code-text>SeguroDeVida</code-text> podem ser tribut√°veis, mas n√£o\n            t√™m uma rela√ß√£o de heran√ßa. A interface\n            <code-text>Tributavel</code-text> cria um contrato comum.\n          </p>\n          <div class=\"code-block\">\n            <button\n              class=\"copy-btn\"\n              data-tooltip=\"Copiar c√≥digo\"\n              aria-label=\"Copiar c√≥digo da interface Tributavel e implementa√ß√µes\"\n            >\n              <i class=\"fa-solid fa-copy mr-1\" aria-hidden=\"true\"></i>Copiar\n            </button>\n            <pre><code class=\"language-java\">// Contract for taxable entities (Java 8+ features demonstrated)\npublic interface Tributavel {\n    double getValorImposto();             // Abstract method (must be implemented)\n\n    default double aplicarAcrescimo(double valor) {\n        // Default method provides reusable behavior for implementors\n        return valor + calcularAcrescimo(valor);\n    }\n\n    private double calcularAcrescimo(double valor) { // Java 9+ private reuse\n        return valor * 0.02; // 2% extra fee as an example\n    }\n\n    static double arredonda(double v) {   // Utility static method\n        return Math.round(v * 100.0) / 100.0;\n    }\n}\n\n// Simple account (educational)\nclass Conta {\n    private double saldo;\n    public Conta(double saldo) { this.saldo = saldo; }\n    public double getSaldo() { return saldo; }\n}\n\nclass ContaCorrente extends Conta implements Tributavel {\n    public ContaCorrente(double saldo) { super(saldo); }\n    @Override public double getValorImposto() {\n        return getSaldo() * 0.01; // 1% of balance\n    }\n}\n\nclass SeguroDeVida implements Tributavel {\n    @Override public double getValorImposto() {\n        return 42.0; // fixed tax\n    }\n}\n\nimport java.util.List;\n\nclass CalculadoraImpostos {\n    public static void main(String[] args) {\n        // Polymorphism with interfaces: unrelated classes share a contract\n        List<Tributavel> itens = List.of(\n            new ContaCorrente(2500.0),\n            new SeguroDeVida()\n        );\n\n        double total = 0;\n        for (Tributavel t : itens) {\n            double base = t.getValorImposto();\n            // Using default + static methods from the interface\n            double comAcrescimo = Tributavel.arredonda(t.aplicarAcrescimo(base));\n            total += comAcrescimo;\n            System.out.println(\"Item -> imposto: \" + comAcrescimo);\n        }\n        System.out.println(\"Total: \" + Tributavel.arredonda(total));\n    }\n}\n                </code></pre>\n          </div>\n        </div>\n      </section>\n\n      <section\n        id=\"recursos-auxiliares\"\n        class=\"mb-12\"\n        aria-labelledby=\"recursos-heading\"\n      >\n        <h2\n          id=\"recursos-heading\"\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-indigo-500 pb-2 mb-8\"\n        >\n          üé• V√≠deos e Links de Apoio\n        </h2>\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div class=\"bg-white p-6 rounded-lg shadow\">\n              <h3 class=\"font-semibold text-lg text-indigo-800 mb-2\">\n                Classes Abstratas (Curso em V√≠deo)\n              </h3>\n              <div class=\"aspect-video w-full\">\n                <iframe\n                  class=\"w-full h-full rounded-md\"\n                  src=\"https://www.youtube-nocookie.com/embed/ws1NVBGeegs\"\n                  title=\"DevDojo - Maratona Java 84: Classes Abstratas (pt 01)\"\n                  frameborder=\"0\"\n                  loading=\"lazy\"\n                  referrerpolicy=\"strict-origin-when-cross-origin\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                  allowfullscreen\n                ></iframe>\n              </div>\n            </div>\n          <div class=\"bg-white p-6 rounded-lg shadow\">\n              <h3 class=\"font-semibold text-lg text-indigo-800 mb-2\">\n                Interfaces em Java (Loiane Groner)\n              </h3>\n              <div class=\"aspect-video w-full\">\n                <iframe\n                  class=\"w-full h-full rounded-md\"\n                  src=\"https://www.youtube-nocookie.com/embed/6uLLfRNgRA4\"\n                  title=\"Loiane Groner - Curso de Java 44: Orienta√ß√£o a Objetos: Interfaces\"\n                  frameborder=\"0\"\n                  loading=\"lazy\"\n                  referrerpolicy=\"strict-origin-when-cross-origin\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                  allowfullscreen\n                ></iframe>\n              </div>\n          </div>\n          <div class=\"bg-white p-6 rounded-lg shadow md:col-span-2\">\n            <h3 class=\"font-semibold text-lg text-indigo-800 mb-4\">\n              Leituras Recomendadas\n            </h3>\n            <ul class=\"space-y-4\">\n              <li>\n                <a\n                  href=\"https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  class=\"block font-semibold text-indigo-600 hover:underline\"\n                >\n                  <i class=\"fa-solid fa-book-bookmark mr-2\"></i>Abstract Methods\n                  and Classes (Oracle)\n                </a>\n                <p class=\"text-sm text-slate-600\">\n                  A documenta√ß√£o oficial sobre classes e m√©todos abstratos.\n                </p>\n              </li>\n              <li>\n                <a\n                  href=\"https://www.baeldung.com/java-interfaces\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  class=\"block font-semibold text-indigo-600 hover:underline\"\n                >\n                  <i class=\"fa-solid fa-file-alt mr-2\"></i>Java Interfaces\n                  (Baeldung)\n                </a>\n                <p class=\"text-sm text-slate-600\">\n                  Um guia t√©cnico completo sobre o uso de interfaces em Java.\n                </p>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </section>\n\n      <section\n        id=\"ted\"\n        class=\"mb-12 bg-amber-50 border border-amber-300 p-8 rounded-lg shadow-lg\"\n        aria-labelledby=\"ted-heading\"\n      >\n        <h2 id=\"ted-heading\" class=\"text-3xl font-bold text-amber-800 mb-6\">\n          <i class=\"fa-solid fa-laptop-code mr-2\" aria-hidden=\"true\"></i\n          >Atividade Pr√°tica (TED): Modelando um Zool√≥gico\n        </h2>\n        <p class=\"text-amber-900 leading-relaxed mb-4\">\n          Vamos projetar um sistema simples para um zool√≥gico, combinando\n          classes abstratas e interfaces.\n        </p>\n        <ol class=\"list-decimal list-inside space-y-4 text-amber-900\">\n          <li>\n            <strong\n              >Crie a classe abstrata <code-text>Animal.java</code-text></strong\n            >. Ela deve ter um atributo <code-text>nome</code-text> e um m√©todo\n            abstrato <code-text>public abstract void emitirSom()</code-text>.\n          </li>\n          <li>\n            <strong\n              >Crie as classes concretas <code-text>Leao.java</code-text> e\n              <code-text>Passaro.java</code-text></strong\n            >, ambas herdando de <code-text>Animal</code-text>. Implemente o\n            m√©todo <code-text>emitirSom()</code-text> em cada uma (ex: \"Rugido!\"\n            e \"Pio!\").\n          </li>\n          <li>\n            <strong>Crie a interface <code-text>Voavel.java</code-text></strong\n            >. Ela deve ter um √∫nico m√©todo:\n            <code-text>public void voar()</code-text>.\n          </li>\n          <li>\n            <strong\n              >Fa√ßa a classe <code-text>Passaro</code-text> implementar a\n              interface <code-text>Voavel</code-text></strong\n            >\n            e forne√ßa uma implementa√ß√£o para o m√©todo\n            <code-text>voar()</code-text>. O Le√£o n√£o deve implementar esta\n            interface.\n          </li>\n          <li>\n            <strong\n              >Crie uma classe <code-text>Zoologico.java</code-text> com um\n              m√©todo <code-text>main</code-text></strong\n            >. Crie um <code-text>Leao</code-text> e um\n            <code-text>Passaro</code-text>. Use polimorfismo para chamar\n            <code-text>emitirSom()</code-text> de ambos. Verifique se o p√°ssaro\n            pode voar, mas o le√£o n√£o.\n          </li>\n        </ol>\n      </section>\n\n      <section id=\"checklist\" class=\"mt-12\" aria-labelledby=\"checklist-heading\">\n        <div\n          class=\"bg-green-50 border-l-4 border-green-500 text-green-800 p-6 rounded-lg shadow\"\n        >\n          <h3 id=\"checklist-heading\" class=\"font-bold text-lg mb-3\">\n            <i class=\"fa-solid fa-list-check mr-2\" aria-hidden=\"true\"></i\n            >Checklist de Aprendizagem da Aula\n          </h3>\n          <p>Ao final desta aula, voc√™ deve ser capaz de:</p>\n          <ul class=\"list-none space-y-2 mt-2\">\n            <li>\n              <i\n                class=\"fa-solid fa-check text-green-600 mr-2\"\n                aria-hidden=\"true\"\n              ></i\n              >Definir e criar uma classe abstrata com m√©todos abstratos e\n              concretos.\n            </li>\n            <li>\n              <i\n                class=\"fa-solid fa-check text-green-600 mr-2\"\n                aria-hidden=\"true\"\n              ></i\n              >Compreender que classes abstratas n√£o podem ser instanciadas.\n            </li>\n            <li>\n              <i\n                class=\"fa-solid fa-check text-green-600 mr-2\"\n                aria-hidden=\"true\"\n              ></i\n              >Definir e implementar uma interface em uma ou mais classes.\n            </li>\n            <li>\n              <i\n                class=\"fa-solid fa-check text-green-600 mr-2\"\n                aria-hidden=\"true\"\n              ></i\n              >Explicar as diferen√ßas cruciais entre uma classe abstrata e uma\n              interface.\n            </li>\n            <li>\n              <i\n                class=\"fa-solid fa-check text-green-600 mr-2\"\n                aria-hidden=\"true\"\n              ></i\n              >Escolher entre uma classe abstrata e uma interface com base no\n              problema de design.\n            </li>\n          </ul>\n        </div>\n      </section>\n\n      <section\n        id=\"bibliografia\"\n        class=\"prose prose-slate max-w-none lg:prose-lg mt-12\"\n        aria-labelledby=\"bibliografia-heading\"\n      >\n        <h2\n          id=\"bibliografia-heading\"\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-indigo-500 pb-2 mb-4\"\n        >\n          üìö Bibliografia de Apoio\n        </h2>\n        <div class=\"bg-white p-8 rounded-lg shadow space-y-4 not-prose\">\n          <p>\n            <strong>DEITEL, Harvey M.; DEITEL, Paul J.</strong>\n            <em>Java: como programar.</em> 8. ed. S√£o Paulo: Pearson Prentice\n            Hall, 2014.\n          </p>\n          <p>\n            <strong>SCHILDT, Herbert.</strong>\n            <em\n              >Java para iniciantes: crie, compile e execute programas Java\n              rapidamente.</em\n            >\n            6. ed. Porto Alegre: Bookman, 2015.\n          </p>\n          <p>\n            <strong>GOODRICH, Michael T.; TAMASSIA, Roberto.</strong>\n            <em>Estruturas de dados e algoritmos em Java.</em> 5. ed. Porto\n            Alegre: Bookman, 2013.\n          </p>\n        </div>\n      </section>\n    </main>\n\n    <footer class=\"bg-slate-800 text-slate-300 mt-12\" role=\"contentinfo\">\n      <div class=\"container mx-auto px-6 py-8 text-center\">\n        <p class=\"font-semibold text-white\">Prof. Tiago Guimar√£es Sombra</p>\n        <p class=\"text-sm mt-1\">\n          Material acad√™mico para os cursos de ADS e SI.\n        </p>\n        <p class=\"text-sm font-bold text-indigo-300\">Unifametro</p>\n        <div class=\"mt-4 flex justify-center items-center space-x-4\">\n          <a\n            href=\"https://github.com/sombraprof/lpoo\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            class=\"text-indigo-400 hover:text-white transition-colors\"\n            aria-label=\"Visitar o reposit√≥rio do projeto no GitHub\"\n          >\n            <i class=\"fab fa-github fa-lg mr-1\" aria-hidden=\"true\"></i>\n            Reposit√≥rio GitHub\n          </a>\n          <span class=\"text-slate-500\">|</span>\n          <a\n            href=\"#\"\n            class=\"text-indigo-400 hover:text-white transition-colors\"\n            aria-label=\"Ver a pol√≠tica de uso do material\"\n            >Pol√≠tica de Uso</a\n          >\n        </div>\n      </div>\n    </footer>\n  </body>\n</html>\n"
    }
  ]
}

{
  "id": "lesson5",
  "title": "Aula 5: Heran√ßa",
  "objective": "",
  "content": [
    {
      "type": "legacySection",
      "id": "ementa",
      "title": "Ementa e Contextualiza√ß√£o",
      "html": "<p> Nesta aula, faremos uma pausa estrat√©gica para consolidar o conhecimento adquirido at√© agora, com a resolu√ß√£o comentada da AV1. Em seguida, daremos um passo fundamental na Programa√ß√£o Orientada a Objetos ao introduzir a <strong>Heran√ßa</strong>. A heran√ßa √© um mecanismo poderoso que permite criar novas classes a partir de outras j√° existentes, promovendo o reuso de c√≥digo, evitando duplica√ß√£o e organizando nosso software em hierarquias l√≥gicas. √â o pilar que nos permite modelar relacionamentos do tipo \"√©-um\" (um Gerente \"√©-um\" Funcion√°rio), essencial para a constru√ß√£o de sistemas complexos e escal√°veis. </p>"
    },
    {
      "type": "legacySection",
      "id": "plano-aula",
      "title": "Plano da Aula",
      "html": "<div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"book-open\">üìñ</span>CONTE√öDO</h3> <p>Resolu√ß√£o comentada da AV1. Conceito de Heran√ßa, palavra-chave <code-text>extends</code-text>, superclasse (classe base) e subclasse (classe derivada).</p> </div> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"bullseye\">üéØ</span>OBJETIVO</h3> <p>Revisar os conceitos fundamentais de POO e introduzir a Heran√ßa como mecanismo de reuso e especializa√ß√£o de c√≥digo em Java.</p> </div> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"gears\">‚öôÔ∏è</span>METODOLOGIA</h3> <p>An√°lise da avalia√ß√£o, aula expositiva sobre Heran√ßa, e exemplos pr√°ticos de implementa√ß√£o de hierarquias de classes.</p> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "av1",
      "title": "üìö Teoria ‚Äî An√°lise da AV1: Consolidando Nossos Conhecimentos",
      "html": "<div data-legacy-grid=\"\"> <p> Vamos revisar um problema t√≠pico da AV1, que aborda os conceitos essenciais que vimos at√© agora: classes, objetos, atributos, m√©todos e encapsulamento. </p> <div data-legacy-card=\"\"> <h4>Problema Exemplo: Modelar um <code-text>Curso</code-text></h4> <p>\"Crie uma classe <code-text>Curso</code-text> para representar um curso acad√™mico. A classe deve ter os atributos privados <code-text>nome</code-text> (String) e <code-text>cargaHoraria</code-text> (int). Implemente um construtor que inicialize esses atributos e m√©todos getters e setters. O setter de <code-text>cargaHoraria</code-text> deve garantir que o valor n√£o seja negativo. Crie uma classe de teste para instanciar e exibir os dados de um curso.\"</p> </div> <h3>Resolu√ß√£o Passo a Passo</h3> <p>A solu√ß√£o correta envolve criar a classe com atributos privados e fornecer acesso controlado atrav√©s de m√©todos p√∫blicos.</p> <div data-legacy-card=\"\"> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo da resolu√ß√£o da AV1\">Copiar</button> <pre><code>\n// File: Curso.java\npublic class Curso { private String nome; private int cargaHoraria; public Curso(String nome, int cargaHoraria) { this.nome = nome; this.setCargaHoraria(cargaHoraria); // Use the setter to ensure validation } public String getNome() { return this.nome; } public int getCargaHoraria() { return this.cargaHoraria; } public void setNome(String nome) { this.nome = nome; } public void setCargaHoraria(int cargaHoraria) { if (cargaHoraria &gt;= 0) { this.cargaHoraria = cargaHoraria; } else { System.out.println(\"[ERRO] Carga hor√°ria n√£o pode ser negativa.\"); } }\n} </code></pre> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "teoria",
      "title": "üèóÔ∏è Construindo Hierarquias: O Poder da Heran√ßa",
      "html": "<div data-legacy-card=\"\"> <h3>1. O que √© Heran√ßa?</h3> <p> Heran√ßa √© um mecanismo que permite que uma classe (subclasse) herde atributos e m√©todos de outra classe (superclasse). Isso cria uma rela√ß√£o \"√©-um\". Por exemplo, um <code-text>Cachorro</code-text> <strong>√© um</strong> <code-text>Animal</code-text>. A subclasse pode reutilizar todo o c√≥digo da superclasse e ainda adicionar seus pr√≥prios atributos e m√©todos espec√≠ficos. </p> <ul> <li><strong>Superclasse (ou Classe Pai/Base):</strong> A classe que est√° sendo herdada. Cont√©m os membros mais gen√©ricos.</li> <li><strong>Subclasse (ou Classe Filha/Derivada):</strong> A classe que herda. √â uma vers√£o especializada da superclasse.</li> <li><strong>Palavra-chave <code-text>extends</code-text>:</strong> Usada em Java para estabelecer a rela√ß√£o de heran√ßa. Ex: <code-text>public class Cachorro extends Animal</code-text>.</li> </ul> </div> <div data-legacy-card=\"\"> <h3>2. A Palavra-chave <code-text>super</code-text></h3> <p> A palavra-chave <code-text>super</code-text> √© usada dentro de uma subclasse para se referir a membros da sua superclasse. Ela tem dois usos principais: </p> <ul> <li><strong><code-text>super()</code-text>:</strong> Para chamar o construtor da superclasse. Esta deve ser a <strong>primeira instru√ß√£o</strong> no construtor da subclasse.</li> <li><strong><code-text>super.metodo()</code-text>:</strong> Para chamar um m√©todo espec√≠fico da superclasse, especialmente √∫til quando a subclasse sobrescreve esse m√©todo.</li> </ul> </div> <!-- NOVA SE√á√ÉO: Vantagens e Cuidados --> <div data-legacy-card=\"\"> <h3>3. Vantagens e Cuidados com a Heran√ßa</h3> <div> <div> <h4>Vantagens</h4> <ul> <li><strong>Reuso de C√≥digo:</strong> Evita duplica√ß√£o de atributos e m√©todos comuns.</li> <li><strong>Organiza√ß√£o:</strong> Cria hierarquias l√≥gicas e f√°ceis de entender.</li> <li><strong>Polimorfismo:</strong> Permite que objetos de subclasses sejam tratados como objetos da superclasse (veremos na pr√≥xima aula).</li> </ul> </div> <div> <h4>Cuidados</h4> <ul> <li><strong>Acoplamento Forte:</strong> Subclasses s√£o fortemente acopladas √†s suas superclasses. Mudan√ßas na superclasse podem quebrar as subclasses.</li> <li><strong>Hierarquias Fr√°geis:</strong> Hierarquias muito profundas ou mal planejadas podem se tornar dif√≠ceis de manter.</li> <li><strong>Uso Indevido:</strong> Heran√ßa deve representar uma rela√ß√£o \"√©-um\". Para rela√ß√µes \"tem-um\", prefira composi√ß√£o.</li> </ul> </div> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "pratica",
      "title": "üíª Exemplos Pr√°ticos: Criando Hierarquias",
      "html": "<div data-legacy-card=\"\"> <h3>Exemplo 1: <code-text>Animal</code-text> e <code-text>Cachorro</code-text></h3> <p>Aqui, <code-text>Cachorro</code-text> herda <code-text>nome</code-text> de <code-text>Animal</code-text> e adiciona seu pr√≥prio atributo <code-text>raca</code-text>.</p> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo da classe Animal\">Copiar</button> <pre><code>\n// Superclass\npublic class Animal { protected String nome; public Animal(String nome) { this.nome = nome; } public void comer() { System.out.println(this.nome + \" est√° comendo.\"); }\n} // Subclass\npublic class Cachorro extends Animal { private String raca; public Cachorro(String nome, String raca) { // Calls the constructor of the superclass (Animal) super(nome); this.raca = raca; } public void latir() { System.out.println(this.nome + \" da ra√ßa \" + this.raca + \" est√° latindo: Au au!\"); }\n} </code></pre> </div> </div> <div data-legacy-card=\"\"> <h3>Exemplo 2: <code-text>Funcionario</code-text> e <code-text>Gerente</code-text></h3> <p>Um <code-text>Gerente</code-text> √© um tipo de <code-text>Funcionario</code-text> que tem um b√¥nus adicional.</p> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo das classes Funcionario e Gerente\">Copiar</button> <pre><code>\n// Superclass\npublic class Funcionario { private String nome; private double salario; public Funcionario(String nome, double salario) { this.nome = nome; this.salario = salario; } public double getSalario() { return this.salario; } public String getNome() { return this.nome; }\n} // Subclass\npublic class Gerente extends Funcionario { private double bonus; public Gerente(String nome, double salario, double bonus) { // Call the Funcionario constructor super(nome, salario); this.bonus = bonus; } // A better approach is to create a new method for the total salary. public double getSalarioComBonus() { // super.getSalario() calls the getSalario() method from the Funcionario class return super.getSalario() + this.bonus; }\n} </code></pre> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "recursos-auxiliares",
      "title": "üé• V√≠deos e Links de Apoio",
      "html": "<div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <h3>Heran√ßa em Java (Curso de Java&nbsp;39 ‚Äì Loiane Groner)</h3> <div> </div> </div> <div data-legacy-card=\"\"> <h3>Heran√ßa e super em Java (Curso de Java&nbsp;37) </h3> <div> </div> </div> </div> <div data-legacy-card=\"\"> <h3>üìñ Leituras Recomendadas</h3> <ul> <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/inheritance.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"book-bookmark\">üìò</span>Inheritance (Documenta√ß√£o Oficial da Oracle) </a> <p>O guia oficial da Oracle sobre heran√ßa em Java.</p> </li> <li> <a href=\"https://www.baeldung.com/java-inheritance\" target=\"_blank\" rel=\"noopener noreferrer\"> Inheritance in Java (Baeldung)</a> <p>Bom material t√©cnico para aprofundar o aprendizado.</p> </li> </ul> </div>"
    },
    {
      "type": "legacySection",
      "id": "ted",
      "title": "Atividade Pr√°tica (TED): Modelando Ve√≠culos",
      "html": "<p> Vamos praticar a heran√ßa modelando diferentes tipos de ve√≠culos. </p> <ol> <li><strong>Crie a superclasse <code-text>Veiculo.java</code-text></strong> com atributos <code-text>private String marca</code-text> e <code-text>private String modelo</code-text>. Adicione um construtor e getters para esses atributos.</li> <li><strong>Crie a subclasse <code-text>Carro.java</code-text></strong> que herda de <code-text>Veiculo</code-text>. Adicione um atributo <code-text>private int numeroDePortas</code-text>. Crie um construtor que use <code-text>super()</code-text> para inicializar a marca e o modelo.</li> <li><strong>Crie a subclasse <code-text>Moto.java</code-text></strong> que herda de <code-text>Veiculo</code-text>. Adicione um atributo <code-text>private int cilindradas</code-text>. Crie um construtor que tamb√©m use <code-text>super()</code-text>.</li> <li><strong>Crie uma classe <code-text>Garagem.java</code-text> com um m√©todo <code-text>main</code-text></strong> para testar. Crie um objeto <code-text>Carro</code-text> e um objeto <code-text>Moto</code-text>, e imprima as informa√ß√µes completas de cada um no console.</li> </ol>"
    },
    {
      "type": "legacySection",
      "id": "checklist",
      "title": "‚úÖChecklist de Aprendizagem da Aula",
      "html": "<div data-legacy-card=\"\"> <p>Ao final desta aula, voc√™ deve ser capaz de:</p> <ul> <li><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Explicar o conceito de Heran√ßa e a rela√ß√£o \"√©-um\".</li> <li><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Utilizar a palavra-chave <code-text>extends</code-text> para criar uma subclasse.</li> <li><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Chamar o construtor da superclasse usando <code-text>super()</code-text>.</li> <li><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Entender como subclasses herdam membros e podem adicionar os seus pr√≥prios.</li> </ul> </div>"
    },
    {
      "type": "legacySection",
      "id": "bibliografia",
      "title": "üìö Bibliografia de Apoio",
      "html": "<div data-legacy-card=\"\"> <p><strong>DEITEL, Harvey M.; DEITEL, Paul J.</strong> <em>Java: como programar.</em> 8. ed. S√£o Paulo: Pearson Prentice Hall, 2014.</p> <p><strong>SCHILDT, Herbert.</strong> <em>Java para iniciantes: crie, compile e execute programas Java rapidamente.</em> 6. ed. Porto Alegre: Bookman, 2015.</p> <p><strong>GOODRICH, Michael T.; TAMASSIA, Roberto.</strong> <em>Estruturas de dados e algoritmos em Java.</em> 5. ed. Porto Alegre: Bookman, 2013.</p> </div>"
    }
  ]
}

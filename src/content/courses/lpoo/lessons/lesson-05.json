{
  "id": "lesson-05",
  "title": "Aula 5: Resolu√ß√£o da AV1 e Introdu√ß√£o √† Heran√ßa",
  "objective": "Revisar os conceitos fundamentais de POO e introduzir a Heran√ßa como mecanismo de reuso e especializa√ß√£o de c√≥digo em Java.",
  "content": [
    {
      "type": "contentBlock",
      "title": "Ementa e Contextualiza√ß√£o",
      "content": [
        {
          "type": "paragraph",
          "text": "Nesta aula, faremos uma pausa estrat√©gica para consolidar o conhecimento adquirido at√© agora, com a resolu√ß√£o comentada da AV1. Em seguida, daremos um passo fundamental na Programa√ß√£o Orientada a Objetos ao introduzir a <strong>Heran√ßa</strong>. A heran√ßa √© um mecanismo poderoso que permite criar novas classes a partir de outras j√° existentes, promovendo o reuso de c√≥digo, evitando duplica√ß√£o e organizando nosso software em hierarquias l√≥gicas. √â o pilar que nos permite modelar relacionamentos do tipo \"√©-um\" (um Gerente \"√©-um\" Funcion√°rio), essencial para a constru√ß√£o de sistemas complexos e escal√°veis."
        }
      ]
    },
    {
      "type": "lessonPlan",
      "title": "Plano da Aula",
      "cards": [
        {
          "icon": "book-open",
          "title": "CONTE√öDO",
          "content": "Resolu√ß√£o comentada da AV1. Conceito de Heran√ßa, palavra-chave `extends`, superclasse (classe base) e subclasse (classe derivada)."
        },
        {
          "icon": "bullseye",
          "title": "OBJETIVO",
          "content": "Revisar os conceitos fundamentais de POO e introduzir a Heran√ßa como mecanismo de reuso e especializa√ß√£o de c√≥digo em Java."
        },
        {
          "icon": "gears",
          "title": "METODOLOGIA",
          "content": "An√°lise da avalia√ß√£o, aula expositiva sobre Heran√ßa, e exemplos pr√°ticos de implementa√ß√£o de hierarquias de classes."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "üìö Teoria ‚Äî An√°lise da AV1: Consolidando Nossos Conhecimentos",
      "content": [
        {
          "type": "paragraph",
          "text": "Vamos revisar um problema t√≠pico da AV1, que aborda os conceitos essenciais que vimos at√© agora: classes, objetos, atributos, m√©todos e encapsulamento."
        },
        {
          "type": "callout",
          "variant": "academic",
          "title": "Problema Exemplo: Modelar um Curso",
          "content": "\"Crie uma classe `Curso` para representar um curso acad√™mico. A classe deve ter os atributos privados `nome` (String) e `cargaHoraria` (int). Implemente um construtor que inicialize esses atributos e m√©todos getters e setters. O setter de `cargaHoraria` deve garantir que o valor n√£o seja negativo. Crie uma classe de teste para instanciar e exibir os dados de um curso.\""
        },
        {
          "type": "contentBlock",
          "title": "Resolu√ß√£o Passo a Passo",
          "content": [
            {
              "type": "paragraph",
              "text": "A solu√ß√£o correta envolve criar a classe com atributos privados e fornecer acesso controlado atrav√©s de m√©todos p√∫blicos."
            },
            {
              "type": "code",
              "language": "java",
              "code": "// File: Curso.java\npublic class Curso {\n    private String nome;\n    private int cargaHoraria;\n\n    public Curso(String nome, int cargaHoraria) {\n        this.nome = nome;\n        this.setCargaHoraria(cargaHoraria); // Use the setter to ensure validation\n    }\n\n    public String getNome() {\n        return this.nome;\n    }\n\n    public int getCargaHoraria() {\n        return this.cargaHoraria;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public void setCargaHoraria(int cargaHoraria) {\n        if (cargaHoraria >= 0) {\n            this.cargaHoraria = cargaHoraria;\n        } else {\n            System.out.println(\"[ERRO] Carga hor√°ria n√£o pode ser negativa.\");\n        }\n    }\n}"
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "üèóÔ∏è Construindo Hierarquias: O Poder da Heran√ßa",
      "content": [
        {
          "type": "contentBlock",
          "title": "1. O que √© Heran√ßa?",
          "content": [
            {
              "type": "paragraph",
              "text": "Heran√ßa √© um mecanismo que permite que uma classe (subclasse) herde atributos e m√©todos de outra classe (superclasse). Isso cria uma rela√ß√£o \"√©-um\". Por exemplo, um `Cachorro` <strong>√© um</strong> `Animal`. A subclasse pode reutilizar todo o c√≥digo da superclasse e ainda adicionar seus pr√≥prios atributos e m√©todos espec√≠ficos."
            },
            {
              "type": "list",
              "items": [
                "<strong>Superclasse (ou Classe Pai/Base):</strong> A classe que est√° sendo herdada. Cont√©m os membros mais gen√©ricos.",
                "<strong>Subclasse (ou Classe Filha/Derivada):</strong> A classe que herda. √â uma vers√£o especializada da superclasse.",
                "<strong>Palavra-chave `extends`:</strong> Usada em Java para estabelecer a rela√ß√£o de heran√ßa. Ex: `public class Cachorro extends Animal`."
              ]
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "2. A Palavra-chave super",
          "content": [
            {
              "type": "paragraph",
              "text": "A palavra-chave `super` √© usada dentro de uma subclasse para se referir a membros da sua superclasse. Ela tem dois usos principais:"
            },
            {
              "type": "list",
              "items": [
                "`super()`: Para chamar o construtor da superclasse. Esta deve ser a <strong>primeira instru√ß√£o</strong> no construtor da subclasse.",
                "`super.metodo()`: Para chamar um m√©todo espec√≠fico da superclasse, especialmente √∫til quando a subclasse sobrescreve esse m√©todo."
              ]
            }
          ]
        },
        {
          "type": "cardGrid",
          "title": "3. Vantagens e Cuidados com a Heran√ßa",
          "cards": [
            {
              "title": "Vantagens",
              "content": "<ul><li><strong>Reuso de C√≥digo:</strong> Evita duplica√ß√£o de atributos e m√©todos comuns.</li><li><strong>Organiza√ß√£o:</strong> Cria hierarquias l√≥gicas e f√°ceis de entender.</li><li><strong>Polimorfismo:</strong> Permite que objetos de subclasses sejam tratados como objetos da superclasse (veremos na pr√≥xima aula).</li></ul>"
            },
            {
              "title": "Cuidados",
              "content": "<ul><li><strong>Acoplamento Forte:</strong> Subclasses s√£o fortemente acopladas √†s suas superclasses. Mudan√ßas na superclasse podem quebrar as subclasses.</li><li><strong>Hierarquias Fr√°geis:</strong> Hierarquias muito profundas ou mal planejadas podem se tornar dif√≠ceis de manter.</li><li><strong>Uso Indevido:</strong> Heran√ßa deve representar uma rela√ß√£o \"√©-um\". Para rela√ß√µes \"tem-um\", prefira composi√ß√£o.</li></ul>"
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "üíª Exemplos Pr√°ticos: Criando Hierarquias",
      "content": [
        {
          "type": "contentBlock",
          "title": "Exemplo 1: Animal e Cachorro",
          "content": [
            {
              "type": "paragraph",
              "text": "Aqui, `Cachorro` herda `nome` de `Animal` e adiciona seu pr√≥prio atributo `raca`."
            },
            {
              "type": "code",
              "language": "java",
              "code": "// Superclass\npublic class Animal {\n    protected String nome;\n\n    public Animal(String nome) {\n        this.nome = nome;\n    }\n\n    public void comer() {\n        System.out.println(this.nome + \" est√° comendo.\");\n    }\n}\n\n// Subclass\npublic class Cachorro extends Animal {\n    private String raca;\n\n    public Cachorro(String nome, String raca) {\n        // Calls the constructor of the superclass (Animal)\n        super(nome); \n        this.raca = raca;\n    }\n\n    public void latir() {\n        System.out.println(this.nome + \" da ra√ßa \" + this.raca + \" est√° latindo: Au au!\");\n    }\n}"
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "Exemplo 2: Funcionario e Gerente",
          "content": [
            {
              "type": "paragraph",
              "text": "Um `Gerente` √© um tipo de `Funcionario` que tem um b√¥nus adicional."
            },
            {
              "type": "code",
              "language": "java",
              "code": "// Superclass\npublic class Funcionario {\n    private String nome;\n    private double salario;\n\n    public Funcionario(String nome, double salario) {\n        this.nome = nome;\n        this.salario = salario;\n    }\n\n    public double getSalario() {\n        return this.salario;\n    }\n    \n    public String getNome() {\n        return this.nome;\n    }\n}\n\n// Subclass\npublic class Gerente extends Funcionario {\n    private double bonus;\n\n    public Gerente(String nome, double salario, double bonus) {\n        // Call the Funcionario constructor\n        super(nome, salario);\n        this.bonus = bonus;\n    }\n\n    // A better approach is to create a new method for the total salary.\n    public double getSalarioComBonus() {\n        // super.getSalario() calls the getSalario() method from the Funcionario class\n        return super.getSalario() + this.bonus;\n    }\n}"
            }
          ]
        }
      ]
    },
    {
      "type": "videosBlock",
      "title": "üé• V√≠deos e Links de Apoio",
      "videos": [
        {
          "title": "Heran√ßa em Java (Curso de Java 39 ‚Äì Loiane Groner)",
          "youtubeId": "aRPal-8z4RQ"
        },
        {
          "title": "Heran√ßa e super em Java (Curso de Java 37)",
          "youtubeId": "MOXLCjL4Ik4"
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "üìñ Leituras Recomendadas",
      "content": [
        {
          "type": "button",
          "text": "Inheritance (Documenta√ß√£o Oficial da Oracle)",
          "href": "https://docs.oracle.com/javase/tutorial/java/javaOO/inheritance.html"
        },
        {
          "type": "button",
          "text": "Inheritance in Java (Baeldung)",
          "href": "https://www.baeldung.com/java-inheritance"
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Atividade Pr√°tica (TED): Modelando Ve√≠culos",
      "content": [
        {
          "type": "paragraph",
          "text": "Vamos praticar a heran√ßa modelando diferentes tipos de ve√≠culos."
        },
        {
          "type": "list",
          "items": [
            "**Crie a superclasse `Veiculo.java`** com atributos `private String marca` e `private String modelo`. Adicione um construtor e getters para esses atributos.",
            "**Crie a subclasse `Carro.java`** que herda de `Veiculo`. Adicione um atributo `private int numeroDePortas`. Crie um construtor que use `super()` para inicializar a marca e o modelo.",
            "**Crie a subclasse `Moto.java`** que herda de `Veiculo`. Adicione um atributo `private int cilindradas`. Crie um construtor que tamb√©m use `super()`.",
            "**Crie uma classe `Garagem.java` com um m√©todo `main`** para testar. Crie um objeto `Carro` e um objeto `Moto`, e imprima as informa√ß√µes completas de cada um no console."
          ]
        }
      ]
    },
    {
      "type": "checklist",
      "title": "Checklist de Aprendizagem da Aula",
      "items": [
        "Explicar o conceito de Heran√ßa e a rela√ß√£o \"√©-um\".",
        "Utilizar a palavra-chave `extends` para criar uma subclasse.",
        "Chamar o construtor da superclasse usando `super()`.",
        "Entender como subclasses herdam membros e podem adicionar os seus pr√≥prios."
      ]
    },
    {
      "type": "bibliographyBlock",
      "title": "üìö Bibliografia de Apoio",
      "references": [
        "<strong>DEITEL, Harvey M.; DEITEL, Paul J.</strong> <em>Java: como programar.</em> 8. ed. S√£o Paulo: Pearson Prentice Hall, 2014.",
        "<strong>SCHILDT, Herbert.</strong> <em>Java para iniciantes: crie, compile e execute programas Java rapidamente.</em> 6. ed. Porto Alegre: Bookman, 2015.",
        "<strong>GOODRICH, Michael T.; TAMASSIA, Roberto.</strong> <em>Estruturas de dados e algoritmos em Java.</em> 5. ed. Porto Alegre: Bookman, 2013."
      ]
    }
  ]
}

{
  "id": "lesson1",
  "title": "Aula 1: Fundamentos da Programa√ß√£o Orientada a Objetos",
  "objective": "",
  "content": [
    {
      "type": "legacySection",
      "id": "ementa",
      "title": "Ementa e Contextualiza√ß√£o",
      "html": "<div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <h3>Informa√ß√µes Gerais</h3> <ul> <li><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"puzzle-piece\">üß©</span><strong>Unidade Curricular:</strong> Linguagem de Programa√ß√£o Orientada a Objetos</li> <li><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"clock\">‚è±Ô∏è</span><strong>Carga Hor√°ria:</strong> 90h</li> <li><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"shapes\">üß±</span><strong>Compet√™ncias:</strong> Modelagem de sistemas, abstra√ß√£o, encapsulamento, heran√ßa, polimorfismo, desenvolvimento em Java.</li> </ul> </div> <div data-legacy-card=\"\"> <h4><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"graduation-cap\">üéì</span>Alinhamento Acad√™mico</h4> <p>Esta disciplina desenvolve compet√™ncias essenciais de pensamento computacional e abstra√ß√£o, alinhadas √†s diretrizes curriculares para cursos de tecnologia. O foco em modelagem e resolu√ß√£o de problemas com POO prepara o aluno para desafios reais do mercado de desenvolvimento de software.</p> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "plano-aula",
      "title": "Plano da Aula",
      "html": "<div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <h3><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"book-open\">üìñ</span>CONTE√öDO</h3> <p>Fundamentos do paradigma OO, diferen√ßa para programa√ß√£o estruturada, e vis√£o geral de Java (JDK, JVM, IDEs).</p> </div> <div data-legacy-card=\"\"> <h3><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"bullseye\">üéØ</span>OBJETIVO</h3> <p>Apresentar os conceitos iniciais de POO, sua relev√¢ncia, e guiar na configura√ß√£o do ambiente de desenvolvimento Java.</p> </div> <div data-legacy-card=\"\"> <h3><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"gears\">‚öôÔ∏è</span>METODOLOGIA</h3> <p>Aula expositiva com exemplos pr√°ticos de c√≥digo e uma atividade guiada para criar a primeira classe e objeto.</p> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "introducao",
      "title": "üöÄ O Que √© Programa√ß√£o Orientada a Objetos (POO)?",
      "html": "<p> A Programa√ß√£o Orientada a Objetos (POO) √© mais do que um conjunto de regras; √© uma nova forma de pensar e estruturar solu√ß√µes para problemas. Em vez de focarmos em procedimentos e l√≥gica sequencial, a POO nos convida a modelar o mundo real atrav√©s de \"objetos\". </p> <p> Pense em um carro. Ele tem <strong>caracter√≠sticas</strong> (cor, marca, modelo) e pode realizar <strong>a√ß√µes</strong> (ligar, acelerar, frear). Na POO, as caracter√≠sticas s√£o os <strong>atributos</strong> e as a√ß√µes s√£o os <strong>m√©todos</strong>. Juntos, eles formam um <strong>objeto</strong>, uma entidade aut√¥noma que encapsula seus pr√≥prios dados e comportamentos. </p>"
    },
    {
      "type": "legacySection",
      "id": "comparativo-paradigmas",
      "title": "Paradigmas em Perspectiva",
      "html": "<div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <h3>Programa√ß√£o Estruturada</h3> <p>Foco em <strong>fun√ß√µes e procedimentos</strong>. Os dados e as opera√ß√µes sobre os dados s√£o separados.</p> <ul> <li><strong>L√≥gica:</strong> Top-down, sequencial.</li> <li><strong>Reuso:</strong> Limitado a fun√ß√µes.</li> <li><strong>Manuten√ß√£o:</strong> Altera√ß√µes podem ter impacto global.</li> <li><strong>Exemplo:</strong> Linguagem C.</li> </ul> </div> <div data-legacy-card=\"\"> <h3>Programa√ß√£o Orientada a Objetos</h3> <p>Foco em <strong>objetos</strong> que unem dados (atributos) e comportamentos (m√©todos).</p> <ul> <li><strong>L√≥gica:</strong> Modelagem do mundo real.</li> <li><strong>Reuso:</strong> Alto, atrav√©s de heran√ßa e composi√ß√£o.</li> <li><strong>Manuten√ß√£o:</strong> Modular, altera√ß√µes s√£o encapsuladas.</li> <li><strong>Exemplo:</strong> Java, C#, Python.</li> </ul> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "boas-praticas",
      "title": "üí°Boas Pr√°ticas para Iniciar em Java",
      "html": "<p>Escrever c√≥digo limpo desde o in√≠cio acelera seu aprendizado e facilita a colabora√ß√£o. Siga estas conven√ß√µes:</p> <ul> <li><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span><strong>Classes em PascalCase:</strong> <code-text>CalculadoraDeImposto</code-text>, <code-text>Book</code-text>.</li> <li><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span><strong>Vari√°veis e M√©todos em camelCase:</strong> <code-text>pageCount</code-text>, <code-text>displayInfo()</code-text>.</li> <li><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span><strong>Coment√°rios Javadoc:</strong> Use <code-text>/** ... */</code-text> para documentar classes e m√©todos, explicando o \"porqu√™\" do c√≥digo.</li> </ul>"
    },
    {
      "type": "legacySection",
      "id": "conceitos",
      "title": "üîë Conceitos Fundamentais em Java",
      "html": "<div data-legacy-card=\"\"> <h3>1. Classes e Objetos</h3> <p>A <strong>classe</strong> √© o molde. O <strong>objeto</strong> √© a inst√¢ncia concreta criada a partir do molde. Usamos a palavra-chave <code-text>new</code-text> para criar um objeto.</p> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo da classe Book\">Copiar</button> <pre><code>\n/** * Represents a book with a title, author, and page count. * This class serves as a blueprint for creating book objects. */\npublic class Book { String title; String author; int pageCount; /** * Displays the book's information to the console. * This is a 'void' method because it does not return any value. */ public void displayInfo() { System.out.println(\"Title: \" + title); }\n} </code></pre> </div> </div> <div data-legacy-card=\"\"> <h3>2. M√©todos com Retorno</h3> <p>Nem todos os m√©todos s√£o <code-text>void</code-text>. Muitos realizam um c√°lculo ou uma opera√ß√£o e <strong>retornam</strong> um valor. Para isso, declaramos o tipo de retorno (ex: <code-text>String</code-text>, <code-text>int</code-text>) e usamos a palavra-chave <code-text>return</code-text>.</p> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo da classe Calculator\">Copiar</button> <pre><code>\n/** * A simple calculator to demonstrate methods that return values. */\npublic class Calculator { /** * Adds two integers and returns the result. * @param a The first number. * @param b The second number. * @return The sum of a and b. */ public int add(int a, int b) { return a + b; }\n} // How to use it in the main method:\npublic class TestCalculator { public static void main(String[] args) { Calculator calc = new Calculator(); int result = calc.add(5, 7); // The returned value (12) is stored in 'result'. System.out.println(\"The result is: \" + result); // Prints \"The result is: 12\" }\n} </code></pre> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "compilacao",
      "title": "Do C√≥digo-Fonte ao Programa: Compila√ß√£o e Execu√ß√£o",
      "html": "<p>Para que a JVM entenda nosso c√≥digo Java, precisamos primeiro compil√°-lo. Este processo transforma nosso arquivo <code-text>.java</code-text> em um arquivo <code-text>.class</code-text> (bytecode).</p> <div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <p>1. Compilar </p> <code>javac NomeDaClasse.java</code> </div> <div data-legacy-card=\"\"> <p>2. Executar </p> <code>java NomeDaClasse</code> </div> </div> <p>üí° <strong>Dica:</strong> Para listar arquivos no terminal, use <code-text>ls</code-text> (Linux/Mac) ou <code-text>dir</code-text> (Windows).</p>"
    },
    {
      "type": "legacySection",
      "id": "ted",
      "title": "Atividade Pr√°tica (TED): Modelando seus Primeiros Objetos",
      "html": "<p> Vamos aplicar os conceitos criando um pequeno cen√°rio com duas classes que se relacionam: <code-text>Motorista</code-text> e <code-text>Carro</code-text>. </p> <div data-legacy-card=\"\"> <h3>Parte 1: A Estrutura B√°sica</h3> <ol> <li> <strong>Crie a classe <code-text>Carro.java</code-text></strong> <p>Um carro simples com marca, modelo e ano.</p> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo da classe Carro (Parte 1)\">Copiar</button> <pre><code>\npublic class Carro { String marca; String modelo; int ano;\n} </code></pre> </div> </li> <li> <strong>Crie a classe <code-text>Motorista.java</code-text></strong> <p>O motorista ter√° um nome e um carro associado a ele.</p> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo da classe Motorista (Parte 1)\">Copiar</button> <pre><code>\npublic class Motorista { String nome; Carro carro; // A motorista \"tem um\" carro public void exibirInfo() { System.out.println(\"Motorista: \" + nome); System.out.println(\"Carro: \" + carro.marca + \" \" + carro.modelo); }\n} </code></pre> </div> </li> <li> <strong>Crie a classe <code-text>Corrida.java</code-text> para testar</strong> <p>Aqui vamos criar os objetos e conect√°-los.</p> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo da classe Corrida para teste\">Copiar</button> <pre><code>\npublic class Corrida { public static void main(String[] args) { // 1. Create a Carro object Carro carroDoJoao = new Carro(); carroDoJoao.marca = \"VW\"; carroDoJoao.modelo = \"Nivus\"; carroDoJoao.ano = 2023; // 2. Create a Motorista object Motorista joao = new Motorista(); joao.nome = \"Jo√£o\"; // 3. Associate the car with the driver joao.carro = carroDoJoao; // 4. Display the driver's info joao.exibirInfo(); }\n} </code></pre> </div> </li> </ol> </div> <div data-legacy-card=\"\"> <h3>Parte 2 (Avan√ßado): Construtores e Desafios</h3> <p>Agora, vamos refatorar o c√≥digo usando construtores e adicionar um desafio.</p> <ul> <li><strong>Refatore as classes <code-text>Carro</code-text> e <code-text>Motorista</code-text></strong> para usar construtores, como fizemos no exemplo da aula.</li> <li><strong>Desafio Opcional:</strong> Adicione um m√©todo <code-text>acelerar()</code-text> na classe <code-text>Carro</code-text>. Depois, crie uma sobrecarga: um <code-text>acelerar()</code-text> sem par√¢metros e outro <code-text>acelerar(int limiteDeVelocidade)</code-text> que recebe um valor.</li> </ul> </div>"
    },
    {
      "type": "legacySection",
      "id": "recursos",
      "title": "üîó Recursos Extras",
      "html": "<div data-legacy-card=\"\"> <a href=\"https://docs.oracle.com/en/java/\" target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"Abrir documenta√ß√£o oficial do Java da Oracle em uma nova aba\"><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"book-bookmark\">üìò</span>Documenta√ß√£o Oficial do Java (Oracle)</a> <a href=\"https://github.com/sombraprof/lpoo\" target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"Abrir reposit√≥rio da disciplina no GitHub em uma nova aba\"><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"github\">üê±</span>Reposit√≥rio da Disciplina no GitHub</a> </div>"
    },
    {
      "type": "legacySection",
      "id": "bibliografia",
      "title": "üìö Bibliografia de Apoio",
      "html": "<div data-legacy-card=\"\"> <p><strong>DEITEL, Harvey M.; DEITEL, Paul J.</strong> <em>Java: como programar.</em> 8. ed. S√£o Paulo: Pearson Prentice Hall, 2014.</p> <p><strong>SCHILDT, Herbert.</strong> <em>Java para iniciantes: crie, compile e execute programas Java rapidamente.</em> 6. ed. Porto Alegre: Bookman, 2015.</p> <p><strong>BATES, Bert; SIERRA, Kathy.</strong> <em>Use a cabe√ßa: Java.</em> 2. ed. Rio de Janeiro: ALTA BOOKS, 2010.</p> </div>"
    },
    {
      "type": "legacySection",
      "id": "checklist",
      "title": "‚úÖChecklist de Aprendizagem da Aula",
      "html": "<div data-legacy-card=\"\"> <p>Ao final desta aula, voc√™ deve ser capaz de:</p> <ul> <li><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Explicar o que √© uma classe e um objeto.</li> <li><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Criar uma classe simples com atributos e m√©todos em Java.</li> <li><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Instanciar um objeto a partir de uma classe.</li> <li><span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Compilar e executar um programa Java simples no terminal.</li> </ul> </div>"
    }
  ]
}

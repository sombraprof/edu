{
  "id": "lesson6",
  "title": "Aula 6: Polimorfismo",
  "objective": "",
  "content": [
    {
      "type": "legacySection",
      "id": "ementa",
      "title": "Ementa e Contextualiza√ß√£o",
      "html": "<p> Na aula anterior, introduzimos a Heran√ßa como um dos pilares da POO. Agora, vamos aprofundar nosso entendimento, explorando como as subclasses podem n√£o apenas herdar, mas tamb√©m <strong>modificar</strong> comportamentos atrav√©s da <strong>sobrescrita de m√©todos</strong>. Isso nos levar√° diretamente ao conceito de <strong>Polimorfismo</strong>, talvez a caracter√≠stica mais poderosa da POO. Polimorfismo nos permite escrever um c√≥digo mais flex√≠vel, gen√©rico e extens√≠vel, tratando objetos de diferentes classes de maneira uniforme. Dominar esses conceitos √© o que separa um programador iniciante de um arquiteto de software capaz de criar sistemas robustos e de f√°cil manuten√ß√£o. </p>"
    },
    {
      "type": "legacySection",
      "id": "plano-aula",
      "title": "Plano da Aula",
      "html": "<div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"book-open\">üìñ</span>CONTE√öDO </h3> <p> Modificador <code-text>protected</code-text>, Sobrescrita de M√©todos (<code-text>@Override</code-text>), Polimorfismo, a classe <code-text>Object</code-text> e o m√©todo <code-text>toString()</code-text>. </p> </div> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"bullseye\">üéØ</span>OBJETIVO </h3> <p> Capacitar o aluno a sobrescrever m√©todos, aplicar o polimorfismo para criar um c√≥digo mais flex√≠vel e entender o papel da classe <code-text>Object</code-text>. </p> </div> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"gears\">‚öôÔ∏è</span>METODOLOGIA </h3> <p> Aula expositiva, exemplos comparativos de c√≥digo, e uma atividade pr√°tica focada na aplica√ß√£o do polimorfismo. </p> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "teoria",
      "title": "üöÄ Elevando o N√≠vel da Heran√ßa",
      "html": "<div data-legacy-card=\"\"> <h3> 1. Visibilidade Protegida (<code-text>protected</code-text>) </h3> <p> At√© agora, usamos <code-text>private</code-text> para encapsulamento m√°ximo. Mas e se quisermos que uma subclasse acesse diretamente um atributo da superclasse, sem que ele seja p√∫blico para o resto do mundo? Para isso, usamos o modificador <code-text>protected</code-text>. </p> <ul> <li> <strong>private:</strong> Acess√≠vel apenas dentro da pr√≥pria classe. </li> <li> <strong>protected:</strong> Acess√≠vel dentro da pr√≥pria classe, por classes no mesmo pacote e por subclasses (mesmo em pacotes diferentes). </li> <li><strong>public:</strong> Acess√≠vel de qualquer lugar.</li> </ul> <div> <h4>Nuance importante de <code-text>protected</code-text></h4> <p> Fora do mesmo pacote, o acesso <code-text>protected</code-text> s√≥ √© permitido em <strong>subclasses</strong> e, ainda assim, via a <em>inst√¢ncia da subclasse</em> (n√£o via refer√™ncia de <code-text>Base</code-text>). </p> <div> <button title=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo\"> Copiar </button> <pre><code>\n// English comments for clarity\n// package base;\npublic class Base { protected int x = 42;\n} // package outro;\npublic class SubB extends Base { public void ok() { // OK: access via subclass instance (even if package is different) this.x = 10; } public void notOk() { Base b = new Base(); // b.x; // ERROR: cannot access protected via superclass ref from another package }\n} </code></pre> </div> </div> </div> <div data-legacy-grid=\"\"> <h3> 2. Sobrescrita de M√©todos (<code-text>@Override</code-text>) </h3> <p> Sobrescrever (ou anular) um m√©todo significa que uma subclasse fornece uma implementa√ß√£o <strong>espec√≠fica</strong> para um m√©todo que j√° √© fornecido por sua superclasse. A assinatura do m√©todo (nome e par√¢metros) deve ser id√™ntica. </p> <div data-legacy-card=\"\"> <h4>A anota√ß√£o <code-text>@Override</code-text></h4> <p> Embora opcional, √© uma boa pr√°tica usar a anota√ß√£o <code-text>@Override</code-text> acima de um m√©todo sobrescrito. Se houver erro na assinatura, o compilador alerta ‚Äî evitando bugs sutis. </p> </div> <!-- Quadro comparativo Overloading x Overriding --> <div data-legacy-card=\"\"> <div> <h4> Overloading (compile-time) </h4> <ul> <li>Mesmo nome; <strong>assinaturas diferentes</strong>.</li> <li>Resolu√ß√£o em <strong>tempo de compila√ß√£o</strong>.</li> <li>N√£o envolve heran√ßa, em geral.</li> </ul> </div> <div> <h4> Overriding (runtime) </h4> <ul> <li><strong>Mesma assinatura</strong> em subclasse.</li> <li><strong>Binding din√¢mico</strong> em execu√ß√£o.</li> <li>Permite polimorfismo real.</li> </ul> </div> </div> </div> <div data-legacy-grid=\"\"> <h3> 3. Polimorfismo: M√∫ltiplas Formas </h3> <p> Polimorfismo significa \"muitas formas\". Em POO, √© a capacidade de um objeto ser referenciado de m√∫ltiplas maneiras. A forma mais comum √© usar uma vari√°vel de refer√™ncia do tipo da <strong>superclasse</strong> para apontar para um objeto da <strong>subclasse</strong>. </p> <div data-legacy-card=\"\"> <button title=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo de exemplo de polimorfismo\"> Copiar </button> <pre><code>\n// English comment: Upcasting allows superclass reference to point to subclass object\nFuncionario f = new Gerente(\"Ana\", 8000.0, 1500.0); </code></pre> </div> <p> A \"m√°gica\" acontece quando chamamos um m√©todo sobrescrito a partir dessa refer√™ncia. O Java, em tempo de execu√ß√£o, sabe qual √© o tipo <strong>real</strong> do objeto (<code-text>Gerente</code-text>) e chama a vers√£o correta. </p> <!-- instanceof pattern matching --> <div data-legacy-card=\"\"> <h4>Downcasting seguro com <code-text>instanceof</code-text> (pattern matching)</h4> <div> <button title=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo\"> Copiar </button> <pre><code>\n// English comments: Pattern matching for instanceof (Java 16+)\nFuncionario ref = new Gerente(\"Maria\", 5000.0);\nif (ref instanceof Gerente gerente) { // auto-cast bound to variable System.out.println(\"B√¥nus especial: \" + gerente.getBonificacao());\n} </code></pre> </div> </div> </div> <div data-legacy-grid=\"\"> <h3> 4. A Classe <code-text>Object</code-text>: A M√£e de Todas </h3> <p> Em Java, toda classe herda implicitamente de <code-text>Object</code-text>. Isso garante m√©todos como <code-text>equals()</code-text>, <code-text>hashCode()</code-text> e <code-text>toString()</code-text>. </p> <p> √â uma √≥tima pr√°tica sobrescrever <code-text>toString()</code-text> para representa√ß√µes textuais √∫teis. </p> <div data-legacy-card=\"\"> <h4>Contrato <code-text>equals()</code-text> / <code-text>hashCode()</code-text></h4> <p> Ao sobrescrever <code-text>equals()</code-text>, <strong>tamb√©m</strong> sobrescreva <code-text>hashCode()</code-text> de forma consistente (coer√™ncia em cole√ß√µes como <code-text>HashSet</code-text>/<code-text>HashMap</code-text>). </p> </div> <div data-legacy-card=\"\"> <h4>Prefira composi√ß√£o a heran√ßa</h4> <p> Use heran√ßa quando respeitar o princ√≠pio de substitui√ß√£o de Liskov (LSP) e houver uma rela√ß√£o \"√©-um\". Em muitos casos, composi√ß√£o oferece <em>acoplamento menor</em> e <em>maior reuso</em>. </p> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "pratica",
      "title": "üíª Praticando Polimorfismo",
      "html": "<p> Vamos evoluir nosso exemplo <code-text>Funcionario</code-text>/<code-text>Gerente</code-text>. Adicionaremos um <code-text>Programador</code-text> e usaremos polimorfismo para calcular uma folha de pagamento. </p> <div data-legacy-card=\"\"> <button title=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo de exemplo de polimorfismo\"> Copiar </button> <pre><code>\n// Superclass Funcionario (educational example)\npublic class Funcionario { protected String nome; // For teaching purposes; in production prefer private + getters protected double salario; public Funcionario(String nome, double salario) { this.nome = nome; this.salario = salario; } // A general bonus calculation public double getBonificacao() { return this.salario * 0.05; // 5% bonus for a regular employee } @Override public String toString() { return \"Funcionario [Nome=\" + this.nome + \", Sal√°rio=\" + this.salario + \"]\"; }\n} // Subclass Gerente\npublic class Gerente extends Funcionario { public Gerente(String nome, double salario) { super(nome, salario); } @Override // Overriding the method for a specific implementation public double getBonificacao() { return super.getBonificacao() + 1000.0; // 5% + a fixed bonus of 1000 }\n} // Subclass Programador\npublic class Programador extends Funcionario { public Programador(String nome, double salario) { super(nome, salario); } @Override // Specific bonus for programmers public double getBonificacao() { return this.salario * 0.15; // 15% bonus for programmers }\n} // Test Class\nimport java.util.List; public class ControleBonificacao { public static void main(String[] args) { // Polymorphism in action: Superclass reference for subclass objects Funcionario f1 = new Funcionario(\"Jo√£o\", 2000.0); Funcionario g1 = new Gerente(\"Maria\", 5000.0); Funcionario p1 = new Programador(\"Pedro\", 3500.0); System.out.println(\"B√¥nus do Funcion√°rio: \" + f1.getBonificacao()); // Calls Funcionario's method System.out.println(\"B√¥nus do Gerente: \" + g1.getBonificacao()); // Calls Gerente's method System.out.println(\"B√¥nus do Programador: \" + p1.getBonificacao()); // Calls Programador's method System.out.println(f1); // Prints the result of the overridden toString() method System.out.println(g1); // Optional: polymorphic collections List<funcionario> funcionarios = List.of(f1, g1, p1); double total = 0; for (Funcionario f : funcionarios) { total += f.getBonificacao(); // runtime dispatch } System.out.println(\"Total de bonifica√ß√µes: \" + total); }\n} </funcionario></code></pre> </div> <p> Nota: para valores monet√°rios em produ√ß√£o, prefira <code-text>BigDecimal</code-text>. </p>"
    },
    {
      "type": "legacySection",
      "id": "recursos-auxiliares",
      "title": "üé• V√≠deos e Links de Apoio",
      "html": "<div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <div> <h3> Polimorfismo em Java (DevDojo) </h3> <div> <!-- English comment: Correct DevDojo embed; lazy load; strict referrer; descriptive title --> </div> <p> Aula introdut√≥ria e direta ao ponto sobre polimorfismo, com exemplos pr√°ticos. </p> </div> </div> <div data-legacy-card=\"\"> <h3> Leituras Recomendadas </h3> <ul> <li> <a href=\"https://dev.java/learn/inheritance/polymorphism/\" target=\"_blank\" rel=\"noopener noreferrer\"> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"book-bookmark\">üìò</span>Polymorphism (dev.java/Oracle) </a> <p> Explica√ß√£o concisa de polimorfismo com exemplos e rela√ß√£o com heran√ßa. </p> </li> <li> <a href=\"https://dev.java/learn/inheritance/overriding/\" target=\"_blank\" rel=\"noopener noreferrer\"> Overriding and Hiding Methods (dev.java) </a> <p> Refor√ßa regras de sobrescrita, assinatura id√™ntica e retorno covariante. </p> </li> <li> <a href=\"https://dev.java/learn/inheritance/objects/\" target=\"_blank\" rel=\"noopener noreferrer\"> Object as a Superclass (dev.java) </a> <p> Papel da classe <code-text>Object</code-text> e quando sobrescrever <code-text>toString()</code-text>, <code-text>equals()</code-text> e <code-text>hashCode()</code-text>. </p> </li> <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html\" target=\"_blank\" rel=\"noopener noreferrer\"> Polymorphism (The Java‚Ñ¢ Tutorials ‚Äî JDK 8) </a> <p> Material cl√°ssico (arquivado) ‚Äî bom como refer√™ncia complementar. </p> </li> </ul> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "ted",
      "title": "Atividade Pr√°tica (TED): Figuras Geom√©tricas",
      "html": "<p> Vamos aplicar a heran√ßa e o polimorfismo para calcular a √°rea de diferentes formas geom√©tricas. </p> <ol> <li> <strong>Crie a superclasse abstrata <code-text>FormaGeometrica.java</code-text></strong>. Ela deve declarar o m√©todo <code-text>public abstract double calcularArea()</code-text>. </li> <li> <strong>Crie a subclasse <code-text>Retangulo.java</code-text></strong> que herda de <code-text>FormaGeometrica</code-text>. Adicione os atributos <code-text>largura</code-text> e <code-text>altura</code-text>. Implemente <code-text>calcularArea()</code-text> retornando <code-text>largura * altura</code-text>. </li> <li> <strong>Crie a subclasse <code-text>Circulo.java</code-text></strong> que herda de <code-text>FormaGeometrica</code-text>. Adicione o atributo <code-text>raio</code-text>. Implemente <code-text>calcularArea()</code-text> retornando <code-text>Math.PI * raio * raio</code-text>. </li> <li> <strong>Crie a classe <code-text>TesteFormas.java</code-text></strong> com um m√©todo <code-text>main</code-text>. Crie uma cole√ß√£o (<code-text>List&lt;FormaGeometrica&gt;</code-text>) com inst√¢ncias de <code-text>Retangulo</code-text> e <code-text>Circulo</code-text>. Percorra e imprima a √°rea de cada forma, observando o polimorfismo em a√ß√£o (binding din√¢mico). </li> </ol> <!-- Snippet sugerido para TED --> <div data-legacy-card=\"\"> <button title=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo\"> Copiar </button> <pre><code>\n// English comments: Abstract base class to enforce area calculation\npublic abstract class FormaGeometrica { public abstract double calcularArea(); @Override public String toString() { return getClass().getSimpleName(); }\n} public class Retangulo extends FormaGeometrica { private final double largura; private final double altura; public Retangulo(double largura, double altura) { this.largura = largura; this.altura = altura; } @Override public double calcularArea() { return largura * altura; }\n} public class Circulo extends FormaGeometrica { private final double raio; public Circulo(double raio) { this.raio = raio; } @Override public double calcularArea() { return Math.PI * raio * raio; }\n} import java.util.List; public class TesteFormas { public static void main(String[] args) { List<formageometrica> formas = List.of( new Retangulo(3, 4), new Circulo(2.5) ); for (FormaGeometrica f : formas) { System.out.printf(\"%s -&gt; √°rea = %.2f%n\", f, f.calcularArea()); } }\n} </formageometrica></code></pre> </div>"
    },
    {
      "type": "legacySection",
      "id": "checklist",
      "title": "‚úÖChecklist de Aprendizagem da Aula",
      "html": "<div data-legacy-card=\"\"> <p>Ao final desta aula, voc√™ deve ser capaz de:</p> <ul> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Explicar a diferen√ßa de visibilidade entre <code-text>private</code-text> e <code-text>protected</code-text>. </li> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Sobrescrever um m√©todo de uma superclasse usando a anota√ß√£o <code-text>@Override</code-text>. </li> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Definir Polimorfismo e demonstrar seu uso com uma refer√™ncia de superclasse para um objeto de subclasse. </li> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Sobrescrever o m√©todo <code-text>toString()</code-text> da classe <code-text>Object</code-text> para fornecer uma representa√ß√£o textual √∫til de um objeto. </li> </ul> </div>"
    },
    {
      "type": "legacySection",
      "id": "bibliografia",
      "title": "üìö Bibliografia de Apoio",
      "html": "<div data-legacy-card=\"\"> <p> <strong>DEITEL, Harvey M.; DEITEL, Paul J.</strong> <em>Java: como programar.</em> 8. ed. S√£o Paulo: Pearson Prentice Hall, 2014. </p> <p> <strong>SCHILDT, Herbert.</strong> <em>Java para iniciantes: crie, compile e execute programas Java rapidamente.</em> 6. ed. Porto Alegre: Bookman, 2015. </p> <p> <strong>GOODRICH, Michael T.; TAMASSIA, Roberto.</strong> <em>Estruturas de dados e algoritmos em Java.</em> 5. ed. Porto Alegre: Bookman, 2013. </p> </div>"
    }
  ]
}

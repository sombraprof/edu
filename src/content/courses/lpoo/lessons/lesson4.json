{
  "id": "lesson4",
  "title": "Aula 4: Visibilidade, Modificadores de Acesso e Encapsulamento",
  "objective": "Controlar a visibilidade de atributos e m√©todos, e aplicar o encapsulamento para proteger o estado dos objetos.",
  "content": [
    {
      "type": "contentBlock",
      "title": "Ementa e Contextualiza√ß√£o",
      "content": [
        {
          "type": "paragraph",
          "text": "At√© agora, nossos atributos e m√©todos estavam \"abertos\" para o mundo. Mas e se quis√©ssemos proteger os dados de um objeto contra modifica√ß√µes indevidas? √â aqui que entram os <strong>modificadores de acesso</strong> e o <strong>encapsulamento</strong>. O encapsulamento √© um dos pilares da POO e consiste em \"esconder\" os detalhes internos de um objeto, expondo apenas uma interface segura para intera√ß√£o. Isso n√£o s√≥ aumenta a seguran√ßa do software, mas tamb√©m o torna mais flex√≠vel e f√°cil de manter."
        }
      ]
    },
    {
      "type": "lessonPlan",
      "title": "Plano da Aula",
      "cards": [
        {
          "icon": "book-open",
          "title": "CONTE√öDO",
          "content": "Modificadores de acesso em Java (public, private, protected), encapsulamento, getters e setters, e boas pr√°ticas."
        },
        {
          "icon": "bullseye",
          "title": "OBJETIVO",
          "content": "Controlar a visibilidade de atributos e m√©todos, e aplicar o encapsulamento para proteger o estado dos objetos."
        },
        {
          "icon": "gears",
          "title": "METODOLOGIA",
          "content": "Aula expositiva com analogias, exemplos pr√°ticos de c√≥digo e uma atividade de refatora√ß√£o para aplicar os conceitos."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "üõ°Ô∏è Protegendo Seus Objetos",
      "content": [
        {
          "type": "contentBlock",
          "title": "1. Modificadores de Acesso",
          "content": [
            {
              "type": "paragraph",
              "text": "Java oferece quatro n√≠veis de controle de acesso para membros de uma classe (atributos e m√©todos):"
            },
            {
              "type": "list",
              "items": [
                "`public`: Acess√≠vel de qualquer classe, em qualquer pacote. √â o n√≠vel menos restritivo.",
                "`protected`: Acess√≠vel dentro do mesmo pacote e por subclasses (mesmo em pacotes diferentes).",
                "`package-private` (Sem modificador): Acess√≠vel apenas por classes dentro do mesmo pacote. √â o padr√£o.",
                "`private`: Acess√≠vel apenas dentro da pr√≥pria classe. √â o n√≠vel mais restritivo."
              ]
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "2. Encapsulamento: O Princ√≠pio da Caixa-Preta",
          "content": [
            {
              "type": "paragraph",
              "text": "Encapsular significa agrupar os dados (atributos) e os m√©todos que operam nesses dados dentro de uma √∫nica unidade (a classe), e esconder os detalhes da implementa√ß√£o do mundo exterior. A boa pr√°tica √© declarar os <strong>atributos como `private`</strong> e fornecer <strong>m√©todos `public`</strong> para acess√°-los e modific√°-los de forma controlada."
            },
            {
              "type": "paragraph",
              "text": "Pense em um caixa eletr√¥nico: voc√™ n√£o tem acesso direto ao dinheiro no cofre (atributo `private`). Em vez disso, voc√™ usa uma interface p√∫blica (a tela e os bot√µes) para realizar opera√ß√µes seguras como `sacar()` e `verificarSaldo()`."
            },
            {
              "type": "html",
              "html": "<div class=\"flex justify-center bg-slate-50 p-4 rounded-lg mt-6\"><div class=\"bg-white border-2 border-slate-300 rounded-lg shadow-md w-full max-w-sm mx-auto font-mono text-sm\"><div class=\"p-2 font-bold text-center bg-slate-100 border-b-2 border-slate-300\">ContaBancaria</div><div class=\"p-3 border-b-2 border-slate-300\"><ul class=\"space-y-1\"><li class=\"flex items-start\"><span class=\"font-bold text-red-500 bg-red-100 px-2 py-1 rounded-full w-28 text-center mr-4\">-</span>saldo: double</li><li class=\"flex items-start\"><span class=\"font-bold text-red-500 bg-red-100 px-2 py-1 rounded-full w-28 text-center mr-4\">-</span>titular: String</li></ul></div><div class=\"p-3\"><ul class=\"space-y-1\"><li class=\"flex items-start\"><span class=\"font-bold text-green-500 bg-green-100 px-2 py-1 rounded-full w-28 text-center mr-4\">+</span>depositar(valor: double): void</li><li class=\"flex items-start\"><span class=\"font-bold text-green-500 bg-green-100 px-2 py-1 rounded-full w-28 text-center mr-4\">+</span>sacar(valor: double): void</li><li class=\"flex items-start\"><span class=\"font-bold text-green-500 bg-green-100 px-2 py-1 rounded-full w-28 text-center mr-4\">+</span>getSaldo(): double</li></ul></div></div></div>"
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "üíª Exemplos Pr√°ticos: Gerenciando uma Conta Banc√°ria",
      "content": [
        {
          "type": "contentBlock",
          "title": "Exemplo 1: Classe ContaBancaria Encapsulada",
          "content": [
            {
              "type": "paragraph",
              "text": "Note como o `saldo` √© `private`. A √∫nica forma de alter√°-lo √© atrav√©s dos m√©todos p√∫blicos `depositar` e `sacar`."
            },
            {
              "type": "code",
              "language": "java",
              "code": "public class ContaBancaria {\n    // Attributes are private to protect them from direct external access.\n    private String titular;\n    private double saldo;\n\n    // A public constructor to initialize the object.\n    public ContaBancaria(String titular) {\n        this.titular = titular;\n        this.saldo = 0.0; // Initial balance is always zero.\n    }\n\n    // Public method to deposit money. This is a controlled way to modify 'saldo'.\n    public void depositar(double valor) {\n        if (valor > 0) {\n            this.saldo += valor;\n            System.out.println(\"Dep√≥sito de R$ \" + valor + \" realizado com sucesso.\");\n        } else {\n            System.out.println(\"Valor de dep√≥sito inv√°lido.\");\n        }\n    }\n\n    // Public method to withdraw money.\n    public void sacar(double valor) {\n        if (valor > 0 && valor <= this.saldo) {\n            this.saldo -= valor;\n            System.out.println(\"Saque de R$ \" + valor + \" realizado com sucesso.\");\n        } else {\n            System.out.println(\"Saque n√£o permitido. Saldo insuficiente ou valor inv√°lido.\");\n        }\n    }\n\n    // Public \"getter\" method to allow read-only access to the balance.\n    public double getSaldo() {\n        return this.saldo;\n    }\n}"
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "Exemplo 2: Usando a Classe Encapsulada",
          "content": [
            {
              "type": "paragraph",
              "text": "Na classe `Banco`, n√£o podemos fazer `minhaConta.saldo = -500;`. Somos for√ßados a usar os m√©todos seguros."
            },
            {
              "type": "code",
              "language": "java",
              "code": "public class Banco {\n    public static void main(String[] args) {\n        ContaBancaria minhaConta = new ContaBancaria(\"Ana Souza\");\n\n        System.out.println(\"Saldo inicial: R$ \" + minhaConta.getSaldo());\n\n        minhaConta.depositar(500.0);\n        minhaConta.sacar(200.0);\n        \n        // This line would cause a compilation error because 'saldo' is private.\n        // minhaConta.saldo = 1000000; \n        \n        minhaConta.sacar(400.0); // This will fail due to insufficient funds.\n\n        System.out.println(\"Saldo final: R$ \" + minhaConta.getSaldo());\n    }\n}"
            }
          ]
        }
      ]
    },
    {
      "type": "videosBlock",
      "title": "üé• V√≠deos e Links de Apoio",
      "videos": [
        {
          "title": "Encapsulamento em Java (Loiane Groner)",
          "youtubeId": "6oD7TE90e-M"
        },
        {
          "title": "Getters e Setters em Java (Tutorial Java #84)",
          "youtubeId": "6wVmqY-CrGM"
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Leituras Recomendadas",
      "content": [
        {
          "type": "button",
          "text": "Controlling Access to Members of a Class (Oracle)",
          "href": "https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html"
        },
        {
          "type": "button",
          "text": "Java Encapsulation (Getters and Setters) (W3Schools)",
          "href": "https://www.w3schools.com/java/java_encapsulation.asp"
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Atividade Pr√°tica (TED): Refatorando a Classe Funcionario",
      "content": [
        {
          "type": "paragraph",
          "text": "Vamos refatorar uma classe `Funcionario` para aplicar o encapsulamento e garantir a integridade dos seus dados."
        },
        {
          "type": "list",
          "items": [
            "**Crie a classe `Funcionario.java`** com os atributos `private String nome` e `private double salario`.",
            "**Implemente os m√©todos `public` getters e setters** para ambos os atributos: `getNome()`, `setNome(String nome)`, `getSalario()`, `setSalario(double salario)`.",
            "**Adicione uma regra de neg√≥cio no `setSalario`**: o sal√°rio n√£o pode ser definido com um valor menor que o sal√°rio m√≠nimo (R$ 1.212,00). Se o valor for inv√°lido, exiba uma mensagem de erro e n√£o altere o sal√°rio.",
            "**Crie uma classe `Empresa.java` com um m√©todo `main`** para testar. Crie um objeto `Funcionario`, tente definir um sal√°rio v√°lido e um inv√°lido, e exiba os resultados usando os getters."
          ]
        },
        {
          "type": "callout",
          "variant": "info",
          "title": "Sugest√£o de Metodologia Ativa",
          "content": "Realize esta atividade em dupla (*pair programming*). Discutam por que a valida√ß√£o no m√©todo `setSalario` √© importante para a consist√™ncia do sistema. Como essa abordagem ajuda a evitar bugs no futuro?"
        }
      ]
    },
    {
      "type": "checklist",
      "title": "Checklist de Aprendizagem da Aula",
      "items": [
        "Diferenciar os modificadores de acesso `public`, `private` e `protected`.",
        "Explicar o conceito de encapsulamento e sua import√¢ncia.",
        "Implementar encapsulamento usando atributos privados e m√©todos getters/setters p√∫blicos.",
        "Adicionar regras de valida√ß√£o dentro dos m√©todos setters para proteger o estado do objeto."
      ]
    },
    {
      "type": "bibliographyBlock",
      "title": "üìö Bibliografia de Apoio",
      "references": [
        "<strong>DEITEL, Harvey M.; DEITEL, Paul J.</strong> <em>Java: como programar.</em> 8. ed. S√£o Paulo: Pearson Prentice Hall, 2014.",
        "<strong>SCHILDT, Herbert.</strong> <em>Java para iniciantes: crie, compile e execute programas Java rapidamente.</em> 6. ed. Porto Alegre: Bookman, 2015.",
        "<strong>GOODRICH, Michael T.; TAMASSIA, Roberto.</strong> <em>Estruturas de dados e algoritmos em Java.</em> 5. ed. Porto Alegre: Bookman, 2013."
      ]
    }
  ]
}

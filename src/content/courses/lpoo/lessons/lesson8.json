{
  "id": "lesson8",
  "title": "Aula 8: Tratamento de Exce√ß√µes",
  "objective": "",
  "content": [
    {
      "type": "legacySection",
      "id": "ementa",
      "title": "Contextualiza√ß√£o da Aula Pr√°tica",
      "html": "<p> Chegamos a um ponto crucial da disciplina. Ap√≥s estudarmos os pilares da POO de forma isolada ‚Äî Encapsulamento, Heran√ßa, Polimorfismo, Classes Abstratas e Interfaces ‚Äî esta aula tem como objetivo conectar todos esses conceitos. Atrav√©s da constru√ß√£o de um projeto pr√°tico e guiado, um sistema banc√°rio simplificado, vamos materializar a teoria e entender como esses pilares trabalham juntos para criar um software organizado, coeso e extens√≠vel. Esta √© a aula onde a \"m√°gica\" da POO acontece, transformando conceitos te√≥ricos em c√≥digo funcional e bem estruturado. </p>"
    },
    {
      "type": "legacySection",
      "id": "plano-aula",
      "title": "Plano da Aula Pr√°tica (2 h/a)",
      "html": "<div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"book-open\">üìñ</span>CONTE√öDO </h3> <p> Aplica√ß√£o pr√°tica integrada de Encapsulamento, Heran√ßa, Classes Abstratas, Polimorfismo e Interfaces em um √∫nico projeto. </p> </div> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"bullseye\">üéØ</span>OBJETIVO </h3> <p> Desenvolver um pequeno sistema do zero, aplicando os pilares da POO para resolver um problema, refor√ßando a conex√£o entre teoria e pr√°tica. </p> </div> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"gears\">‚öôÔ∏è</span>METODOLOGIA </h3> <p> Aula de laborat√≥rio com desenvolvimento de projeto guiado (live coding), incentivando a pr√°tica de *pair programming* entre os alunos. </p> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "projeto",
      "title": "üéØ O Projeto: Sistema Banc√°rio Simplificado",
      "html": "<div data-legacy-card=\"\"> <h3> Descri√ß√£o do Problema </h3> <p> Precisamos modelar um sistema para um banco que trabalha com diferentes tipos de contas. Por enquanto, teremos <strong>Conta Corrente</strong> e <strong>Conta Poupan√ßa</strong>. Ambas as contas possuem um n√∫mero, um titular e um saldo. Ambas permitem depositar e sacar dinheiro. No entanto, elas t√™m regras diferentes: </p> <ul> <li> Uma <strong>Conta Corrente</strong> cobra uma pequena taxa a cada saque. </li> <li> Uma <strong>Conta Poupan√ßa</strong> n√£o cobra taxa de saque, mas n√£o pode ficar com saldo negativo. </li> <li> Al√©m disso, a <strong>Conta Corrente</strong> √© um servi√ßo tribut√°vel, ou seja, paga um imposto anual, enquanto a Conta Poupan√ßa √© isenta. </li> </ul> </div>"
    },
    {
      "type": "legacySection",
      "id": "roteiro-pratico",
      "title": "üõ†Ô∏è Roteiro da Atividade Pr√°tica (Live Coding)",
      "html": "<!-- Etapa 1 --> <div data-legacy-card=\"\"> <h3> Etapa 1: Planejamento e UML </h3> <p> Antes de codificar, vamos desenhar um diagrama de classes UML simples para visualizar a estrutura do nosso sistema. </p> <div> <p> <strong>Interface:</strong> Tributavel { +getValorImposto(): double } </p> <p> <strong>Classe Abstrata:</strong> Conta { -numero: int; -titular: String; #saldo: double; +sacar(): boolean; ... } </p> <p> |--&gt; <strong>Classe:</strong> ContaCorrente (herda de Conta, implementa Tributavel) </p> <p> |--&gt; <strong>Classe:</strong> ContaPoupanca (herda de Conta) </p> </div> </div> <!-- Etapa 2 --> <div data-legacy-card=\"\"> <h3> Etapa 2: A Classe Abstrata <code-text>Conta</code-text> </h3> <p> Crie a classe <code-text>Conta</code-text>. Ela deve conter os atributos e m√©todos comuns a todas as contas. O m√©todo <code-text>sacar</code-text> deve ser abstrato. </p> </div> <!-- Etapa 3 --> <div data-legacy-card=\"\"> <h3> Etapa 3: A Interface <code-text>Tributavel</code-text> </h3> <p> Crie a interface <code-text>Tributavel</code-text>. Ela deve definir o \"contrato\" para qualquer classe que precise calcular impostos, declarando o m√©todo <code-text>getValorImposto</code-text>. </p> </div> <!-- Etapa 4 --> <div data-legacy-card=\"\"> <h3> Etapa 4: As Classes Concretas <code-text>ContaCorrente</code-text> e <code-text>ContaPoupanca</code-text> </h3> <p> Crie as duas subclasses. Elas devem herdar de <code-text>Conta</code-text> e implementar o m√©todo abstrato <code-text>sacar</code-text> com suas regras espec√≠ficas. A <code-text>ContaCorrente</code-text> tamb√©m deve implementar a interface <code-text>Tributavel</code-text>. </p> </div> <!-- Etapa 5 --> <div data-legacy-card=\"\"> <h3> Etapa 5: Testando Tudo na Classe <code-text>Banco</code-text> </h3> <p> Crie uma classe <code-text>Banco</code-text> com um m√©todo <code-text>main</code-text>. Nela, instancie objetos de <code-text>ContaCorrente</code-text> e <code-text>ContaPoupanca</code-text>, realize dep√≥sitos e saques, e imprima os saldos para verificar se as regras de neg√≥cio est√£o funcionando corretamente. </p> </div> <!-- Desafios Adicionais --> <div data-legacy-card=\"\"> <h4> Desafios Adicionais (Opcional) </h4> <ul> <li> <strong>Transfer√™ncia:</strong> Adicione um m√©todo <code-text>transferir(double valor, Conta destino)</code-text> na classe <code-text>Conta</code-text>. Ele deve sacar de uma conta e depositar na outra. </li> <li> <strong>Gerenciador de Impostos:</strong> Crie uma classe <code-text>GerenciadorDeImposto</code-text> com um m√©todo <code-text>calculaTotal(Tributavel t)</code-text> que recebe um objeto tribut√°vel e exibe o imposto devido. </li> </ul> </div>"
    },
    {
      "type": "legacySection",
      "id": "solucao",
      "title": "üí° Solu√ß√£o Proposta",
      "html": "<div data-legacy-card=\"\"> <details> <summary>Classe Abstrata <code-text>Conta.java</code-text></summary> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo da classe abstrata Conta\"> Copiar </button> <pre><code>\npublic abstract class Conta { private int numero; private String titular; protected double saldo; public Conta(int numero, String titular) { this.numero = numero; this.titular = titular; } public void depositar(double valor) { if (valor &gt; 0) { this.saldo += valor; } } public abstract boolean sacar(double valor); public double getSaldo() { return this.saldo; } public String getTitular() { return this.titular; }\n} </code></pre> </div> </details> <details> <summary>Interface <code-text>Tributavel.java</code-text></summary> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo da interface Tributavel\"> Copiar </button> <pre><code>\npublic interface Tributavel { double getValorImposto();\n} </code></pre> </div> </details> <details> <summary> Classes Concretas: <code-text>ContaCorrente.java</code-text> e <code-text>ContaPoupanca.java</code-text> </summary> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo das classes concretas\"> Copiar </button> <pre><code>\npublic class ContaCorrente extends Conta implements Tributavel { public ContaCorrente(int numero, String titular) { super(numero, titular); } @Override public boolean sacar(double valor) { double taxa = 0.50; if (super.saldo &gt;= valor + taxa) { super.saldo -= (valor + taxa); return true; } return false; } @Override public double getValorImposto() { return super.saldo * 0.01; }\n} public class ContaPoupanca extends Conta { public ContaPoupanca(int numero, String titular) { super(numero, titular); } @Override public boolean sacar(double valor) { if (super.saldo &gt;= valor) { super.saldo -= valor; return true; } return false; }\n} </code></pre> </div> </details> <details> <summary>Classe de Teste <code-text>Banco.java</code-text></summary> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo da classe de teste Banco\"> Copiar </button> <pre><code>\npublic class Banco { public static void main(String[] args) { ContaCorrente cc = new ContaCorrente(101, \"Jo√£o Silva\"); ContaPoupanca cp = new ContaPoupanca(202, \"Maria Santos\"); cc.depositar(1000.0); cp.depositar(500.0); cc.sacar(200.0); cp.sacar(100.0); System.out.println(\"Saldo CC: R$ \" + cc.getSaldo()); System.out.println(\"Saldo CP: R$ \" + cp.getSaldo()); Tributavel t = cc; System.out.println(\"Imposto da CC: R$ \" + t.getValorImposto()); }\n} </code></pre> </div> </details> </div>"
    },
    {
      "type": "legacySection",
      "id": "checklist",
      "title": "‚úÖChecklist da Aula Pr√°tica",
      "html": "<div data-legacy-card=\"\"> <p>Ao final desta aula, voc√™ deve ter aplicado e entendido como:</p> <ul> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Usar uma <strong>classe abstrata</strong> para definir um modelo comum. </li> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Proteger dados com <strong>encapsulamento</strong> (<code-text>private</code-text>/<code-text>protected</code-text>). </li> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Especializar classes usando <strong>heran√ßa</strong> (<code-text>extends</code-text>). </li> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Criar comportamentos espec√≠ficos com <strong>polimorfismo</strong> e sobrescrita de m√©todos. </li> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Adicionar \"capacidades\" a classes com <strong>interfaces</strong>. </li> </ul> </div>"
    },
    {
      "type": "legacySection",
      "id": "bibliografia",
      "title": "üìö Bibliografia de Apoio",
      "html": "<div data-legacy-card=\"\"> <p> <strong>DEITEL, Harvey M.; DEITEL, Paul J.</strong> <em>Java: como programar.</em> 8. ed. S√£o Paulo: Pearson Prentice Hall, 2014. </p> <p> <strong>SCHILDT, Herbert.</strong> <em>Java para iniciantes: crie, compile e execute programas Java rapidamente.</em> 6. ed. Porto Alegre: Bookman, 2015. </p> </div>"
    }
  ]
}

{
  "id": "lesson8",
  "title": "Aula 8: Projeto Pr√°tico - Sistema Banc√°rio",
  "objective": "Desenvolver um pequeno sistema do zero, aplicando os pilares da POO para resolver um problema, refor√ßando a conex√£o entre teoria e pr√°tica.",
  "content": [
    {
      "type": "contentBlock",
      "title": "Contextualiza√ß√£o da Aula Pr√°tica",
      "content": [
        {
          "type": "paragraph",
          "text": "Chegamos a um ponto crucial da disciplina. Ap√≥s estudarmos os pilares da POO de forma isolada ‚Äî Encapsulamento, Heran√ßa, Polimorfismo, Classes Abstratas e Interfaces ‚Äî esta aula tem como objetivo conectar todos esses conceitos. Atrav√©s da constru√ß√£o de um projeto pr√°tico e guiado, um sistema banc√°rio simplificado, vamos materializar a teoria e entender como esses pilares trabalham juntos para criar um software organizado, coeso e extens√≠vel. Esta √© a aula onde a \"m√°gica\" da POO acontece, transformando conceitos te√≥ricos em c√≥digo funcional e bem estruturado."
        }
      ]
    },
    {
      "type": "lessonPlan",
      "title": "Plano da Aula Pr√°tica (2 h/a)",
      "cards": [
        {
          "icon": "book-open",
          "title": "CONTE√öDO",
          "content": "Aplica√ß√£o pr√°tica integrada de Encapsulamento, Heran√ßa, Classes Abstratas, Polimorfismo e Interfaces em um √∫nico projeto."
        },
        {
          "icon": "bullseye",
          "title": "OBJETIVO",
          "content": "Desenvolver um pequeno sistema do zero, aplicando os pilares da POO para resolver um problema, refor√ßando a conex√£o entre teoria e pr√°tica."
        },
        {
          "icon": "gears",
          "title": "METODOLOGIA",
          "content": "Aula de laborat√≥rio com desenvolvimento de projeto guiado (live coding), incentivando a pr√°tica de *pair programming* entre os alunos."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "üéØ O Projeto: Sistema Banc√°rio Simplificado",
      "content": [
        {
          "type": "paragraph",
          "text": "Precisamos modelar um sistema para um banco que trabalha com diferentes tipos de contas. Por enquanto, teremos <strong>Conta Corrente</strong> e <strong>Conta Poupan√ßa</strong>. Ambas as contas possuem um n√∫mero, um titular e um saldo. Ambas permitem depositar e sacar dinheiro. No entanto, elas t√™m regras diferentes:"
        },
        {
          "type": "list",
          "items": [
            "Uma <strong>Conta Corrente</strong> cobra uma pequena taxa a cada saque.",
            "Uma <strong>Conta Poupan√ßa</strong> n√£o cobra taxa de saque, mas n√£o pode ficar com saldo negativo.",
            "Al√©m disso, a <strong>Conta Corrente</strong> √© um servi√ßo tribut√°vel, ou seja, paga um imposto anual, enquanto a Conta Poupan√ßa √© isenta."
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "üõ†Ô∏è Roteiro da Atividade Pr√°tica (Live Coding)",
      "content": [
        {
          "type": "contentBlock",
          "title": "Etapa 1: Planejamento e UML",
          "content": [
            {
              "type": "paragraph",
              "text": "Antes de codificar, vamos desenhar um diagrama de classes UML simples para visualizar a estrutura do nosso sistema."
            },
            {
              "type": "paragraph",
              "text": "<strong>Interface:</strong> Tributavel { +getValorImposto(): double }<br><strong>Classe Abstrata:</strong> Conta { -numero: int; -titular: String; #saldo: double; +sacar(): boolean; ... }<br>|--&gt; <strong>Classe:</strong> ContaCorrente (herda de Conta, implementa Tributavel)<br>|--&gt; <strong>Classe:</strong> ContaPoupanca (herda de Conta)"
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "Etapa 2: A Classe Abstrata Conta",
          "content": [
            {
              "type": "paragraph",
              "text": "Crie a classe `Conta`. Ela deve conter os atributos e m√©todos comuns a todas as contas. O m√©todo `sacar` deve ser abstrato."
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "Etapa 3: A Interface Tributavel",
          "content": [
            {
              "type": "paragraph",
              "text": "Crie a interface `Tributavel`. Ela deve definir o \"contrato\" para qualquer classe que precise calcular impostos, declarando o m√©todo `getValorImposto`."
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "Etapa 4: As Classes Concretas ContaCorrente e ContaPoupanca",
          "content": [
            {
              "type": "paragraph",
              "text": "Crie as duas subclasses. Elas devem herdar de `Conta` e implementar o m√©todo abstrato `sacar` com suas regras espec√≠ficas. A `ContaCorrente` tamb√©m deve implementar a interface `Tributavel`."
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "Etapa 5: Testando Tudo na Classe Banco",
          "content": [
            {
              "type": "paragraph",
              "text": "Crie uma classe `Banco` com um m√©todo `main`. Nela, instancie objetos de `ContaCorrente` e `ContaPoupanca`, realize dep√≥sitos e saques, e imprima os saldos para verificar se as regras de neg√≥cio est√£o funcionando corretamente."
            }
          ]
        },
        {
          "type": "callout",
          "variant": "good-practice",
          "title": "Desafios Adicionais (Opcional)",
          "content": [
            {
              "type": "list",
              "items": [
                "<strong>Transfer√™ncia:</strong> Adicione um m√©todo `transferir(double valor, Conta destino)` na classe `Conta`. Ele deve sacar de uma conta e depositar na outra.",
                "<strong>Gerenciador de Impostos:</strong> Crie uma classe `GerenciadorDeImposto` com um m√©todo `calculaTotal(Tributavel t)` que recebe um objeto tribut√°vel e exibe o imposto devido."
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "accordion",
      "title": "üí° Solu√ß√£o Proposta",
      "items": [
        {
          "title": "Classe Abstrata Conta.java",
          "content": {
            "type": "code",
            "language": "java",
            "code": "public abstract class Conta {\n    private int numero;\n    private String titular;\n    protected double saldo;\n\n    public Conta(int numero, String titular) {\n        this.numero = numero;\n        this.titular = titular;\n    }\n\n    public void depositar(double valor) {\n        if (valor > 0) {\n            this.saldo += valor;\n        }\n    }\n\n    public abstract boolean sacar(double valor);\n\n    public double getSaldo() {\n        return this.saldo;\n    }\n\n    public String getTitular() {\n        return this.titular;\n    }\n}"
          }
        },
        {
          "title": "Interface Tributavel.java",
          "content": {
            "type": "code",
            "language": "java",
            "code": "public interface Tributavel {\n    double getValorImposto();\n}"
          }
        },
        {
          "title": "Classes Concretas: ContaCorrente.java e ContaPoupanca.java",
          "content": {
            "type": "code",
            "language": "java",
            "code": "public class ContaCorrente extends Conta implements Tributavel {\n    public ContaCorrente(int numero, String titular) {\n        super(numero, titular);\n    }\n\n    @Override\n    public boolean sacar(double valor) {\n        double taxa = 0.50;\n        if (super.saldo >= valor + taxa) {\n            super.saldo -= (valor + taxa);\n            return true;\n        }\n        return false;\n    }\n\n    @Override\n    public double getValorImposto() {\n        return super.saldo * 0.01;\n    }\n}\n\npublic class ContaPoupanca extends Conta {\n    public ContaPoupanca(int numero, String titular) {\n        super(numero, titular);\n    }\n\n    @Override\n    public boolean sacar(double valor) {\n        if (super.saldo >= valor) {\n            super.saldo -= valor;\n            return true;\n        }\n        return false;\n    }\n}"
          }
        },
        {
          "title": "Classe de Teste Banco.java",
          "content": {
            "type": "code",
            "language": "java",
            "code": "public class Banco {\n    public static void main(String[] args) {\n        ContaCorrente cc = new ContaCorrente(101, \"Jo√£o Silva\");\n        ContaPoupanca cp = new ContaPoupanca(202, \"Maria Santos\");\n\n        cc.depositar(1000.0);\n        cp.depositar(500.0);\n\n        cc.sacar(200.0);\n        cp.sacar(100.0);\n\n        System.out.println(\"Saldo CC: R$ \" + cc.getSaldo());\n        System.out.println(\"Saldo CP: R$ \" + cp.getSaldo());\n        \n        Tributavel t = cc;\n        System.out.println(\"Imposto da CC: R$ \" + t.getValorImposto());\n    }\n}"
          }
        }
      ]
    },
    {
      "type": "checklist",
      "title": "Checklist da Aula Pr√°tica",
      "items": [
        "Usar uma <strong>classe abstrata</strong> para definir um modelo comum.",
        "Proteger dados com <strong>encapsulamento</strong> (`private`/`protected`).",
        "Especializar classes usando <strong>heran√ßa</strong> (`extends`).",
        "Criar comportamentos espec√≠ficos com <strong>polimorfismo</strong> e sobrescrita de m√©todos.",
        "Adicionar \"capacidades\" a classes com <strong>interfaces</strong>."
      ]
    },
    {
      "type": "bibliographyBlock",
      "title": "üìö Bibliografia de Apoio",
      "references": [
        "<strong>DEITEL, Harvey M.; DEITEL, Paul J.</strong> <em>Java: como programar.</em> 8. ed. S√£o Paulo: Pearson Prentice Hall, 2014.",
        "<strong>SCHILDT, Herbert.</strong> <em>Java para iniciantes: crie, compile e execute programas Java rapidamente.</em> 6. ed. Porto Alegre: Bookman, 2015."
      ]
    }
  ]
}

{
  "id": "lesson3",
  "title": "Aula 3: Construtores e M√©todos",
  "objective": "",
  "content": [
    {
      "type": "legacySection",
      "id": "ementa",
      "title": "Ementa e Contextualiza√ß√£o",
      "html": "<p> Na aula anterior, vimos a estrutura b√°sica de um programa. Agora, vamos mergulhar no cora√ß√£o da Programa√ß√£o Orientada a Objetos. Os objetos s√£o a base de tudo o que construiremos. Entender como modelar entidades do mundo real (um produto, um cliente, uma transa√ß√£o) em objetos com estado (atributos) e comportamento (m√©todos) √© a habilidade fundamental que nos permite criar software modular, reutiliz√°vel e f√°cil de manter. </p>"
    },
    {
      "type": "legacySection",
      "id": "plano-aula",
      "title": "Plano da Aula",
      "html": "<div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"book-open\">üìñ</span>CONTE√öDO </h3> <p> Defini√ß√£o de objetos, atributos (estado) e m√©todos (comportamento). Rela√ß√£o entre classes e inst√¢ncias. </p> </div> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"bullseye\">üéØ</span>OBJETIVO </h3> <p> Modelar e implementar classes com atributos e m√©todos, e instanciar objetos a partir delas, manipulando seu estado e comportamento. </p> </div> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"gears\">‚öôÔ∏è</span>METODOLOGIA </h3> <p> Exposi√ß√£o te√≥rica com analogias, modelagem visual, codifica√ß√£o de exemplos pr√°ticos e atividade guiada. </p> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "teoria",
      "title": "üß± Os Blocos de Constru√ß√£o da POO",
      "html": "<!-- Classes e Objetos --> <div data-legacy-grid=\"\"> <h3> 1. Classes, Objetos e Inst√¢ncias </h3> <p> Segundo <strong>Deitel &amp; Deitel (Java: Como Programar)</strong>, <em>\"uma classe descreve os atributos e comportamentos de um conjunto de objetos semelhantes; cada objeto √© uma inst√¢ncia dessa classe.\"</em> </p> <p> A rela√ß√£o entre classe e objeto √© como a de um <strong>molde</strong> e o <strong>item criado a partir dele</strong>. A classe define a estrutura e comportamento; o objeto √© a concretiza√ß√£o que usamos no c√≥digo. </p> <ul> <li> <strong>Classe:</strong> O projeto, a planta baixa. Define atributos e m√©todos que todos os objetos daquele tipo ter√£o. </li> <li> <strong>Objeto (ou Inst√¢ncia):</strong> Uma c√≥pia √∫nica criada a partir da classe. Cada objeto tem seu pr√≥prio estado. </li> </ul> <div data-legacy-card=\"\"> <img src=\"https://placehold.co/400x250/e2e8f0/4f46e5?text=Classe+Molde\" alt=\"Diagrama de Classe\"> <img src=\"https://placehold.co/400x250/e2e8f0/16a34a?text=Objetos+Instanciados\" alt=\"Objetos criados a partir da classe\"> </div> <!-- Diagrama UML simples --> <div data-legacy-card=\"\"> <div> <div> Carro </div> <div> - cor : String <br> - modelo : String <br> - ano : int </div> <div> + ligar() : void <br> + acelerar() : void <br> + getVelocidadeAtual() : int </div> </div> </div> <!-- C√≥digo de exemplo --> <div data-legacy-card=\"\"> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo\" title=\"Copiar c√≥digo\"> Copiar </button> <pre><code>\n// Defining a simple class Car\npublic class Car { String color; String model;\n} // Creating objects (instances) in the main method\npublic class TestCar { public static void main(String[] args) { Car car1 = new Car(); car1.color = \"Red\"; car1.model = \"Sedan\"; Car car2 = new Car(); car2.color = \"Black\"; car2.model = \"SUV\"; System.out.println(car1.color); // Prints \"Red\" }\n} </code></pre> </div> </div> <!-- Atributos --> <div data-legacy-grid=\"\"> <h3> 2. Atributos: O Estado de um Objeto </h3> <p> Atributos s√£o <strong>vari√°veis internas da classe</strong> que guardam dados. Eles representam o <strong>estado</strong> de cada objeto. </p> <p> Exemplo: A classe <code-text>Carro</code-text> pode ter os atributos <code-text>cor</code-text>, <code-text>modelo</code-text> e <code-text>ano</code-text>. Cada objeto ter√° seus pr√≥prios valores. </p> <div data-legacy-card=\"\"> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo\" title=\"Copiar c√≥digo\"> Copiar </button> <pre><code>\npublic class Carro { String cor; String modelo; int ano;\n} Carro meuCarro = new Carro();\nmeuCarro.cor = \"Vermelho\"; // State of the object </code></pre> </div> <div data-legacy-card=\"\"> <h4>üí° Dica:</h4> <p> Atributos s√£o geralmente <strong>privados</strong> em boas pr√°ticas de POO e acessados via m√©todos (getters/setters) para respeitar o encapsulamento. </p> </div> </div> <!-- M√©todos --> <div data-legacy-grid=\"\"> <h3> 3. M√©todos: O Comportamento de um Objeto </h3> <p> M√©todos s√£o <strong>fun√ß√µes dentro da classe</strong> que definem o comportamento do objeto. Eles podem ler/modificar atributos e interagir com outros objetos. </p> <p> Na classe <code-text>Carro</code-text>, m√©todos como <code-text>ligar()</code-text> ou <code-text>acelerar()</code-text> alteram o estado do objeto. </p> <div data-legacy-card=\"\"> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo\" title=\"Copiar c√≥digo\"> Copiar </button> <pre><code>\npublic class Carro { String modelo; int velocidade; public void acelerar() { velocidade += 10; System.out.println(modelo + \" acelerou. Velocidade: \" + velocidade); }\n} Carro carro1 = new Carro();\ncarro1.modelo = \"Sedan\";\ncarro1.acelerar(); // Output: Sedan acelerou. Velocidade: 10 </code></pre> </div> <div data-legacy-card=\"\"> <h4>üìå Exerc√≠cio R√°pido:</h4> <p> Adicione um m√©todo <code-text>frear()</code-text> que reduza a velocidade em 5 e teste a chamada em dois objetos diferentes. </p> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "pratica",
      "title": "üíª Exemplos Pr√°ticos: Modelando um Produto",
      "html": "<div data-legacy-card=\"\"> <h3> Exemplo 1: Criando a Classe <code-text>Produto</code-text> </h3> <p> Vamos modelar um produto de uma loja virtual. A classe ter√° atributos para nome, pre√ßo e um m√©todo para exibir suas informa√ß√µes. </p> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo\" title=\"Copiar c√≥digo\"> Copiar </button> <pre><code>\n/** * Represents a product in an e-commerce system. */\npublic class Produto { // Attributes that define the state of a product. String nome; double preco; int quantidadeEmEstoque; /** * Displays the product's data sheet. * This method accesses the object's own attributes. */ public void exibirFichaTecnica() { System.out.println(\"---- FICHA T√âCNICA ----\"); System.out.println(\"Produto: \" + nome); System.out.println(\"Pre√ßo: R$ \" + preco); System.out.println(\"Estoque: \" + quantidadeEmEstoque + \" unidades\"); System.out.println(\"-----------------------\"); }\n} </code></pre> </div> </div> <div data-legacy-card=\"\"> <h3> Exemplo 2: Criando e Usando Objetos <code-text>Produto</code-text> </h3> <p> Agora, em uma classe <code-text>Loja</code-text>, vamos criar inst√¢ncias de <code-text>Produto</code-text> e interagir com elas. </p> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo\" title=\"Copiar c√≥digo\"> Copiar </button> <pre><code>\npublic class Loja { public static void main(String[] args) { // Creating the first product object (instance of Produto). Produto produto1 = new Produto(); produto1.nome = \"Smartphone Modelo X\"; produto1.preco = 1999.90; produto1.quantidadeEmEstoque = 50; // Creating the second product object. Produto produto2 = new Produto(); produto2.nome = \"Notebook Gamer Y\"; produto2.preco = 4599.00; produto2.quantidadeEmEstoque = 25; // Calling the method on each object. System.out.println(\"Produtos dispon√≠veis:\"); produto1.exibirFichaTecnica(); produto2.exibirFichaTecnica(); }\n} </code></pre> </div> </div> <div data-legacy-card=\"\"> <h3> Exemplo 3: M√©todo com Par√¢metro e Retorno </h3> <p> Vamos adicionar um m√©todo √† classe <code-text>Produto</code-text> que calcula o pre√ßo com desconto. Ele recebe o percentual de desconto como par√¢metro e retorna o novo pre√ßo. </p> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo\" title=\"Copiar c√≥digo\"> Copiar </button> <pre><code>\n// Add this method inside your Produto class.\n/** * Calculates the product price with a given discount. * @param percentualDesconto The discount percentage (e.g., 10 for 10%). * @return The new price after applying the discount. */\npublic double calcularPrecoComDesconto(double percentualDesconto) { double valorDoDesconto = this.preco * (percentualDesconto / 100.0); return this.preco - valorDoDesconto;\n} // How to use it in the main method of Loja class:\n// double precoCom10porcentoOff = produto1.calcularPrecoComDesconto(10.0);\n// System.out.println(\"Pre√ßo com desconto: R$ \" + precoCom10porcentoOff); </code></pre> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "recursos-auxiliares",
      "title": "üé• V√≠deos e Links de Apoio",
      "html": "<!-- V√≠deos --> <div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <h3> Criando Classes e Objetos em Java (Curso POO Java) </h3> <div style=\"aspect-ratio: 16/9\"> </div> </div> <div data-legacy-card=\"\"> <h3> Introduction to Classes and Objects in Java </h3> <div style=\"aspect-ratio: 16/9\"> </div> </div> </div> <!-- Leituras --> <div data-legacy-card=\"\"> <h3> üìñ Leituras Recomendadas </h3> <ul> <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/concepts/object.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"book-bookmark\">üìò</span>What Is an Object? (Documenta√ß√£o Oficial da Oracle) </a> <p> A fonte oficial para entender o conceito de objeto em Java diretamente da Oracle. </p> </li> <li> <a href=\"https://www.w3schools.com/java/java_classes.asp\" target=\"_blank\" rel=\"noopener noreferrer\"> Java Classes and Objects (W3Schools) </a> <p> Tutorial simples e pr√°tico com exemplos b√°sicos para iniciantes. </p> </li> </ul> </div>"
    },
    {
      "type": "legacySection",
      "id": "ted",
      "title": "Atividade Pr√°tica (TED): Modelando Alunos e Cursos",
      "html": "<p> Vamos praticar a modelagem criando um sistema acad√™mico simples. O objetivo √© representar um <code-text>Aluno</code-text> e o <code-text>Curso</code-text> em que ele est√° matriculado. </p> <ol> <li> <strong>Crie a classe <code-text>Curso.java</code-text></strong> com os atributos <code-text>String nome</code-text> e <code-text>int duracaoHoras</code-text>. </li> <li> <strong>Crie a classe <code-text>Aluno.java</code-text></strong> com os atributos <code-text>String nome</code-text>, <code-text>String matricula</code-text> e <code-text>Curso cursoMatriculado</code-text>. Note que um atributo pode ser outro objeto! </li> <li> Adicione um m√©todo <code-text>void exibirRelatorio()</code-text> na classe <code-text>Aluno</code-text> que imprima o nome do aluno, sua matr√≠cula e o nome do curso em que est√° matriculado. </li> <li> <strong>Crie uma classe <code-text>Secretaria.java</code-text> com um m√©todo <code-text>main</code-text></strong> para testar. Nela, crie um objeto <code-text>Curso</code-text> (ex: \"An√°lise e Desenvolvimento de Sistemas\") e um objeto <code-text>Aluno</code-text>. Associe o curso ao aluno e chame o m√©todo <code-text>exibirRelatorio()</code-text>. </li> </ol>"
    },
    {
      "type": "legacySection",
      "id": "checklist",
      "title": "‚úÖChecklist de Aprendizagem da Aula",
      "html": "<div data-legacy-card=\"\"> <p>Ao final desta aula, voc√™ deve ser capaz de:</p> <ul> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Diferenciar claramente os conceitos de Classe e Objeto. </li> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Modelar uma entidade do mundo real em uma Classe Java com atributos e m√©todos. </li> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Criar m√∫ltiplos objetos (inst√¢ncias) a partir de uma mesma classe. </li> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Implementar e chamar m√©todos que recebem par√¢metros e retornam valores. </li> </ul> </div>"
    },
    {
      "type": "legacySection",
      "id": "bibliografia",
      "title": "üìö Bibliografia de Apoio",
      "html": "<div data-legacy-card=\"\"> <p> <strong>DEITEL, Harvey M.; DEITEL, Paul J.</strong> <em>Java: como programar.</em> 8. ed. S√£o Paulo: Pearson Prentice Hall, 2014. </p> <p> <strong>SCHILDT, Herbert.</strong> <em>Java para iniciantes: crie, compile e execute programas Java rapidamente.</em> 6. ed. Porto Alegre: Bookman, 2015. </p> <p> <strong>GOODRICH, Michael T.; TAMASSIA, Roberto.</strong> <em>Estruturas de dados e algoritmos em Java.</em> 5. ed. Porto Alegre: Bookman, 2013. </p> </div>"
    }
  ]
}

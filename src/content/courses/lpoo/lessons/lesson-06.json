{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-06",
  "title": "Aula 6: Aprofundando em Herança e Polimorfismo",
  "summary": "Explora boas práticas de herança, sobrescrita de métodos, uso de `@Override` e polimorfismo em coleções e serviços.",
  "objective": "Projetar hierarquias flexíveis que suportem extensão segura e testes automatizados.",
  "objectives": [
    "Implementar sobrescrita controlada com `@Override` e chamadas a `super`.",
    "Utilizar polimorfismo para reduzir condicionais e melhorar extensibilidade.",
    "Configurar testes unitários que demonstrem comportamento polimórfico."
  ],
  "competencies": [
    "Design orientado a objetos",
    "Qualidade de código e testes",
    "Refatoração sustentável"
  ],
  "skills": [
    "Aplicar `final` para proteger classes e métodos de alterações indevidas.",
    "Criar hierarquias que suportem injeção de dependências com interfaces.",
    "Utilizar coleções de supertipo e iterar chamando métodos polimórficos."
  ],
  "outcomes": [
    "Teste automatizado validando polimorfismo.",
    "Refatoração de condicionais para uso de herança/strategies.",
    "Checklist de revisão antes de introduzir nova subclasse."
  ],
  "prerequisites": [
    "Domínio dos conceitos básicos de herança (aula 05).",
    "Conhecimento de estruturas de decisão e loops."
  ],
  "tags": ["poo", "polimorfismo", "java"],
  "duration": 120,
  "modality": "in-person",
  "resources": [
    {
      "label": "Artigo Baeldung sobre Polimorfismo",
      "type": "article",
      "url": "https://www.baeldung.com/java-polymorphism"
    },
    {
      "label": "JUnit 5 User Guide",
      "type": "documentation",
      "url": "https://junit.org/junit5/docs/current/user-guide/"
    },
    {
      "label": "Exercício: Refatoração orientada a objetos",
      "type": "exercise",
      "url": "https://edu.local/courses/lpoo/exercises/refactoring"
    },
    {
      "label": "Oracle Developer Live – Herança e Polimorfismo em Profundidade",
      "type": "video",
      "url": "https://www.youtube.com/watch?v=fxQ6jF7zpHg",
      "duration": "PT36M27S",
      "studyObjective": "Ver um exemplo completo de hierarquia extensível, com polimorfismo dinâmico aplicado a um caso real."
    }
  ],
  "bibliography": [
    "MARTIN, R. Agile Software Development: Principles, Patterns, and Practices. 2. ed. Prentice Hall, 2022.",
    "ROBERTS, D. et al. Refactoring to Patterns. Pearson, 2021."
  ],
  "assessment": {
    "type": "practice",
    "description": "Laboratório avaliativo substituindo condicionais por polimorfismo e cobrindo o fluxo com testes unitários.",
    "rubric": "Código sem `instanceof` desnecessário, testes executando com 100% de sucesso e relatório explicando decisões."
  },
  "content": [
    {
      "type": "lessonPlan",
      "title": "Plano da aula",
      "unit": {
        "title": "Unidade II — Polimorfismo e extensibilidade",
        "content": "Aprimorar hierarquias implementando comportamentos especializados e validando por testes."
      },
      "cards": [
        {
          "icon": "code",
          "title": "Sobrescrita consciente",
          "content": "Usar `@Override` como contrato e garantir a compatibilidade Liskov."
        },
        {
          "icon": "database",
          "title": "Polimorfismo",
          "content": "Trabalhar com coleções e serviços que aceitam o tipo mais genérico possível."
        },
        {
          "icon": "check-circle",
          "title": "Testes",
          "content": "Automatizar cenários com JUnit para validar substituições."
        }
      ]
    },
    {
      "type": "flightPlan",
      "title": "Plano de voo (2h00)",
      "items": [
        "(15 min) Revisão das hierarquias criadas na aula anterior.",
        "(25 min) Mini aula: princípios LSP e uso de `final`.",
        "(25 min) Laboratório: refatorando condicionais para polimorfismo.",
        "(20 min) Pair programming: implementando testes de regressão com JUnit.",
        "(20 min) Debate: composição vs herança em cenários reais.",
        "(15 min) Síntese e encaminhamento da tarefa assíncrona."
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "Sinal amarelo",
      "content": [
        {
          "type": "paragraph",
          "text": "Se sua hierarquia depende de muitos `instanceof`, talvez esteja faltando uma interface ou método abstrato."
        }
      ]
    },
    {
      "type": "cardGrid",
      "title": "Formas de polimorfismo em Java",
      "columns": 3,
      "cards": [
        {
          "title": "Sobrescrita",
          "subtitle": "Runtime",
          "tone": "info",
          "content": "Subclasses redefinem métodos da superclasse mantendo assinatura compatível."
        },
        {
          "title": "Sobrecarga",
          "subtitle": "Compile-time",
          "tone": "neutral",
          "content": "Múltiplas assinaturas com o mesmo nome oferecem alternativas de uso."
        },
        {
          "title": "Paramétrico",
          "subtitle": "Generics",
          "tone": "success",
          "content": "Coleções aceitam diferentes tipos mantendo segurança por tipo."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Aplicando o princípio de substituição de Liskov",
      "content": [
        {
          "type": "paragraph",
          "text": "Ao substituir uma superclasse por uma subclasse, o comportamento esperado deve permanecer consistente. Violação desse princípio gera bugs sutis."
        },
        {
          "component": "Callout",
          "props": {
            "variant": "good-practice",
            "title": "Checklist",
            "content": "Subclasses nunca devem restringir contratos (pré-condições) ou deixar de cumprir garantias (pós-condições)."
          }
        }
      ]
    },
    {
      "type": "checklist",
      "title": "Antes de criar uma nova subclasse",
      "items": [
        "Existe relação clara do tipo `é-um`?",
        "Superclasse define comportamento padrão reutilizável?",
        "Sobrescrita altera apenas detalhes específicos?",
        "Há testes cobrindo os novos cenários?"
      ]
    }
  ],
  "metadata": {
    "status": "in-review",
    "updatedAt": "2025-02-01T00:00:00.000Z",
    "owners": ["Prof. Tiago Sombra"],
    "sources": ["Plano de ensino LPOO 2025.2", "Oficina de polimorfismo 2023"]
  }
}

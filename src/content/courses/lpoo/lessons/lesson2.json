{
  "id": "lesson2",
  "title": "Aula 2: Estrutura de um Programa Java e Sintaxe B√°sica",
  "objective": "Compreender e aplicar a estrutura e sintaxe fundamental do Java para criar programas simples que interagem com o usu√°rio.",
  "content": [
    {
      "type": "contentBlock",
      "title": "Ementa e Contextualiza√ß√£o",
      "content": [
        {
          "type": "callout",
          "variant": "info",
          "content": "**Pr√©-requisito:** Certifique-se de que o `Java JDK` e uma IDE como `Eclipse`, `IntelliJ` ou `NetBeans` est√£o instalados. Esses passos foram abordados na **Aula 1**."
        },
        {
          "type": "paragraph",
          "text": "Antes de construirmos sistemas complexos, precisamos dominar os fundamentos. Nesta aula, vamos dissecar a estrutura de um programa `Java`, entender sua sintaxe e aprender a interagir com o usu√°rio."
        },
        {
          "type": "paragraph",
          "text": "Dominar esses pilares √© essencial para escrever c√≥digo limpo, funcional e leg√≠vel, habilidades que conectam diretamente esta unidade √†s **APS** e ao mercado de trabalho no desenvolvimento de software."
        }
      ]
    },
    {
      "type": "lessonPlan",
      "title": "Plano da Aula",
      "cards": [
        {
          "icon": "book-open",
          "title": "CONTE√öDO",
          "content": "Estrutura de um programa Java, sintaxe b√°sica, m√©todo `main`, tipos primitivos, e entrada/sa√≠da de dados com `Scanner`."
        },
        {
          "icon": "bullseye",
          "title": "OBJETIVO",
          "content": "Compreender e aplicar a estrutura e sintaxe fundamental do Java para criar programas simples que interagem com o usu√°rio."
        },
        {
          "icon": "gears",
          "title": "METODOLOGIA",
          "content": "Aula expositiva, exemplos de c√≥digo comentados, e uma atividade pr√°tica para refor√ßar os conceitos de entrada e sa√≠da."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "üî© A Anatomia de um Programa Java",
      "content": [
        {
          "type": "contentBlock",
          "title": "1. Estrutura Geral de um Arquivo Java",
          "content": [
            {
              "type": "paragraph",
              "text": "Um arquivo `.java` pode conter v√°rias partes. Em programas simples, usamos apenas a classe e o m√©todo `main`, mas √© importante conhecer a estrutura completa:"
            },
            {
              "type": "list",
              "items": [
                "**Package:** Define o pacote da classe. Ex.: `package br.edu.unifametro;`",
                "**Imports:** Traz classes externas. Ex.: `import java.util.Scanner;`",
                "**Classe:** Cont√©m atributos e m√©todos. Ex.: `public class Programa { }`",
                "**M√©todo main:** Ponto de entrada. Ex.: `public static void main(String[] args)`"
              ]
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "2. Estrutura M√≠nima de um Programa",
          "content": [
            {
              "type": "paragraph",
              "text": "Todo programa execut√°vel em `Java` precisa de, no m√≠nimo, uma classe p√∫blica e um m√©todo `main`. Pense na classe como o \"container\" do c√≥digo e no m√©todo `main` como a porta de entrada."
            },
            {
              "type": "list",
              "items": [
                "`public class NomeDaClasse { ... }`: O nome do arquivo deve ser id√™ntico ao da classe.",
                "`{ ... }`: As chaves delimitam blocos de c√≥digo.",
                "`;`: Finaliza uma instru√ß√£o, como um ponto final em uma frase."
              ]
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "3. Tipos de Dados e Sintaxe B√°sica",
          "content": [
            {
              "type": "paragraph",
              "text": "O Java √© uma linguagem fortemente tipada, ou seja, cada vari√°vel precisa ter um tipo definido. Os mais comuns s√£o:"
            },
            {
              "type": "list",
              "items": [
                "`int`: n√∫meros inteiros.",
                "`double`: n√∫meros com ponto flutuante.",
                "`boolean`: valores l√≥gicos (`true` ou `false`).",
                "`char`: um √∫nico caractere.",
                "`String`: sequ√™ncia de caracteres (n√£o √© primitivo, mas usado como tal)."
              ]
            },
            {
              "type": "callout",
              "variant": "good-practice",
              "content": "**Dica:** Use nomes de vari√°veis que descrevam o prop√≥sito. Ex.: `idadeAluno` √© melhor que `x`."
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "4. O M√©todo main",
          "content": [
            {
              "type": "paragraph",
              "text": "A assinatura `public static void main(String[] args)` √© onde tudo come√ßa. A JVM procura por esse m√©todo como ponto de entrada."
            },
            {
              "type": "list",
              "items": [
                "`public`: Acess√≠vel de qualquer lugar.",
                "`static`: Pertence √† classe, n√£o a uma inst√¢ncia.",
                "`void`: N√£o retorna valor.",
                "`String[] args`: Recebe argumentos da linha de comando."
              ]
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "5. Entrada e Sa√≠da de Dados",
          "content": [
            {
              "type": "paragraph",
              "text": "Programas interativos precisam exibir informa√ß√µes e ler dados do usu√°rio:"
            },
            {
              "type": "list",
              "items": [
                "**Sa√≠da:** `System.out.println()` imprime no console.",
                "**Entrada:** A classe `Scanner` l√™ dados do teclado. Exige o import `import java.util.Scanner;`."
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "üíª Exemplos Pr√°ticos",
      "content": [
        {
          "type": "contentBlock",
          "title": "Exemplo 1: O Cl√°ssico \"Hello, World!\"",
          "content": [
            {
              "type": "paragraph",
              "text": "Nosso primeiro programa. Ele apenas imprime uma mensagem no console."
            },
            {
              "type": "code",
              "language": "java",
              "code": "/**\n * A classic \"Hello, World!\" program in Java.\n * This demonstrates the basic structure of a Java class with the main method.\n */\npublic class HelloWorld {\n    public static void main(String[] args) {\n        // Prints the text \"Hello, LPOO World!\" to the console.\n        System.out.println(\"Hello, LPOO World!\");\n        \n        // Using printf for formatted output (no line break by default).\n        System.out.printf(\"Welcome to %s, Aula %d\\n\", \"LPOO\", 2);\n    }\n}"
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "Exemplo 2: Lendo o Nome do Usu√°rio",
          "content": [
            {
              "type": "paragraph",
              "text": "Este programa usa a classe `Scanner` para ler um nome digitado pelo usu√°rio e depois exibe uma sauda√ß√£o personalizada."
            },
            {
              "type": "code",
              "language": "java",
              "code": "// Import the Scanner class from the java.util package to read user input.\nimport java.util.Scanner;\n\n/**\n * A program that reads the user's name and prints a personalized greeting.\n */\npublic class Greeting {\n    public static void main(String[] args) {\n        // Create a Scanner object to read input from the console.\n        Scanner inputReader = new Scanner(System.in);\n\n        System.out.print(\"Please, enter your name: \");\n        // Read the next line entered by the user.\n        String userName = inputReader.nextLine();\n\n        // Print a personalized greeting using printf.\n        System.out.printf(\"Hello, %s! Welcome to LPOO.\\n\", userName);\n\n        // Always close the Scanner to release resources.\n        inputReader.close();\n    }\n}"
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "Exemplo 3: Somando Dois N√∫meros",
          "content": [
            {
              "type": "paragraph",
              "text": "Aqui, lemos dois n√∫meros inteiros, realizamos a soma e exibimos o resultado."
            },
            {
              "type": "code",
              "language": "java",
              "code": "import java.util.Scanner;\n\n/**\n * A program that reads two integers, validates input, and prints their sum.\n */\npublic class SimpleCalculator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter the first number: \");\n        int number1 = scanner.nextInt();\n\n        System.out.print(\"Enter the second number: \");\n        int number2 = scanner.nextInt();\n\n        int sum = number1 + number2;\n\n        // Using printf to format the output.\n        System.out.printf(\"The sum of %d and %d is: %d\\n\", number1, number2, sum);\n\n        // Basic validation example (just a demonstration)\n        if(sum < 0) {\n            System.out.println(\"Note: The sum is negative.\");\n        }\n\n        scanner.close();\n    }\n}"
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Atividade Pr√°tica (TED): Cadastro Simples",
      "content": [
        {
          "type": "paragraph",
          "text": "Vamos criar um programa que simula um cadastro simples, coletando nome e idade do usu√°rio e exibindo uma mensagem formatada. Esta atividade √© o primeiro passo para a APS, onde construiremos sistemas que gerenciam dados."
        },
        {
          "type": "list",
          "items": [
            "Crie uma nova classe chamada `SimpleRegistration.java`.",
            "Dentro do m√©todo `main`, crie um objeto `Scanner` para ler a entrada do teclado.",
            "Pe√ßa para o usu√°rio digitar seu nome completo e armazene em uma vari√°vel `String`.",
            "Em seguida, pe√ßa para o usu√°rio digitar sua idade e armazene em uma vari√°vel `int`.",
            "No final, imprima uma frase formatada no console, como: `Cadastro realizado! Ol√°, [Nome], voc√™ tem [Idade] anos.`",
            "N√£o se esque√ßa de fechar o `Scanner` no final do programa."
          ]
        },
        {
          "type": "callout",
          "variant": "info",
          "title": "Sugest√£o de Metodologia Ativa",
          "content": "Tente resolver esta atividade em dupla (*pair programming*). Um colega digita (\"piloto\") enquanto o outro orienta e revisa (\"co-piloto\"). Troquem de pap√©is no meio da atividade. Isso ajuda a encontrar erros e a aprender mais r√°pido!"
        }
      ]
    },
    {
      "type": "checklist",
      "title": "Checklist de Aprendizagem da Aula",
      "items": [
        "Descrever a estrutura b√°sica de uma classe Java com um m√©todo `main`.",
        "Declarar vari√°veis de tipos primitivos como `String` e `int`.",
        "Usar `System.out.println()` para exibir informa√ß√µes no console.",
        "Utilizar a classe `Scanner` para ler dados do teclado."
      ]
    },
    {
      "type": "bibliographyBlock",
      "title": "üìö Bibliografia de Apoio",
      "references": [
        "**DEITEL, Harvey M.; DEITEL, Paul J.** <em>Java: como programar.</em> 8. ed. S√£o Paulo: Pearson Prentice Hall, 2014.",
        "**SCHILDT, Herbert.** <em>Java para iniciantes: crie, compile e execute programas Java rapidamente.</em> 6. ed. Porto Alegre: Bookman, 2015.",
        "**GOODRICH, Michael T.; TAMASSIA, Roberto.** <em>Estruturas de dados e algoritmos em Java.</em> 5. ed. Porto Alegre: Bookman, 2013."
      ]
    }
  ]
}

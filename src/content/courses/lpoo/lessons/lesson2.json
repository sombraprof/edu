{
  "id": "lesson2",
  "title": "Aula 2: Estrutura de um Programa Java e Sintaxe B√°sica",
  "objective": "",
  "content": [
    {
      "type": "legacySection",
      "id": "ementa",
      "title": "Ementa e Contextualiza√ß√£o",
      "html": "<div data-legacy-card=\"\"> <p> <strong>Pr√©-requisito:</strong> Certifique-se de que o <code-text>Java JDK</code-text> e uma IDE como <code-text>Eclipse</code-text>, <code-text>IntelliJ</code-text> ou <code-text>NetBeans</code-text> est√£o instalados. Esses passos foram abordados na <strong>Aula 1</strong>. </p> </div> <p> Antes de construirmos sistemas complexos, precisamos dominar os fundamentos. Nesta aula, vamos dissecar a estrutura de um programa <code-text>Java</code-text>, entender sua sintaxe e aprender a interagir com o usu√°rio. </p> <p> Dominar esses pilares √© essencial para escrever c√≥digo limpo, funcional e leg√≠vel, habilidades que conectam diretamente esta unidade √†s <strong>APS</strong> e ao mercado de trabalho no desenvolvimento de software. </p>"
    },
    {
      "type": "legacySection",
      "id": "plano-aula",
      "title": "Plano da Aula",
      "html": "<div data-legacy-grid=\"\"> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"book-open\">üìñ</span>CONTE√öDO </h3> <p> Estrutura de um programa Java, sintaxe b√°sica, m√©todo <code-text>main</code-text>, tipos primitivos, e entrada/sa√≠da de dados com <code-text>Scanner</code-text>. </p> </div> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"bullseye\">üéØ</span>OBJETIVO </h3> <p> Compreender e aplicar a estrutura e sintaxe fundamental do Java para criar programas simples que interagem com o usu√°rio. </p> </div> <div data-legacy-card=\"\"> <h3> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"gears\">‚öôÔ∏è</span>METODOLOGIA </h3> <p> Aula expositiva, exemplos de c√≥digo comentados, e uma atividade pr√°tica para refor√ßar os conceitos de entrada e sa√≠da. </p> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "teoria",
      "title": "üî© A Anatomia de um Programa Java",
      "html": "<div data-legacy-card=\"\"> <h3> 1. Estrutura Geral de um Arquivo Java </h3> <p> Um arquivo <code-text>.java</code-text> pode conter v√°rias partes. Em programas simples, usamos apenas a classe e o m√©todo <code-text>main</code-text>, mas √© importante conhecer a estrutura completa: </p> <ul> <li> <strong>Package:</strong> Define o pacote da classe. Ex.: <code-text>package br.edu.unifametro;</code-text> </li> <li> <strong>Imports:</strong> Traz classes externas. Ex.: <code-text>import java.util.Scanner;</code-text> </li> <li> <strong>Classe:</strong> Cont√©m atributos e m√©todos. Ex.: <code-text>public class Programa { }</code-text> </li> <li> <strong>M√©todo main:</strong> Ponto de entrada. Ex.: <code-text>public static void main(String[] args)</code-text> </li> </ul> </div> <div data-legacy-card=\"\"> <h3> 2. Estrutura M√≠nima de um Programa </h3> <p> Todo programa execut√°vel em <code-text>Java</code-text> precisa de, no m√≠nimo, uma classe p√∫blica e um m√©todo <code-text>main</code-text>. Pense na classe como o \"container\" do c√≥digo e no m√©todo <code-text>main</code-text> como a porta de entrada. </p> <ul> <li> <strong><code-text>public class NomeDaClasse { ... }</code-text></strong>: O nome do arquivo deve ser id√™ntico ao da classe. </li> <li> <strong><code-text>{ ... }</code-text></strong>: As chaves delimitam blocos de c√≥digo. </li> <li> <strong><code-text>;</code-text></strong>: Finaliza uma instru√ß√£o, como um ponto final em uma frase. </li> </ul> </div> <div data-legacy-card=\"\"> <h3> 3. Tipos de Dados e Sintaxe B√°sica </h3> <p> O Java √© uma linguagem fortemente tipada, ou seja, cada vari√°vel precisa ter um tipo definido. Os mais comuns s√£o: </p> <ul> <li><code-text>int</code-text>: n√∫meros inteiros.</li> <li><code-text>double</code-text>: n√∫meros com ponto flutuante.</li> <li> <code-text>boolean</code-text>: valores l√≥gicos (<code-text>true</code-text> ou <code-text>false</code-text>). </li> <li><code-text>char</code-text>: um √∫nico caractere.</li> <li> <code-text>String</code-text>: sequ√™ncia de caracteres (n√£o √© primitivo, mas usado como tal). </li> </ul> <div> <p> <strong>Dica:</strong> Use nomes de vari√°veis que descrevam o prop√≥sito. Ex.: <code-text>idadeAluno</code-text> √© melhor que <code-text>x</code-text>. </p> </div> </div> <div data-legacy-card=\"\"> <h3> 4. O M√©todo <code-text>main</code-text> </h3> <p> A assinatura <code-text>public static void main(String[] args)</code-text> √© onde tudo come√ßa. A JVM procura por esse m√©todo como ponto de entrada. </p> <ul> <li><code-text>public</code-text>: Acess√≠vel de qualquer lugar.</li> <li> <code-text>static</code-text>: Pertence √† classe, n√£o a uma inst√¢ncia. </li> <li><code-text>void</code-text>: N√£o retorna valor.</li> <li> <code-text>String[] args</code-text>: Recebe argumentos da linha de comando. </li> </ul> </div> <div data-legacy-card=\"\"> <h3> 5. Entrada e Sa√≠da de Dados </h3> <p> Programas interativos precisam exibir informa√ß√µes e ler dados do usu√°rio: </p> <ul> <li> <strong>Sa√≠da:</strong> <code-text>System.out.println()</code-text> imprime no console. </li> <li> <strong>Entrada:</strong> A classe <code-text>Scanner</code-text> l√™ dados do teclado. Exige o import <code-text>import java.util.Scanner;</code-text>. </li> </ul> </div>"
    },
    {
      "type": "legacySection",
      "id": "pratica",
      "title": "üíª Exemplos Pr√°ticos",
      "html": "<div data-legacy-card=\"\"> <h3> Exemplo 1: O Cl√°ssico \"Hello, World!\" </h3> <p> Nosso primeiro programa. Ele apenas imprime uma mensagem no console. </p> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo do programa Hello World\"> Copiar </button> <pre><code>\n/** * A classic \"Hello, World!\" program in Java. * This demonstrates the basic structure of a Java class with the main method. */\npublic class HelloWorld { public static void main(String[] args) { // Prints the text \"Hello, LPOO World!\" to the console. System.out.println(\"Hello, LPOO World!\"); // Using printf for formatted output (no line break by default). System.out.printf(\"Welcome to %s, Aula %d\\n\", \"LPOO\", 2); }\n} </code></pre> </div> </div> <div data-legacy-card=\"\"> <h3> Exemplo 2: Lendo o Nome do Usu√°rio </h3> <p> Este programa usa a classe <code-text>Scanner</code-text> para ler um nome digitado pelo usu√°rio e depois exibe uma sauda√ß√£o personalizada. </p> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo do programa de sauda√ß√£o\"> Copiar </button> <pre><code>\n// Import the Scanner class from the java.util package to read user input.\nimport java.util.Scanner; /** * A program that reads the user's name and prints a personalized greeting. */\npublic class Greeting { public static void main(String[] args) { // Create a Scanner object to read input from the console. Scanner inputReader = new Scanner(System.in); System.out.print(\"Please, enter your name: \"); // Read the next line entered by the user. String userName = inputReader.nextLine(); // Print a personalized greeting using printf. System.out.printf(\"Hello, %s! Welcome to LPOO.\\n\", userName); // Always close the Scanner to release resources. inputReader.close(); }\n} </code></pre> </div> </div> <div data-legacy-card=\"\"> <h3> Exemplo 3: Somando Dois N√∫meros </h3> <p> Aqui, lemos dois n√∫meros inteiros, realizamos a soma e exibimos o resultado. </p> <div> <button data-tooltip=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo do programa de soma\"> Copiar </button> <pre><code>\nimport java.util.Scanner; /** * A program that reads two integers, validates input, and prints their sum. */\npublic class SimpleCalculator { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"Enter the first number: \"); int number1 = scanner.nextInt(); System.out.print(\"Enter the second number: \"); int number2 = scanner.nextInt(); int sum = number1 + number2; // Using printf to format the output. System.out.printf(\"The sum of %d and %d is: %d\\n\", number1, number2, sum); // Basic validation example (just a demonstration) if(sum &lt; 0) { System.out.println(\"Note: The sum is negative.\"); } scanner.close(); }\n} </code></pre> </div> </div>"
    },
    {
      "type": "legacySection",
      "id": "ted",
      "title": "Atividade Pr√°tica (TED): Cadastro Simples",
      "html": "<p> Vamos criar um programa que simula um cadastro simples, coletando nome e idade do usu√°rio e exibindo uma mensagem formatada. Esta atividade √© o primeiro passo para a APS, onde construiremos sistemas que gerenciam dados. </p> <ol> <li> Crie uma nova classe chamada <code-text>SimpleRegistration.java</code-text>. </li> <li> Dentro do m√©todo <code-text>main</code-text>, crie um objeto <code-text>Scanner</code-text> para ler a entrada do teclado. </li> <li> Pe√ßa para o usu√°rio digitar seu nome completo e armazene em uma vari√°vel <code-text>String</code-text>. </li> <li> Em seguida, pe√ßa para o usu√°rio digitar sua idade e armazene em uma vari√°vel <code-text>int</code-text>. </li> <li> No final, imprima uma frase formatada no console, como: <code-text>Cadastro realizado! Ol√°, [Nome], voc√™ tem [Idade] anos.</code-text> </li> <li> N√£o se esque√ßa de fechar o <code-text>Scanner</code-text> no final do programa. </li> </ol> <div data-legacy-card=\"\"> <h4>Sugest√£o de Metodologia Ativa</h4> <p> Tente resolver esta atividade em dupla (*pair programming*). Um colega digita (\"piloto\") enquanto o outro orienta e revisa (\"co-piloto\"). Troquem de pap√©is no meio da atividade. Isso ajuda a encontrar erros e a aprender mais r√°pido! </p> </div>"
    },
    {
      "type": "legacySection",
      "id": "checklist",
      "title": "‚úÖChecklist de Aprendizagem da Aula",
      "html": "<div data-legacy-card=\"\"> <p>Ao final desta aula, voc√™ deve ser capaz de:</p> <ul> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Descrever a estrutura b√°sica de uma classe Java com um m√©todo <code-text>main</code-text>. </li> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Declarar vari√°veis de tipos primitivos como <code-text>String</code-text> e <code-text>int</code-text>. </li> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Usar <code-text>System.out.println()</code-text> para exibir informa√ß√µes no console. </li> <li> <span class=\"legacy-section__icon\" aria-hidden=\"true\" data-legacy-icon=\"check\">‚úîÔ∏è</span>Utilizar a classe <code-text>Scanner</code-text> para ler dados do teclado. </li> </ul> </div>"
    },
    {
      "type": "legacySection",
      "id": "bibliografia",
      "title": "üìö Bibliografia de Apoio",
      "html": "<div data-legacy-card=\"\"> <p> <strong>DEITEL, Harvey M.; DEITEL, Paul J.</strong> <em>Java: como programar.</em> 8. ed. S√£o Paulo: Pearson Prentice Hall, 2014. </p> <p> <strong>SCHILDT, Herbert.</strong> <em>Java para iniciantes: crie, compile e execute programas Java rapidamente.</em> 6. ed. Porto Alegre: Bookman, 2015. </p> <p> <strong>GOODRICH, Michael T.; TAMASSIA, Roberto.</strong> <em>Estruturas de dados e algoritmos em Java.</em> 5. ed. Porto Alegre: Bookman, 2013. </p> </div>"
    }
  ]
}

{
  "id": "lesson-03",
  "title": "Aula 3: Objetos, Atributos e M√©todos",
  "objective": "Modelar e implementar classes com atributos e m√©todos, e instanciar objetos a partir delas, manipulando seu estado e comportamento.",
  "content": [
    {
      "type": "contentBlock",
      "title": "Ementa e Contextualiza√ß√£o",
      "content": [
        {
          "type": "paragraph",
          "text": "Na aula anterior, vimos a estrutura b√°sica de um programa. Agora, vamos mergulhar no cora√ß√£o da Programa√ß√£o Orientada a Objetos. Os objetos s√£o a base de tudo o que construiremos. Entender como modelar entidades do mundo real (um produto, um cliente, uma transa√ß√£o) em objetos com estado (atributos) e comportamento (m√©todos) √© a habilidade fundamental que nos permite criar software modular, reutiliz√°vel e f√°cil de manter."
        }
      ]
    },
    {
      "type": "lessonPlan",
      "title": "Plano da Aula",
      "cards": [
        {
          "icon": "book-open",
          "title": "CONTE√öDO",
          "content": "Defini√ß√£o de objetos, atributos (estado) e m√©todos (comportamento). Rela√ß√£o entre classes e inst√¢ncias."
        },
        {
          "icon": "bullseye",
          "title": "OBJETIVO",
          "content": "Modelar e implementar classes com atributos e m√©todos, e instanciar objetos a partir delas, manipulando seu estado e comportamento."
        },
        {
          "icon": "gears",
          "title": "METODOLOGIA",
          "content": "Exposi√ß√£o te√≥rica com analogias, modelagem visual, codifica√ß√£o de exemplos pr√°ticos e atividade guiada."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "üß± Os Blocos de Constru√ß√£o da POO",
      "content": [
        {
          "type": "contentBlock",
          "title": "1. Classes, Objetos e Inst√¢ncias",
          "content": [
            {
              "type": "paragraph",
              "text": "Segundo <strong>Deitel & Deitel (Java: Como Programar)</strong>, <em>\"uma classe descreve os atributos e comportamentos de um conjunto de objetos semelhantes; cada objeto √© uma inst√¢ncia dessa classe.\"</em>"
            },
            {
              "type": "paragraph",
              "text": "A rela√ß√£o entre classe e objeto √© como a de um <strong>molde</strong> e o <strong>item criado a partir dele</strong>. A classe define a estrutura e comportamento; o objeto √© a concretiza√ß√£o que usamos no c√≥digo."
            },
            {
              "type": "list",
              "items": [
                "<strong>Classe:</strong> O projeto, a planta baixa. Define atributos e m√©todos que todos os objetos daquele tipo ter√£o.",
                "<strong>Objeto (ou Inst√¢ncia):</strong> Uma c√≥pia √∫nica criada a partir da classe. Cada objeto tem seu pr√≥prio estado."
              ]
            },
            {
              "type": "image",
              "src": "https://placehold.co/400x250/e2e8f0/4f46e5?text=Classe+Molde",
              "alt": "Diagrama de Classe"
            },
            {
              "type": "image",
              "src": "https://placehold.co/400x250/e2e8f0/16a34a?text=Objetos+Instanciados",
              "alt": "Objetos criados a partir da classe"
            },
            {
              "type": "html",
              "html": "<div class=\"flex justify-center my-6\"><div class=\"bg-white border border-slate-300 rounded-lg shadow-lg w-80\"><div class=\"bg-indigo-600 text-white text-center font-bold py-2 rounded-t-lg\">Carro</div><div class=\"border-t border-b border-slate-300 p-4 text-slate-700 font-mono text-sm\">- cor : String <br />- modelo : String <br />- ano : int</div><div class=\"p-4 text-slate-700 font-mono text-sm\">+ ligar() : void <br />+ acelerar() : void <br />+ getVelocidadeAtual() : int</div></div></div>"
            },
            {
              "type": "code",
              "language": "java",
              "code": "// Defining a simple class Car\npublic class Car {\n    String color;\n    String model;\n}\n\n// Creating objects (instances) in the main method\npublic class TestCar {\n    public static void main(String[] args) {\n        Car car1 = new Car();\n        car1.color = \"Red\";\n        car1.model = \"Sedan\";\n\n        Car car2 = new Car();\n        car2.color = \"Black\";\n        car2.model = \"SUV\";\n\n        System.out.println(car1.color); // Prints \"Red\"\n    }\n}"
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "2. Atributos: O Estado de um Objeto",
          "content": [
            {
              "type": "paragraph",
              "text": "Atributos s√£o <strong>vari√°veis internas da classe</strong> que guardam dados. Eles representam o <strong>estado</strong> de cada objeto."
            },
            {
              "type": "paragraph",
              "text": "Exemplo: A classe `Carro` pode ter os atributos `cor`, `modelo` e `ano`. Cada objeto ter√° seus pr√≥prios valores."
            },
            {
              "type": "code",
              "language": "java",
              "code": "public class Carro {\n    String cor;\n    String modelo;\n    int ano;\n}\n\npublic class TestCarro {\n    public static void main(String[] args) {\n        Carro meuCarro = new Carro();\n        meuCarro.cor = \"Vermelho\"; // Estado do objeto\n    }\n}"
            },
            {
              "type": "callout",
              "variant": "info",
              "title": "üí° Dica:",
              "content": "Atributos s√£o geralmente <strong>privados</strong> em boas pr√°ticas de POO e acessados via m√©todos (getters/setters) para respeitar o encapsulamento."
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "3. M√©todos: O Comportamento de um Objeto",
          "content": [
            {
              "type": "paragraph",
              "text": "M√©todos s√£o <strong>fun√ß√µes dentro da classe</strong> que definem o comportamento do objeto. Eles podem ler/modificar atributos e interagir com outros objetos."
            },
            {
              "type": "paragraph",
              "text": "Na classe `Carro`, m√©todos como `ligar()` ou `acelerar()` alteram o estado do objeto."
            },
            {
              "type": "code",
              "language": "java",
              "code": "public class Carro {\n    String modelo;\n    int velocidade;\n\n    public void acelerar() {\n        velocidade += 10;\n        System.out.println(modelo + \" acelerou. Velocidade: \" + velocidade);\n    }\n}\n\nCarro carro1 = new Carro();\ncarro1.modelo = \"Sedan\";\ncarro1.acelerar(); // Output: Sedan acelerou. Velocidade: 10"
            },
            {
              "type": "callout",
              "variant": "good-practice",
              "title": "üìå Exerc√≠cio R√°pido:",
              "content": "Adicione um m√©todo `frear()` que reduza a velocidade em 5 e teste a chamada em dois objetos diferentes."
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "üíª Exemplos Pr√°ticos: Modelando um Produto",
      "content": [
        {
          "type": "contentBlock",
          "title": "Exemplo 1: Criando a Classe Produto",
          "content": [
            {
              "type": "paragraph",
              "text": "Vamos modelar um produto de uma loja virtual. A classe ter√° atributos para nome, pre√ßo e um m√©todo para exibir suas informa√ß√µes."
            },
            {
              "type": "code",
              "language": "java",
              "code": "/**\n * Represents a product in an e-commerce system.\n */\npublic class Produto {\n    // Attributes that define the state of a product.\n    String nome;\n    double preco;\n    int quantidadeEmEstoque;\n\n    /**\n     * Displays the product's data sheet.\n     * This method accesses the object's own attributes.\n     */\n    public void exibirFichaTecnica() {\n        System.out.println(\"---- FICHA T√âCNICA ----\");\n        System.out.println(\"Produto: \" + nome);\n        System.out.println(\"Pre√ßo: R$ \" + preco);\n        System.out.println(\"Estoque: \" + quantidadeEmEstoque + \" unidades\");\n        System.out.println(\"-----------------------\");\n    }\n}"
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "Exemplo 2: Criando e Usando Objetos Produto",
          "content": [
            {
              "type": "paragraph",
              "text": "Agora, em uma classe `Loja`, vamos criar inst√¢ncias de `Produto` e interagir com elas."
            },
            {
              "type": "code",
              "language": "java",
              "code": "public class Loja {\n    public static void main(String[] args) {\n        // Creating the first product object (instance of Produto).\n        Produto produto1 = new Produto();\n        produto1.nome = \"Smartphone Modelo X\";\n        produto1.preco = 1999.90;\n        produto1.quantidadeEmEstoque = 50;\n\n        // Creating the second product object.\n        Produto produto2 = new Produto();\n        produto2.nome = \"Notebook Gamer Y\";\n        produto2.preco = 4599.00;\n        produto2.quantidadeEmEstoque = 25;\n\n        // Calling the method on each object.\n        System.out.println(\"Produtos dispon√≠veis:\");\n        produto1.exibirFichaTecnica();\n        produto2.exibirFichaTecnica();\n    }\n}"
            }
          ]
        },
        {
          "type": "contentBlock",
          "title": "Exemplo 3: M√©todo com Par√¢metro e Retorno",
          "content": [
            {
              "type": "paragraph",
              "text": "Vamos adicionar um m√©todo √† classe `Produto` que calcula o pre√ßo com desconto. Ele recebe o percentual de desconto como par√¢metro e retorna o novo pre√ßo."
            },
            {
              "type": "code",
              "language": "java",
              "code": "// Add this method inside your Produto class.\n/**\n * Calculates the product price with a given discount.\n * @param percentualDesconto The discount percentage (e.g., 10 for 10%).\n * @return The new price after applying the discount.\n */\npublic double calcularPrecoComDesconto(double percentualDesconto) {\n    double valorDoDesconto = this.preco * (percentualDesconto / 100.0);\n    return this.preco - valorDoDesconto;\n}\n\n// How to use it in the main method of Loja class:\n// double precoCom10porcentoOff = produto1.calcularPrecoComDesconto(10.0);\n// System.out.println(\"Pre√ßo com desconto: R$ \" + precoCom10porcentoOff);"
            }
          ]
        }
      ]
    },
    {
      "type": "videosBlock",
      "title": "üé• V√≠deos e Links de Apoio",
      "videos": [
        {
          "title": "Criando Classes e Objetos em Java (Curso POO Java)",
          "youtubeId": "n1VZFmjuhqg"
        },
        {
          "title": "Introduction to Classes and Objects in Java",
          "youtubeId": "W-D71ZeMixQ"
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "üìñ Leituras Recomendadas",
      "content": [
        {
          "type": "button",
          "text": "What Is an Object? (Documenta√ß√£o Oficial da Oracle)",
          "href": "https://docs.oracle.com/javase/tutorial/java/concepts/object.html"
        },
        {
          "type": "button",
          "text": "Java Classes and Objects (W3Schools)",
          "href": "https://www.w3schools.com/java/java_classes.asp"
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Atividade Pr√°tica (TED): Modelando Alunos e Cursos",
      "content": [
        {
          "type": "paragraph",
          "text": "Vamos praticar a modelagem criando um sistema acad√™mico simples. O objetivo √© representar um `Aluno` e o `Curso` em que ele est√° matriculado."
        },
        {
          "type": "list",
          "items": [
            "**Crie a classe `Curso.java`** com os atributos `String nome` e `int duracaoHoras`.",
            "**Crie a classe `Aluno.java`** com os atributos `String nome`, `String matricula` e `Curso cursoMatriculado`. Note que um atributo pode ser outro objeto!",
            "Adicione um m√©todo `void exibirRelatorio()` na classe `Aluno` que imprima o nome do aluno, sua matr√≠cula e o nome do curso em que est√° matriculado.",
            "**Crie uma classe `Secretaria.java` com um m√©todo `main`** para testar. Nela, crie um objeto `Curso` (ex: \"An√°lise e Desenvolvimento de Sistemas\") e um objeto `Aluno`. Associe o curso ao aluno e chame o m√©todo `exibirRelatorio()`."
          ]
        }
      ]
    },
    {
      "type": "checklist",
      "title": "Checklist de Aprendizagem da Aula",
      "items": [
        "Diferenciar claramente os conceitos de Classe e Objeto.",
        "Modelar uma entidade do mundo real em uma Classe Java com atributos e m√©todos.",
        "Criar m√∫ltiplos objetos (inst√¢ncias) a partir de uma mesma classe.",
        "Implementar e chamar m√©todos que recebem par√¢metros e retornam valores."
      ]
    },
    {
      "type": "bibliographyBlock",
      "title": "üìö Bibliografia de Apoio",
      "references": [
        "<strong>DEITEL, Harvey M.; DEITEL, Paul J.</strong> <em>Java: como programar.</em> 8. ed. S√£o Paulo: Pearson Prentice Hall, 2014.",
        "<strong>SCHILDT, Herbert.</strong> <em>Java para iniciantes: crie, compile e execute programas Java rapidamente.</em> 6. ed. Porto Alegre: Bookman, 2015.",
        "<strong>GOODRICH, Michael T.; TAMASSIA, Roberto.</strong> <em>Estruturas de dados e algoritmos em Java.</em> 5. ed. Porto Alegre: Bookman, 2013."
      ]
    }
  ]
}

{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-02",
  "title": "Aula 2: Estrutura de um Programa Java e Sintaxe Básica",
  "summary": "Explora o esqueleto de um projeto Java, apresenta a sintaxe essencial e demonstra o ciclo de compilação e execução.",
  "objective": "Dominar a anatomia de classes Java e preparar o ambiente para codificar com segurança.",
  "objectives": [
    "Criar e executar um projeto Java utilizando IntelliJ IDEA ou VS Code.",
    "Reconhecer a estrutura mínima de uma classe Java e o papel do método `main`.",
    "Experimentar a leitura de entrada e a impressão de resultados no console."
  ],
  "competencies": [
    "Construção de programas orientados a objetos",
    "Uso de ferramentas de desenvolvimento",
    "Leitura e escrita de código Java"
  ],
  "skills": [
    "Configurar projetos com Gradle ou Maven a partir de templates.",
    "Utilizar o compilador `javac` e a JVM para testar alterações locais.",
    "Interpretar mensagens de erro de compilação e corrigir problemas sintáticos."
  ],
  "outcomes": [
    "Repositório com projeto base configurado e README de execução.",
    "Snippet comentado explicando cada parte de uma classe.",
    "Quadro de comandos úteis (`javac`, `java`, `gradlew`)."
  ],
  "prerequisites": [
    "Instalação do JDK 21 e do IntelliJ IDEA Community ou VS Code.",
    "Conhecimentos básicos de lógica e algoritmos."
  ],
  "tags": ["poo", "java", "sintaxe"],
  "duration": 115,
  "modality": "in-person",
  "resources": [
    {
      "label": "Plano de ensino LPOO 2025.2",
      "type": "document",
      "url": "https://example.edu/lpoo/plano-ensino-2025-2"
    },
    {
      "label": "Deitel & Deitel — Java Como Programar (cap. 2)",
      "type": "book",
      "url": "https://www.pearson.com/en-us/subject-catalog/p/java-how-to-program/P200000000934/9781292402067"
    },
    {
      "label": "Herbert Schildt — Java: A Beginner's Guide (cap. 2)",
      "type": "book",
      "url": "https://www.mhprofessional.com/java-a-beginners-guide-eighth-edition-9781260440218-usa"
    },
    {
      "label": "Goodrich, Tamassia & Goldwasser — Data Structures and Algorithms in Java (cap. 1)",
      "type": "book",
      "url": "https://www.wiley.com/en-us/Data+Structures+and+Algorithms+in+Java%2C+7th+Edition-p-9781119498590"
    },
    {
      "label": "Download IntelliJ IDEA",
      "type": "tool",
      "url": "https://www.jetbrains.com/idea/download/"
    },
    {
      "label": "Guia oficial do Gradle para iniciantes",
      "type": "article",
      "url": "https://docs.gradle.org/current/userguide/getting_started.html"
    },
    {
      "label": "Oracle Developers – Java Language Basics (DevLive 2024)",
      "type": "video",
      "url": "https://www.youtube.com/watch?v=2DM8-hO-9N0",
      "duration": "PT42M15S",
      "studyObjective": "Consolidar a estrutura de um programa Java e a sintaxe essencial apresentada pela equipe Oracle."
    }
  ],
  "bibliography": [
    "DEITEL, P.; DEITEL, H. Java — Como Programar. 11. ed. Pearson, 2023.",
    "ECKEL, B. Thinking in Java. 4. ed. Prentice Hall, 2022."
  ],
  "assessment": {
    "type": "practice",
    "description": "Configuração do projeto base com execução de um programa que lê dados do usuário e imprime um resumo formatado.",
    "rubric": "Projeto executa sem erros, inclui README com comandos e captura de tela do console."
  },
  "content": [
    {
      "type": "lessonPlan",
      "title": "Plano da aula",
      "unit": {
        "title": "Unidade I — Fundamentos do Java",
        "content": "Estrutura mínima de um programa orientado a objetos, ferramentas de compilação e execução e boas práticas iniciais."
      },
      "cards": [
        {
          "icon": "bullseye",
          "title": "Arranque rápido",
          "content": "Hands-on guiado no IDE para gerar e executar o primeiro projeto."
        },
        {
          "icon": "code",
          "title": "Sintaxe essencial",
          "content": "Declaração de classes, método `main`, variáveis, tipos primitivos e comentários."
        },
        {
          "icon": "gears",
          "title": "Ferramentas",
          "content": "Fluxo de compilação com `javac`/`java` e automação com Gradle."
        }
      ]
    },
    {
      "type": "flightPlan",
      "title": "Plano de voo (1h55)",
      "items": [
        "(15 min) Demonstração guiada: criar projeto Gradle no IDE.",
        "(20 min) Anatomia da classe `HelloWorld` e papel do método `main`.",
        "(25 min) Oficina: leitura de entrada com `Scanner` e impressão formatada.",
        "(20 min) Diagnóstico de erros comuns de compilação.",
        "(15 min) Introdução a Gradle tasks (`gradlew run`, `gradlew test`).",
        "(10 min) Orientações para tarefa assíncrona e versão no GitHub."
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "Atenção ao pacote",
      "content": [
        {
          "type": "paragraph",
          "text": "Garanta que o nome do pacote no topo da classe corresponde ao diretório onde o arquivo está salvo. Inconsistências quebram a compilação."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Desmontando o Hello World",
      "content": [
        {
          "type": "paragraph",
          "text": "Cada arquivo `.java` contém exatamente uma classe pública cujo nome precisa coincidir com o arquivo. O método `main` funciona como ponto de entrada."
        },
        {
          "type": "subBlock",
          "title": "Elementos-chave",
          "items": [
            "Declaração de pacote: Mantém o código organizado e evita colisões de nomes.",
            "Imports: Tornam classes externas disponíveis sem precisar do nome completo.",
            "Classe pública: Container principal de atributos e métodos.",
            "Método main: Executado pela JVM, recebe argumentos da linha de comando."
          ]
        }
      ]
    },
    {
      "type": "component",
      "component": "Md3CodeSample",
      "props": {
        "title": "Hello World anotado",
        "summary": "Cada anotação conecta o trecho com os elementos da anatomia da classe explorados logo acima.",
        "language": "java",
        "code": "package edu.lpoo.intro; // Pacote mantém a classe alinhada à estrutura de diretórios.\n\nimport java.util.Scanner; // Importa utilitário para ler dados do teclado.\n\npublic class HelloWorld { // Declara a classe pública com o mesmo nome do arquivo.\n    public static void main(String[] args) { // Ponto de entrada executado pela JVM.\n        try (Scanner entrada = new Scanner(System.in)) { // Cria Scanner conectado ao console.\n            System.out.print(\"Qual é o seu nome? \"); // Solicita entrada para o usuário.\n            String nome = entrada.nextLine(); // Lê uma linha completa como texto.\n            System.out.println(\"Olá, \" + nome + \"!\"); // Exibe saudação formatada.\n        } // Bloco try-with-resources fecha o Scanner automaticamente.\n    }\n}",
        "highlights": [
          "O pacote no topo evita conflitos de nomes e reflete a organização da aplicação.",
          "O import explicita a dependência do utilitário `Scanner` usado para entrada.",
          "A classe pública `HelloWorld` encapsula o comportamento demonstrado.",
          "O método `main` recebe argumentos e sinaliza o ponto de partida da execução.",
          "O `Scanner` lê o nome digitado e a resposta é impressa de forma amigável."
        ]
      }
    },
    {
      "type": "cardGrid",
      "title": "Ferramentas essenciais",
      "columns": 3,
      "cards": [
        {
          "title": "JDK",
          "subtitle": "Compilador + JVM",
          "tone": "info",
          "content": "Inclui `javac`, `java`, documentação e ferramentas adicionais."
        },
        {
          "title": "IDE",
          "subtitle": "Produtividade",
          "tone": "success",
          "content": "Sugestão de código, depuração, refatorações e integração com VCS."
        },
        {
          "title": "Build Tool",
          "subtitle": "Automação",
          "tone": "neutral",
          "content": "Gerencia dependências, compilações, empacotamento e testes automatizados."
        }
      ]
    },
    {
      "type": "component",
      "component": "Md3Flowchart",
      "props": {
        "title": "Pipeline de compilação Java",
        "summary": "Representação das etapas percorridas por um arquivo `.java` até gerar um programa executável.",
        "nodes": [
          {
            "id": "start",
            "type": "start",
            "title": "Código-fonte Java"
          },
          {
            "id": "compile",
            "type": "process",
            "title": "Compilar com javac"
          },
          {
            "id": "bytecode",
            "type": "data",
            "title": "Gerar bytecode (.class)"
          },
          {
            "id": "jvm",
            "type": "process",
            "title": "Carregar na JVM"
          },
          {
            "id": "runtime",
            "type": "output",
            "title": "Programa em execução"
          },
          {
            "id": "end",
            "type": "end",
            "title": "Resultado no console"
          }
        ],
        "connections": [
          {
            "from": "start",
            "to": "compile"
          },
          {
            "from": "compile",
            "to": "bytecode"
          },
          {
            "from": "bytecode",
            "to": "jvm"
          },
          {
            "from": "jvm",
            "to": "runtime"
          },
          {
            "from": "runtime",
            "to": "end"
          }
        ]
      }
    }
  ],
  "metadata": {
    "status": "in-review",
    "updatedAt": "2025-10-03T00:00:00.000Z",
    "owners": ["Prof. Tiago Sombra"],
    "sources": ["Plano de ensino LPOO 2025.2", "docs/material-redesign-plan.md – seção 5.3 (LPOO)"]
  }
}

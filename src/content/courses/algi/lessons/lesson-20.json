{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-20",
  "title": "Aula 20 - Estrutura de repetição do-while",
  "summary": "Apresenta o do-while em C para menus e validações que exigem uma execução inicial garantida.",
  "objective": "Implementar menus que exigem execução inicial obrigatória usando do-while e validar todas as opções com feedback imediato.",
  "description": "A aula destaca quando o do-while simplifica o código, demonstra a construção de menus interativos e orienta sobre validações que precisam rodar pelo menos uma vez.",
  "objectives": [
    "Identificar problemas que exigem execução mínima antes da validação.",
    "Implementar menus interativos utilizando a estrutura do-while.",
    "Comparar vantagens do do-while em relação a while e for em fluxos de confirmação."
  ],
  "competencies": ["05", "12"],
  "skills": [
    "Modelar menus que exigem execução inicial obrigatória utilizando do-while.",
    "Implementar validação de opções garantindo repetição até entrada aceitável.",
    "Justificar escolha do do-while em comparação com outras estruturas de repetição."
  ],
  "outcomes": [
    "Entrega menu funcional que registra ação inicial e controle de saída com clareza.",
    "Documenta testes que comprovam rejeição de entradas inválidas e repetição do menu.",
    "Produz texto curto explicando critérios adotados para escolher o do-while."
  ],
  "prerequisites": [
    "Conhecer while e condicionais.",
    "Ter utilizado scanf e printf em exercícios anteriores."
  ],
  "tags": ["loops", "do-while", "menus"],
  "duration": 100,
  "modality": "in-person",
  "metadata": {
    "status": "published",
    "updatedAt": "2025-10-02T08:28:28.984Z",
    "owners": ["Equipe Algoritmos I", "Prof. Tiago Sombra"],
    "sources": ["Plano pedagógico Algoritmos I 2025.1"]
  },
  "resources": [
    {
      "label": "Moodle — AVA (Unichristus)",
      "type": "plataforma",
      "url": "https://ava.unichristus.edu.br/"
    },
    {
      "label": "Visual Studio Code + extensão C/C++",
      "type": "ide",
      "url": "https://code.visualstudio.com/Download"
    },
    {
      "label": "Extensão C/C++ (Microsoft) para VS Code",
      "type": "extensao",
      "url": "https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools"
    },
    {
      "label": "Planilha colaborativa de testes (Google Sheets)",
      "type": "planilha",
      "url": "https://docs.google.com/spreadsheets/"
    }
  ],
  "bibliography": [
    "FORBELLONE, A. L. V.; EBERSPÄCHER, H. F. Lógica de Programação. Pearson, 2020.",
    "PIVA, A. Algoritmos e Estruturas de Dados. Novatec, 2021."
  ],
  "assessment": {
    "type": "prática",
    "description": "Prática orientada para fortalecer os conceitos trabalhados em aula. Registre suas soluções e dúvidas para acompanhamento posterior."
  },
  "content": [
    {
      "type": "contentBlock",
      "title": "Atividade em sala",
      "content": [
        {
          "type": "paragraph",
          "text": "Em duplas ou trios, resolvam as questões a seguir para reforçar o aprendizado durante a aula."
        },
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Questão teórica",
              "text": "Explique com suas palavras os principais conceitos abordados em \"Estrutura de repetição do-while\" e destaque por que eles são importantes para a resolução de problemas."
            },
            {
              "title": "Questão prática",
              "text": "Implemente ou descreva um exemplo curto relacionado a \"Estrutura de repetição do-while\" utilizando OnlineGDB ou Dev-C++ e compartilhe o resultado com o grupo."
            }
          ]
        }
      ]
    },
    {
      "type": "videos",
      "title": "Vídeos de apoio",
      "videos": [
        {
          "title": "Programar em C - Funções Recursivas - Aula 35",
          "src": "https://www.youtube.com/embed/1kBiqUCN888"
        },
        {
          "title": "Lógica do algoritmo busca binária",
          "src": "https://www.youtube.com/embed/1tGpLS5JH2Y"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "task",
      "title": "Warm-up (pré-aula)",
      "content": [
        {
          "type": "paragraph",
          "text": "Revise os materiais desta aula aqui no site e anote os pontos-chave que precisam de atenção. Identifique dúvidas ou conceitos que merecem ser revisitados durante o encontro."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Reserve alguns minutos para tentar resolver mentalmente um exemplo relacionado ao tema da aula."
            },
            {
              "text": "Garanta acesso ao OnlineGDB ou ao Dev-C++ para experimentar os códigos durante a aula."
            }
          ]
        }
      ]
    },
    {
      "type": "lessonPlan",
      "title": "Plano da aula",
      "cards": [
        {
          "icon": "target",
          "title": "Aplicações imediatas",
          "content": "Identificar cenários de fila/menu em que a execução inicial obrigatória (Aula 17 vs do-while) muda a clareza do fluxo."
        },
        {
          "icon": "code",
          "title": "Laboratório guiado",
          "content": "Construir um menu completo com do-while incluindo tratamento de erros."
        },
        {
          "icon": "users",
          "title": "Revisão coletiva",
          "content": "Compartilhar decisões de fluxo, comparando versões com while/for e justificando a permanência do do-while."
        }
      ]
    },
    {
      "type": "promptTip",
      "title": "Prompt para planejar Estrutura de repetição do-while",
      "description": "Use com o assistente para organizar seus estudos, revisar conteúdos e praticar com exercícios.",
      "audience": "estudantes de Algoritmos I",
      "prompt": "Você é estudante de Algoritmos I estudando Estrutura de repetição do-while. Contexto da aula: Apresenta o do-while em C para menus e validações que exigem uma execução inicial garantida. Objetivo central: Implementar menus que exigem execução inicial obrigatória usando do-while e validar todas as opções com feedback imediato. Monte um plano de estudo dividido em revisão teórica, prática guiada e autoavaliação, indicando atividades de leitura, exercícios resolvidos em C ou pseudocódigo e perguntas de checagem que ajudem você a consolidar o conteúdo. Sugira estratégias para aprofundar o aprendizado, reforçar pontos frágeis e buscar ajuda quando necessário.",
      "tags": ["algoritmos", "do-while", "loops", "menus"],
      "tips": [
        "Peça ao assistente variações de exercícios que reforcem identificar problemas que exigem execução mínima antes da validação.",
        "Solicite exemplos adicionais relacionados a loops, do-while para praticar.",
        "Peça um checklist final para acompanhar suas dúvidas recorrentes e organizar revisões.",
        "Peça sugestões de autoavaliação que ajudem você a implementar menus interativos utilizando a estrutura do-while."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Por que usar do-while?",
      "content": [
        {
          "type": "paragraph",
          "text": "O do-while avalia a condição somente após executar o corpo, garantindo pelo menos uma passagem antes de verificar a saída."
        },
        {
          "type": "unorderedList",
          "items": [
            {
              "text": "Menus e caixas de diálogo precisam exibir opções antes de perguntar novamente."
            },
            {
              "text": "Rotinas de leitura devem armazenar a primeira entrada antes de validar continuidade."
            },
            {
              "text": "Processos com feedback imediato ao usuário se beneficiam da execução inicial garantida."
            }
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Atenção ao estado inicial",
      "content": [
        {
          "type": "paragraph",
          "text": "Garanta que as variáveis usadas na condição sejam inicializadas com um valor coerente antes do laço."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Faça a limpeza do buffer de entrada quando uma leitura falhar."
            },
            {
              "text": "Mantenha a lógica de decisão dentro de um switch ou função dedicada para evitar blocos extensos."
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "language": "c",
      "title": "Menu interativo com do-while",
      "code": "#include <stdio.h>\n\nvoid registrar_venda(void) {\n  printf(\"Venda registrada!\\n\");\n}\n\nvoid gerar_relatorio(void) {\n  printf(\"Relatório gerado!\\n\");\n}\n\nint main(void) {\n  int opcao;\n  do {\n    printf(\"\\n=== Menu Principal ===\\n\");\n    printf(\"1 - Registrar venda\\n\");\n    printf(\"2 - Gerar relatório\\n\");\n    printf(\"0 - Sair\\n\");\n    printf(\"Escolha: \");\n\n    if (scanf(\"%d\", &opcao) != 1) {\n      opcao = -1;\n      while (getchar() != '\\n') { }\n      printf(\"Entrada inválida. Tente novamente.\\n\");\n      continue;\n    }\n\n    switch (opcao) {\n      case 1:\n        registrar_venda();\n        break;\n      case 2:\n        gerar_relatorio();\n        break;\n      case 0:\n        printf(\"Encerrando o sistema.\\n\");\n        break;\n      default:\n        printf(\"Opção não reconhecida.\\n\");\n    }\n  } while (opcao != 0);\n\n  return 0;\n}\n"
    },
    {
      "type": "contentBlock",
      "title": "Boas práticas de validação",
      "content": [
        {
          "type": "orderedList",
          "items": [
            {
              "text": "Descarte resíduos do buffer antes de repetir o menu."
            },
            {
              "text": "Centralize a lógica de decisão em funções ou switch para manter o laço enxuto."
            },
            {
              "text": "Atualize mensagens de feedback imediato para orientar o usuário após cada iteração."
            }
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "task",
      "title": "Prática sugerida",
      "content": [
        {
          "type": "paragraph",
          "text": "Adapte o menu para calcular o fatorial solicitado no TED, garantindo repetição até que o usuário peça para sair."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Inclua opção para exibir histórico das últimas respostas válidas."
            },
            {
              "text": "Documente no relatório quando preferiria while ou for e por quê."
            }
          ]
        }
      ]
    },
    {
      "type": "stepper",
      "title": "do { ... } while (condição);",
      "steps": [
        {
          "title": "Executa",
          "description": "Bloco executa ao menos uma vez."
        },
        {
          "title": "Testa",
          "description": "Condição ao final decide continuar."
        }
      ]
    },
    {
      "type": "callout",
      "variant": "task",
      "title": "TED pós-aula",
      "content": [
        {
          "type": "paragraph",
          "text": "Reserve um momento após a aula para concluir a atividade descrita a seguir. Ela complementa os estudos e ajuda a consolidar o que foi trabalhado em sala."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Implemente a prática proposta e registre evidências de teste na planilha colaborativa."
            },
            {
              "text": "Escreva uma reflexão curta (5 a 7 linhas) justificando a estrutura de repetição escolhida à luz das comparações iniciadas na Aula 17."
            },
            {
              "text": "Anote dúvidas, alternativas consideradas e argumentos que sustentaram sua decisão para discutirmos na próxima aula."
            }
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "academic",
      "title": "Leitura recomendada",
      "content": [
        {
          "type": "list",
          "items": [
            "FORBELLONE, A. L. V.; EBERSPÄCHER, H. F. Algoritmos: Lógica para Desenvolvimento de Programas. Prentice Hall.",
            "MANZANO, J. A. N. G.; OLIVEIRA, J. F. Algoritmos: lógica para desenvolvimento de programação. Érica.",
            "BACKES, A. Linguagem C: completa e descomplicada. Elsevier."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Casos de teste sugeridos",
      "content": [
        {
          "type": "code",
          "code": "# Entrada → Saída (menu repete)\n1 2 0 -> executou duas operações e encerrou",
          "language": "plaintext"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "good-practice",
      "title": "Boas práticas",
      "content": [
        {
          "type": "list",
          "items": [
            "Use nomes de variáveis autoexplicativos (ex.: total, media, indice).",
            "Evite números mágicos; use constantes quando apropriado.",
            "Comente trechos que expressem intenção (não o óbvio)."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "Erros comuns e refatorações",
      "content": [
        {
          "type": "list",
          "items": [
            "Leia o enunciado e valide entradas antes de processar.",
            "Inicialize variáveis; evite estados indefinidos."
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Exemplo contextualizado — Totem de fila inteligente",
      "content": [
        {
          "type": "paragraph",
          "text": "Um totem de triagem gera senhas enquanto houver pessoas na fila física e precisa exibir o menu pelo menos uma vez."
        },
        {
          "type": "paragraph",
          "text": "Implemente com do-while garantindo que a primeira senha seja emitida antes de verificar a condição de saída e compare com versões for/while."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Utilize indicadores de capacidade para decidir quando migrar para while."
            },
            {
              "text": "Registre na planilha colaborativa como cada estrutura afeta a experiência do usuário."
            },
            {
              "text": "Valide com testes de mesa cenários com fila vazia e fila cheia."
            }
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "task",
      "title": "Coding dojo — Menu de triagem com do-while",
      "content": [
        {
          "type": "paragraph",
          "text": "Construa em pares um menu que distribui senhas priorizando idosos e pessoas com deficiência."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Sprint 1 (6 min): codar a base com do-while garantindo execução inicial."
            },
            {
              "text": "Sprint 2 (6 min): refatorar para while destacando ajustes de inicialização."
            },
            {
              "text": "Sprint 3 (6 min): avaliar se um for com contador conhecido torna o fluxo mais claro."
            },
            {
              "text": "Retro (5 min): registrar vantagens percebidas de cada estrutura na planilha compartilhada."
            }
          ]
        },
        {
          "type": "code",
          "language": "c",
          "code": "#include <stdio.h>\n\ntypedef struct {\n  int prioridade;\n  char nome[32];\n} Pessoa;\n\nvoid chamar_proximo(Pessoa pessoa) {\n  printf(\"Chamando %s (prioridade %d)\n\", pessoa.nome, pessoa.prioridade);\n}\n\nint main(void) {\n  Pessoa fila[10] = {0};\n  int total = 0;\n  int opcao;\n  do {\n    printf(\"1 - Adicionar pessoa\n2 - Chamar próximo\n0 - Encerrar\nEscolha: \");\n    if (scanf(\"%d\", &opcao) != 1) {\n      opcao = 0;\n    }\n    switch (opcao) {\n      case 1:\n        // TODO: ler pessoa e inserir mantendo prioridade\n        break;\n      case 2:\n        // TODO: chamar_proximo\n        break;\n    }\n  } while (opcao != 0);\n  return 0;\n}\n// Complete o template e gere versões alternativas com while/for."
        }
      ]
    },
    {
      "type": "callout",
      "variant": "task",
      "title": "Check-out (fechamento rápido)",
      "content": [
        {
          "type": "list",
          "items": ["Registre 1 aprendizado e 1 dúvida.", "Entregue no AVA (campo de texto)."]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Gerador de casos de teste (C)",
      "content": [
        {
          "type": "code",
          "language": "c",
          "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int tentativasMenu = rand() % 4 + 2;\n  int opcaoFinal = rand() % 3 + 1;\n\n  printf(\"Sequencia sugerida de entradas:\\n\");\n  for (int i = 0; i < tentativasMenu - 1; ++i) {\n    printf(\"0 \");\n  }\n  printf(\"%d\\n\", opcaoFinal);\n\n  printf(\"Saida esperada:\\n- O menu deve repetir %d vezes antes de aceitar a opcao %d.\\n\", tentativasMenu - 1, opcaoFinal);\n\n  return 0;\n}"
        }
      ]
    }
  ]
}

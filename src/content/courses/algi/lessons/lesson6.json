{
  "id": "lesson6",
  "title": "Variáveis, Constantes e Tipos de Dados em C",
  "objective": "Aprender a armazenar e manipular informações nos nossos programas.",
  "content": [
    {
      "type": "flightPlan",
      "title": "Plano de Voo da Aula de Hoje",
      "items": [
        "O que é uma variável e como o computador guarda dados.",
        "Declarando variáveis em C: sintaxe e boas práticas.",
        "Os tipos de dados primitivos: <code class=\"inline-code\">int</code>, <code class=\"inline-code\">float</code>, <code class=\"inline-code\">double</code> e <code class=\"inline-code\">char</code>.",
        "O que são constantes e como declará-las (<code class=\"inline-code\">const</code> vs <code class=\"inline-code\">#define</code>).",
        "Atividade prática em duplas para declarar e exibir variáveis.",
        "Apresentação da tarefa (TED) da Aula 6."
      ]
    },
    {
      "type": "contentBlock",
      "title": "O que são Variáveis?",
      "content": [
        {
          "type": "paragraph",
          "text": "Imagine que a memória do computador é um armário gigante cheio de caixas. Uma <strong>variável</strong> é simplesmente uma dessas caixas, com três características importantes:"
        },
        {
          "type": "subBlock",
          "title": "Características",
          "items": [
            "<ul class=\"list-disc list-inside space-y-3\"><li><strong>Um nome (identificador):</strong> A etiqueta que colocamos na caixa para saber o que está lá dentro (ex: <code class=\"inline-code\">idade</code>, <code class=\"inline-code\">preco</code>).</li><li><strong>Um tipo:</strong> O que a caixa pode guardar. Uma caixa para \"números inteiros\" não pode guardar \"letras\".</li><li><strong>Um valor:</strong> O conteúdo que está, de facto, dentro da caixa (ex: <code class=\"inline-code\">25</code>, <code class=\"inline-code\">9.99</code>).</li></ul><p class=\"mt-4\">Quando declaramos uma variável em C, estamos a pedir ao sistema operativo para reservar uma dessas \"caixas\" na memória para o nosso programa usar.</p>"
          ]
        },
        {
          "type": "html",
          "html": "<div class=\"grid md:grid-cols-2 gap-8 items-center mt-6\"><div></div><div class=\"style=\"background-color: var(--md-sys-color-surface-variant);\" p-4 rounded-2xl border-2 style=\"border-color: var(--md-sys-color-outline);\" text-center\"><div class=\"font-mono text-body-small style=\"color: var(--md-sys-color-on-surface-variant);\" mb-2\">int idade;</div><div class=\"style=\"background-color: var(--md-sys-color-primary-container);\" p-6 rounded-xl shadow-inner inline-block\"><div class=\"style=\"color: var(--md-sys-color-on-primary-container);\" font-bold text-body-large\">idade (int)</div><div class=\"style=\"background-color: var(--md-sys-color-surface);\" border style=\"border-color: var(--md-sys-color-outline);\" dark:style=\"border-color: var(--md-sys-color-outline);\" p-4 mt-2 rounded text-headline-small font-bold style=\"color: var(--md-sys-color-on-surface);\" style=\"color: var(--md-sys-color-on-surface);\" min-w-[100px]\">?</div></div><div class=\"font-mono text-body-small style=\"color: var(--md-sys-color-on-surface-variant);\" mt-2\">idade = 25;</div></div></div>"
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Tipos de Dados Primitivos em C",
      "content": [
        {
          "type": "paragraph",
          "text": "A linguagem C oferece vários tipos de dados básicos, chamados de \"primitivos\". Vamos focar nos mais importantes:"
        },
        {
          "type": "subBlock",
          "title": "int",
          "items": [
            "<p>Usado para armazenar números <strong>inteiros</strong>, sem casas decimais (ex: -10, 0, 5, 1200).</p>",
            "<h5>Quando usar?</h5>",
            "<p>Para contagens, idades, quantidades, anos, ou qualquer valor que não precise de frações.</p>"
          ]
        },
        {
          "type": "code",
          "language": "c",
          "code": "// Declara uma variável inteira chamada \"idade\"\nint idade;\n\n// Atribui o valor 25 à variável \"idade\"\nidade = 25;\n\n// Declara e inicializa na mesma linha\nint ano = 2025;"
        },
        {
          "type": "subBlock",
          "title": "float",
          "items": [
            "<p>Usado para armazenar números de <strong>ponto flutuante</strong>, ou seja, números com casas decimais (ex: 1.85, 99.90, -5.5).</p>",
            "<h5>Quando usar?</h5>",
            "<p>Para alturas, preços, médias, temperaturas, ou qualquer valor que precise de precisão decimal, mas onde a performance seja mais crítica que a exatidão absoluta (ex: gráficos de jogos).</p>"
          ]
        },
        {
          "type": "code",
          "language": "c",
          "code": "// Declara uma variável float chamada \"altura\"\nfloat altura;\n\n// Atribui o valor 1.75\naltura = 1.75;\n\n// Declara e inicializa na mesma linha\nfloat preco = 49.99f; // O \"f\" no final é uma boa prática para literais float"
        },
        {
          "type": "subBlock",
          "title": "double",
          "items": [
            "<p>Usado para números de ponto flutuante de <strong>precisão dupla</strong>. Ocupa o dobro do espaço do <code class=\"inline-code\">float</code> e, por isso, consegue armazenar números muito maiores e com muito mais casas decimais.</p>",
            "<h5>Quando usar?</h5>",
            "<p>Para cálculos científicos, financeiros, ou qualquer situação onde a <strong>máxima precisão é crucial</strong> e pequenos erros de arredondamento não são aceitáveis.</p>"
          ]
        },
        {
          "type": "code",
          "language": "c",
          "code": "// \"double\" para cálculos de alta precisão\ndouble pi_preciso = 3.141592653589793;\ndouble constante_cientifica = 6.02214076e23;"
        },
        {
          "type": "subBlock",
          "title": "char",
          "items": [
            "<p>Usado para armazenar um <strong>único caractere</strong> (uma letra, um número ou um símbolo). O valor é sempre colocado entre aspas simples (').</p>",
            "<h5>Como guardar texto (Strings)?</h5>",
            "<p>Para guardar um texto, usamos um <strong>array de char</strong>. Em C, uma string não é apenas um conjunto de caracteres; é uma sequência que termina com um caractere especial, o <strong>terminador nulo (<code class=\"inline-code\">\\0</code>)</strong>. É este <code class=\"inline-code\">\\0</code> que indica às funções (como <code class=\"inline-code\">printf</code>) onde o texto acaba.</p>",
            {
              "type": "component",
              "component": "MemoryDiagram",
              "props": {
                "title": "String \"Tiago\" na memória:",
                "characters": ["T", "i", "a", "g", "o", "\\0"]
              }
            }
          ]
        },
        {
          "type": "code",
          "language": "c",
          "code": "// Declara uma variável para um único caractere\nchar inicial = 'T';\n\n// Para guardar um nome, usamos um array de char\n// O tamanho [50] reserva espaço para 49 caracteres + o terminador nulo \"\\0\"\nchar nome[50] = \"Tiago Sombra\";"
        }
      ]
    },
    {
      "type": "videos",
      "title": "Para Saber Mais sobre Tipos de Dados (Vídeo)",
      "videos": [
        {
          "title": "Tipos de Dados em C",
          "src": "https://www.youtube.com/embed/8ISwAYeZZ_E"
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Memória, Bytes e \"Tamanhos\" das Variáveis",
      "content": [
        {
          "type": "paragraph",
          "text": "Cada tipo de variável ocupa um espaço diferente na memória do computador, medido em <strong>bytes</strong>. Saber o tamanho é importante para otimizar programas no futuro."
        },
        {
          "type": "component",
          "component": "Md3Table",
          "props": {
            "headers": ["Tipo", "Tamanho Típico", "O que armazena"],
            "rows": [
              [
                {
                  "value": "char",
                  "mono": true
                },
                {
                  "value": "1 byte"
                },
                {
                  "value": "Um único caractere"
                }
              ],
              [
                {
                  "value": "int",
                  "mono": true
                },
                {
                  "value": "4 bytes"
                },
                {
                  "value": "Números inteiros"
                }
              ],
              [
                {
                  "value": "float",
                  "mono": true
                },
                {
                  "value": "4 bytes"
                },
                {
                  "value": "Números com decimais"
                }
              ],
              [
                {
                  "value": "double",
                  "mono": true
                },
                {
                  "value": "8 bytes"
                },
                {
                  "value": "Decimais com alta precisão"
                }
              ]
            ]
          }
        },
        {
          "type": "paragraph",
          "text": "Podemos verificar o tamanho de qualquer tipo de dado em C com o operador <code>sizeof()</code>."
        },
        {
          "type": "code",
          "language": "c",
          "code": "#include <stdio.h>\n\nint main() {\n  printf(\"Tamanho de char: %zu byte(s)\\n\", sizeof(char));\n  printf(\"Tamanho de int: %zu byte(s)\\n\", sizeof(int));\n  printf(\"Tamanho de float: %zu byte(s)\\n\", sizeof(float));\n  printf(\"Tamanho de double: %zu byte(s)\\n\", sizeof(double));\n  return 0;\n}"
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "E se o Valor Não Mudar? Constantes",
      "content": [
        {
          "type": "paragraph",
          "text": "Uma <strong>constante</strong> é um valor que, uma vez definido, não pode ser alterado durante a execução do programa. É útil para valores fixos como o PI, uma taxa de juro ou o número máximo de tentativas."
        },
        {
          "type": "subBlock",
          "title": "Forma 1: A palavra-chave \"const\"",
          "items": [
            "<p>Cria uma constante com um tipo de dado definido. É a forma mais moderna e segura, pois o compilador verifica o tipo.</p>"
          ]
        },
        {
          "type": "code",
          "language": "c",
          "code": "const float PI = 3.14159;\nconst int MAX_TENTATIVAS = 3;"
        },
        {
          "type": "subBlock",
          "title": "Forma 2: A diretiva \"#define\"",
          "items": [
            "<p>É uma diretiva do pré-processador. Simplesmente substitui todas as ocorrências de um nome por um valor antes da compilação. Não tem tipo de dado e é menos seguro.</p>"
          ]
        },
        {
          "type": "code",
          "language": "c",
          "code": "#define PI 3.14159\n#define MAX_TENTATIVAS 3"
        },
        {
          "type": "callout",
          "variant": "good-practice",
          "title": "Boa Prática",
          "content": "<p>Prefira usar <code>const</code> em vez de <code>#define</code> sempre que possível. A verificação de tipo do <code>const</code> ajuda a evitar erros subtis no seu código.</p>"
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Atividade Prática em Duplas",
      "content": [
        {
          "type": "paragraph",
          "text": "Em duplas, abram o editor de código e criem um novo programa em C. O objetivo é declarar, atribuir e exibir variáveis de forma formatada."
        },
        {
          "type": "component",
          "component": "OrderedList",
          "props": {
            "items": [
              "Declarem variáveis para guardar o nome de um produto (array de char), a sua quantidade em stock (int) e o seu preço (float).",
              "Atribuam valores a estas variáveis.",
              "Usem uma única chamada à função <code class=\"inline-code\">printf</code> para exibir uma frase completa e formatada, como: \"Produto: [NOME] | Stock: [QTD] unidades | Preço: R$ [PRECO]\"."
            ]
          }
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Próximos Passos e Tarefa (TED)",
      "content": "<h4>Tarefa para a próxima aula</h4><p class=\"mb-4\">O objetivo é praticar a declaração de variáveis e a exibição de dados formatados.</p><ol class=\"list-decimal list-inside space-y-2 font-semibold\"><li>Crie um programa em C que declare três variáveis:<ul class=\"list-disc list-inside ml-5\"><li>Um array de <code class=\"inline-code\">char</code> para armazenar um nome.</li><li>Um <code class=\"inline-code\">int</code> para armazenar uma idade.</li><li>Um <code class=\"inline-code\">float</code> para armazenar uma altura.</li></ul></li><li>Atribua valores a estas variáveis e, no final, imprima uma frase formatada, como por exemplo: \"O(A) aluno(a) [NOME] tem [IDADE] anos e mede [ALTURA] metros.\"</li><li>Poste o código <code class=\"inline-code\">.c</code> na Atividade \"Aula 6 - Variáveis, Constantes e Tipos Primitivos em C\" no Moodle.</li></ol><div class=\"mt-6\"><a class=\"btn btn-tonal inline-flex items-center gap-2\" href=\"https://eadsp.unichristus.edu.br\" target=\"_blank\" rel=\"noopener noreferrer\"><span>Acessar Moodle</span></a></div>"
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "💻 Teste seu Código Online",
      "content": "<p class=\"mb-4\">Abra o editor OnlineGDB em uma nova aba para compilar e executar seus programas em C.</p><a href=\"https://www.onlinegdb.com/online_c_compiler\" target=\"_blank\" rel=\"\" class=\"btn btn-tonal\">Abrir OnlineGDB</a>"
    },
    {
      "type": "checklist",
      "title": "✅ Checklist de Aprendizado",
      "description": "Marque os itens que você concluiu durante e após a aula:",
      "items": [
        "Entendi o conceito de variáveis e como declarar em C.",
        "Sei a diferença entre <code>int</code>, <code>float</code>, <code>double</code> e <code>char</code>.",
        "Pratiquei a criação e exibição de variáveis com <code>printf()</code>.",
        "Aprendi a usar <code>const</code> e <code>#define</code> para constantes.",
        "Testei meu código no OnlineGDB ou compilador local."
      ]
    },
    {
      "type": "bibliography",
      "title": "📚 Bibliografia Recomendada",
      "items": [
        "FORBELLONE, A. L. V; EBERSPÄCHER, H. F. <strong>Lógica de Programação: a construção de algoritmos e estruturas de dados.</strong> 4ª ed. São Paulo: Pearson, 2015.",
        "MANZANO, J. A. N. G; OLIVEIRA, J. F. <strong>Algoritmos: lógica para desenvolvimento de programação de computadores.</strong> 30ª ed. São Paulo: Érica, 2022.",
        "KERNIGHAN, B. W; RITCHIE, D. M. <strong>Linguagem de Programação C.</strong> 2ª ed. São Paulo: Pearson, 2014."
      ]
    }
  ]
}

{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-27",
  "title": "Aula 27: Programas Modulares com Múltiplas Funções",
  "summary": "Integra funções em arquitetura modular com arquivos separados, headers e fluxo de compilação incremental.",
  "objective": "Projetar um mini-sistema em C dividindo responsabilidades entre múltiplas funções e arquivos com headers dedicados.",
  "objectives": [
    "Planejar módulos e dependências utilizando canvas de design.",
    "Criar e incluir arquivos header com protótipos organizados.",
    "Automatizar compilação modular usando make ou scripts equivalentes."
  ],
  "competencies": ["05", "08", "12"],
  "skills": [
    "Estruturar projeto modular com separação entre arquivos fonte e cabeçalhos.",
    "Configurar fluxo de compilação incremental verificando dependências.",
    "Orquestrar revisão cruzada garantindo que cada módulo siga padrões definidos."
  ],
  "outcomes": [
    "Entrega projeto com múltiplos arquivos e build script funcionando.",
    "Documenta pipeline de compilação destacando passos e ferramentas utilizadas.",
    "Registra atas de revisão compartilhadas com responsáveis por cada módulo."
  ],
  "prerequisites": [
    "Aulas 25 e 26 concluídas.",
    "Familiaridade com linha de comando para compilação."
  ],
  "tags": ["modularizacao", "headers", "makefile"],
  "duration": 125,
  "modality": "in-person",
  "resources": [
    {
      "label": "Moodle — AVA (Unichristus)",
      "type": "platform",
      "url": "https://eadsp.unichristus.edu.br/"
    },
    {
      "label": "Canvas de design modular",
      "type": "worksheet",
      "file": "courses/algi/modular-design-canvas.md",
      "url": "https://static.md3.education/courses/algi/modular-design-canvas.md"
    },
    {
      "label": "Rubrica de modularização",
      "type": "rubric",
      "file": "courses/algi/modularizacao-rubrica.md",
      "url": "https://static.md3.education/courses/algi/modularizacao-rubrica.md"
    },
    {
      "label": "Playlist: Modularização em projetos C",
      "type": "playlist",
      "url": "https://www.youtube.com/playlist?list=PL85ITvJ7FLoiLzI0ul9nrSfoU4l-Ve4dP"
    },
    {
      "label": "OnlineGDB - Projeto C pré-configurado",
      "type": "tool",
      "url": "https://onlinegdb.com/7JwALg8qH"
    },
    {
      "label": "Replit - Workspace Algoritmos I",
      "type": "tool",
      "url": "https://replit.com/@md3-education/algi-template"
    },
    {
      "label": "VS Code - Template C com CMake",
      "type": "repository",
      "url": "https://github.com/md3-education/algi-c-template"
    },
    {
      "label": "Planilha de preparação pré-aula",
      "type": "spreadsheet",
      "url": "https://docs.google.com/spreadsheets/d/1ALGIprepTemplate"
    }
  ],
  "bibliography": [
    "MEYERS, S. Effective C. No Starch, 2021.",
    "KERNIGHAN, B.; PIKE, R. The Practice of Programming. Addison-Wesley, 2016.",
    "ROBILLARD, M. D. What Makes API Documentation Good?. IEEE Software, 2018."
  ],
  "assessment": {
    "type": "project",
    "description": "Projeto em squads: construir mini-sistema de triagem modular com build automatizado e relatório de integração."
  },
  "content": [
    {
      "type": "callout",
      "variant": "info",
      "title": "Warm-up (pré-aula)",
      "content": [
        {
          "type": "paragraph",
          "text": "Revise o plano de ensino e leia o trecho recomendado em Forbellone & Eberspächer relacionado a Programas Modulares com Múltiplas Funções. Assista ao vídeo indicado na playlist do Curso em Vídeo e anote dúvidas sobre o conteúdo descrito no sumário."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Verifique acesso ao OnlineGDB, Replit ou VS Code template para executar exemplos antes da aula."
            },
            {
              "text": "Preencha a planilha de preparação pré-aula com expectativas e dúvidas prioritárias."
            },
            {
              "text": "Confirme no Moodle a leitura das instruções da Aula 27."
            }
          ]
        }
      ]
    },
    {
      "type": "lessonPlan",
      "title": "Estrutura da aula",
      "cards": [
        {
          "icon": "target",
          "title": "Design",
          "content": "Grupos preenchem canvas definindo módulos Entrada, Domínio e Relatórios."
        },
        {
          "icon": "code",
          "title": "Headers",
          "content": "Demonstração de criação de `entrada.h` e `entrada.c` com `#ifndef` guard."
        },
        {
          "icon": "cpu",
          "title": "Build",
          "content": "Configuração de Makefile simples para compilar módulos individualmente."
        }
      ]
    },
    {
      "type": "flightPlan",
      "title": "Plano de voo (2h05)",
      "items": [
        "(15 min) Inspiração: padrões de modularização em projetos reais.",
        "(20 min) Preenchimento do canvas modular.",
        "(30 min) Mão na massa: criação de headers e implementação inicial.",
        "(30 min) Integração incremental com compilação modular.",
        "(15 min) Configuração de testes automáticos rodando por módulo.",
        "(15 min) Debrief coletivo com rubrica e próximos passos."
      ]
    },
    {
      "type": "promptTip",
      "title": "Prompt para planejar Programas Modulares com Múltiplas Funções",
      "description": "Use com o assistente para organizar seus estudos, revisar conteúdos e praticar com exercícios.",
      "audience": "estudantes de Algoritmos I",
      "prompt": "Você é estudante de Algoritmos I estudando Aula 27: Programas Modulares com Múltiplas Funções. Contexto da aula: Integra funções em arquitetura modular com arquivos separados, headers e fluxo de compilação incremental. Objetivo central: Projetar um mini-sistema em C dividindo responsabilidades entre múltiplas funções e arquivos com headers dedicados. Monte um plano de estudo dividido em revisão teórica, prática guiada e autoavaliação, indicando atividades de leitura, exercícios resolvidos em C ou pseudocódigo e perguntas de checagem que ajudem você a consolidar o conteúdo. Sugira estratégias para aprofundar o aprendizado, reforçar pontos frágeis e buscar ajuda quando necessário.",
      "tags": ["algoritmos", "headers", "makefile", "modularizacao"],
      "tips": [
        "Peça ao assistente variações de exercícios que reforcem planejar módulos e dependências utilizando canvas de design.",
        "Solicite exemplos adicionais relacionados a modularizacao, headers para praticar.",
        "Peça um checklist final para acompanhar suas dúvidas recorrentes e organizar revisões.",
        "Peça sugestões de autoavaliação que ajudem você a criar e incluir arquivos header com protótipos organizados."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Estratégias de separação",
      "content": [
        {
          "type": "list",
          "items": [
            "Agrupe funções relacionadas em um arquivo por domínio.",
            "Declare funções públicas no header; mantenha auxiliares como `static` no `.c`.",
            "Inclua somente os headers necessários para evitar dependências cíclicas."
          ]
        }
      ]
    },
    {
      "type": "md3Table",
      "title": "Makefile mínimo",
      "headers": ["Alvo", "Dependências", "Comando"],
      "rows": [
        [
          {
            "value": "app"
          },
          {
            "value": "main.o entrada.o dominio.o relatorios.o"
          },
          {
            "value": "gcc -Wall -Wextra -Werror $^ -o app"
          }
        ],
        [
          {
            "value": "%.o"
          },
          {
            "value": "%.c %.h"
          },
          {
            "value": "gcc -Wall -Wextra -Werror -c $<"
          }
        ],
        [
          {
            "value": "clean"
          },
          {
            "value": ""
          },
          {
            "value": "rm -f *.o app"
          }
        ]
      ]
    },
    {
      "type": "cardGrid",
      "title": "Papéis na squad",
      "cards": [
        {
          "title": "Arquiteto/a",
          "content": "Garante coesão entre módulos e revisa o canvas."
        },
        {
          "title": "Líder de testes",
          "content": "Mantém suíte de testes atualizada por módulo."
        },
        {
          "title": "Integrador/a",
          "content": "Configura Makefile e monitora builds."
        }
      ]
    },
    {
      "type": "checklist",
      "title": "Pronto para integrar",
      "items": [
        "Headers possuem guards e documentação de contratos.",
        "Makefile compila cada módulo isoladamente.",
        "Testes unitários passam sem regressões."
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "TED pós-aula",
      "content": [
        {
          "type": "paragraph",
          "text": "Prazo: submeta no Moodle até 23h59 do dia seguinte à aula. Formato: utilize a tarefa 'TED Aula 27' para anexar o artefato solicitado."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Submeta repositório ZIP com estrutura modular (src, include, tests) e Makefile gerado em sala."
            },
            {
              "text": "Inclua quadro de responsabilidades do squad e checklist de integração contínua."
            }
          ]
        },
        {
          "type": "paragraph",
          "text": "Rubrica de avaliação"
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Entrega dentro do prazo indicado no Moodle (20%)."
            },
            {
              "text": "Código ou artefato atende integralmente ao enunciado proposto (40%)."
            },
            {
              "text": "Testes e evidências documentadas na planilha ou relatório (25%)."
            },
            {
              "text": "Reflexão ou justificativa clara anexada na submissão (15%)."
            }
          ]
        },
        {
          "type": "paragraph",
          "text": "Registre dúvidas no fórum do Moodle antes do prazo final para receber orientação."
        }
      ]
    },
    {
      "type": "stepper",
      "title": "Decomposição em funções",
      "steps": [
        {
          "title": "Ler dados",
          "description": "Função input()"
        },
        {
          "title": "Processar",
          "description": "Função process()"
        },
        {
          "title": "Exibir",
          "description": "Função output()"
        }
      ]
    },
    {
      "type": "tabs",
      "title": "Protótipos × Implementação",
      "tabs": [
        {
          "label": "Protótipos",
          "code": "int soma(int a,int b);",
          "language": "c"
        },
        {
          "label": "Implementação",
          "code": "int soma(int a,int b){ return a+b; }",
          "language": "c"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "academic",
      "title": "Leitura recomendada",
      "content": [
        {
          "type": "list",
          "items": [
            "FORBELLONE, A. L. V.; EBERSPÄCHER, H. F. Algoritmos: Lógica para Desenvolvimento de Programas. Prentice Hall.",
            "MANZANO, J. A. N. G.; OLIVEIRA, J. F. Algoritmos: lógica para desenvolvimento de programação. Érica.",
            "BACKES, A. Linguagem C: completa e descomplicada. Elsevier."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Casos de teste sugeridos",
      "content": [
        {
          "type": "code",
          "code": "# Defina entradas e saídas esperadas para validar seu programa.",
          "language": "plaintext"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "good-practice",
      "title": "Boas práticas",
      "content": [
        {
          "type": "list",
          "items": [
            "Use nomes de variáveis autoexplicativos (ex.: total, media, indice).",
            "Evite números mágicos; use constantes quando apropriado.",
            "Comente trechos que expressem intenção (não o óbvio)."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "Erros comuns e refatorações",
      "content": [
        {
          "type": "list",
          "items": [
            "Leia o enunciado e valide entradas antes de processar.",
            "Inicialize variáveis; evite estados indefinidos."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "task",
      "title": "Check-out (fechamento rápido)",
      "content": [
        {
          "type": "list",
          "items": ["Registre 1 aprendizado e 1 dúvida.", "Entregue no AVA (campo de texto)."]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Gerador de casos de teste (Python)",
      "content": [
        {
          "type": "code",
          "code": "# Adapte para sua atividade: gere entradas aleatórias e imprima a saída esperada.",
          "language": "python"
        }
      ]
    }
  ],
  "metadata": {
    "status": "published",
    "updatedAt": "2025-10-02T08:28:28.992Z",
    "owners": ["Prof. Tiago Sombra"],
    "sources": [
      "Plano pedagógico Algoritmos I 2025.1",
      "Manual interno de integração contínua 2025"
    ]
  }
}

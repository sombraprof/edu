{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-17",
  "title": "Aula 17: Estrutura de Repetição while",
  "summary": "Introduz laços while para repetir blocos enquanto condições permanecem verdadeiras, aplicando sentinelas e validações.",
  "objective": "Compreender, modelar e implementar laços while controlados por condição e por sentinela.",
  "objectives": [
    "Identificar situações em que while é mais adequado que for ou decisões simples.",
    "Traduzir fluxogramas com laço enquanto em pseudocódigo/C.",
    "Planejar testes que cubram entradas válidas, inválidas e sentinelas."
  ],
  "competencies": ["05", "08", "11"],
  "skills": [
    "Definir invariantes e condições de parada adequadas para laços while.",
    "Implementar sentinelas e validação de entrada garantindo que o loop encerre corretamente.",
    "Documentar rastreamento de variáveis a cada iteração para explicar o comportamento do algoritmo."
  ],
  "outcomes": [
    "Entrega código com while e sentinela documentados, acompanhado de comentários sobre invariantes.",
    "Demonstra execução controlada com dados válidos e inválidos registrando comportamento esperado.",
    "Produz tabela de rastreamento que evidencia atualização de variáveis a cada ciclo."
  ],
  "prerequisites": ["Domínio de condicionais compostas e operadores lógicos."],
  "tags": ["loops", "while", "repeticao"],
  "duration": 90,
  "modality": "in-person",
  "resources": [
    {
      "label": "Moodle — AVA (Unichristus)",
      "type": "platform",
      "url": "https://eadsp.unichristus.edu.br/"
    }
  ],
  "bibliography": [
    "BACKES, A. Linguagem C: Completa e Descomplicada. Elsevier, 2019.",
    "MANZANO, J. Algoritmos. Érica, 2019."
  ],
  "assessment": {
    "type": "practice",
    "description": "Exercício guiado em dupla com entrega de pseudocódigo e tabela de testes ao final da aula."
  },
  "content": [
    {
      "type": "callout",
      "variant": "info",
      "title": "Warm-up (pré-aula)",
      "content": [
        {
          "type": "paragraph",
          "text": "Revise o plano de ensino e leia o trecho recomendado em Forbellone & Eberspächer relacionado a Estrutura de Repetição while. Assista ao vídeo indicado na playlist do Curso em Vídeo e anote dúvidas sobre o conteúdo descrito no sumário."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Verifique acesso ao OnlineGDB, Replit ou VS Code template para executar exemplos antes da aula."
            },
            {
              "text": "Preencha a planilha de preparação pré-aula com expectativas e dúvidas prioritárias."
            },
            {
              "text": "Confirme no Moodle a leitura das instruções da Aula 17."
            }
          ]
        }
      ]
    },
    {
      "type": "lessonPlan",
      "title": "Plano da Aula",
      "cards": [
        {
          "icon": "book-open",
          "title": "Diagnóstico",
          "content": "Mapear rapidamente problemas reais dos estudantes que exigem repetição controlada antes de codificar."
        },
        {
          "icon": "gears",
          "title": "Fluxo e invariantes",
          "content": "Construir fluxograma e pseudocódigo destacando condição de parada, invariantes e sentinelas."
        },
        {
          "icon": "code",
          "title": "Laboratório em duplas",
          "content": "Implementar em C um while com validação incremental, comentando cada etapa em pares."
        },
        {
          "icon": "check-circle",
          "title": "Validação e TED",
          "content": "Rodar a planilha de testes, consolidar aprendizados e detalhar a entrega com critérios claros."
        }
      ]
    },
    {
      "type": "flightPlan",
      "title": "Plano de voo (1 h 30 min)",
      "items": [
        "(5 min) Check-in: relembre motivos para usar while e alinhe a agenda.",
        "(15 min) Diagnóstico guiado: estudantes compartilham cenários reais; professores destacam padrões de repetição.",
        "(15 min) Modelagem comentada: elaborar fluxograma/pseudocódigo com foco em invariantes e condição de parada.",
        "(15 min) Oficina 1: simulação no papel criando tabela de rastreamento e debatendo saídas esperadas.",
        "(5 min) Intervalo rápido e reorganização das duplas.",
        "(15 min) Oficina 2: implementação orientada no C com atenção à validação de entrada.",
        "(15 min) Testes orientados: preencher planilha com valores típicos, inválidos e sentinelas e registrar achados.",
        "(5 min) Retrospectiva: sintetizar armadilhas descobertas e apresentar os itens da TED."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Por que laços while importam agora",
      "content": [
        {
          "type": "paragraph",
          "text": "Nesta etapa do curso os estudantes já dominam condicionais e estruturas com contagem fixa. O while surge para resolver situações em que a quantidade de repetições depende dos dados que chegam."
        },
        {
          "type": "paragraph",
          "text": "Além de habilitar o tratamento de sentinelas e validação de entrada, compreender o while é pré-requisito para lidar com leituras de arquivos, integrações em tempo real e menus interativos."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Quando usar while",
      "content": [
        {
          "type": "paragraph",
          "text": "Utilize o laço while quando o número de iterações for desconhecido e a condição de repetição precisar ser validada antes da execução do bloco. Ele é ideal para situações como:"
        },
        {
          "type": "list",
          "ordered": false,
          "items": [
            "Leitura de dados até encontrar um valor especial (sentinela).",
            "Validação de entrada, repetindo a solicitação até que o usuário forneça um dado correto.",
            "Monitoramento de sensores ou processos enquanto uma condição específica for mantida."
          ]
        }
      ]
    },
    {
      "type": "md3Table",
      "title": "Cola rápida: for vs. while vs. do-while",
      "headers": ["Situação", "for", "while", "do-while"],
      "rows": [
        [
          { "value": "Contagem conhecida" },
          { "value": "✅" },
          { "value": "⚠️" },
          { "value": "⚠️" }
        ],
        [
          { "value": "Condição avaliada antes" },
          { "value": "✅" },
          { "value": "✅" },
          { "value": "❌" }
        ],
        [
          { "value": "Executar ao menos 1 vez" },
          { "value": "❌" },
          { "value": "❌" },
          { "value": "✅" }
        ],
        [
          { "value": "Leitura com sentinela" },
          { "value": "⚠️" },
          { "value": "✅" },
          { "value": "✅" }
        ]
      ],
      "summary": "(⚠️ = possível, mas não é o mais natural)"
    },
    {
      "type": "contentBlock",
      "title": "Componentes do laço while",
      "content": [
        {
          "type": "orderedList",
          "items": [
            "Inicialização: definir variáveis de controle e valores acumuladores.",
            "Condição: expressar claramente a regra que mantém o laço executando.",
            "Corpo do laço: atualizar acumuladores, processar entradas e fornecer feedback.",
            "Avanço de estado: alterar variáveis monitoradas para progredir rumo à condição de parada.",
            "Validação: tratar dados inválidos antes de voltar ao início, evitando contaminação do estado."
          ]
        }
      ]
    },
    {
      "type": "md3Flowchart",
      "title": "Fluxo: média com sentinela",
      "summary": "Fluxograma que representa a leitura de notas até o usuário digitar -1.",
      "nodes": [
        {
          "id": "start",
          "type": "start",
          "title": "Início"
        },
        {
          "id": "read",
          "type": "process",
          "title": "Ler nota",
          "summary": "Solicita entrada da usuária."
        },
        {
          "id": "check",
          "type": "decision",
          "title": "Nota é -1?",
          "branches": [
            {
              "id": "is-sentinel",
              "label": "Sim",
              "target": "average",
              "description": "Encerrar leituras e calcular média"
            },
            {
              "id": "not-sentinel",
              "label": "Não",
              "target": "accumulate",
              "description": "Somar e contar"
            }
          ]
        },
        {
          "id": "accumulate",
          "type": "process",
          "title": "Acumular nota",
          "summary": "Soma valor e incrementa contador."
        },
        {
          "id": "loop",
          "type": "process",
          "title": "Repetir entrada",
          "summary": "Retorna para leitura."
        },
        {
          "id": "average",
          "type": "process",
          "title": "Calcular média",
          "summary": "Divide soma pelo contador."
        },
        {
          "id": "end",
          "type": "end",
          "title": "Fim"
        }
      ],
      "connections": [
        {
          "from": "start",
          "to": "read"
        },
        {
          "from": "read",
          "to": "check"
        },
        {
          "from": "accumulate",
          "to": "loop"
        },
        {
          "from": "loop",
          "to": "read",
          "kind": "loop",
          "label": "Próxima nota"
        },
        {
          "from": "average",
          "to": "end"
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Lendo o fluxograma passo a passo",
      "content": [
        {
          "type": "paragraph",
          "text": "Iniciamos consultando a entrada do usuário e, antes de qualquer cálculo, verificamos se ela corresponde ao sentinela. Essa checagem precoce evita adicionar valores que deveriam apenas encerrar o ciclo."
        },
        {
          "type": "paragraph",
          "text": "Quando a nota é válida, acumulamos e incrementamos o contador. Em seguida retornamos ao nó de leitura, garantindo que sempre exista uma atualização de estado antes da próxima verificação."
        },
        {
          "type": "paragraph",
          "text": "Ao sair do laço, lidamos com dois cenários: se ao menos uma nota válida foi processada, calculamos a média; caso contrário, exibimos uma mensagem clara para não confundir a pessoa usuária."
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Validação de entradas obrigatória",
      "content": [
        {
          "type": "list",
          "items": [
            {
              "text": "Rejeite notas fora do intervalo 0-10 antes de acumular."
            },
            {
              "text": "Solicite nova entrada quando usuário digitar valor inválido."
            },
            {
              "text": "Documente na planilha os casos rejeitados e o comportamento esperado."
            }
          ]
        }
      ]
    },
    {
      "type": "videos",
      "title": "Reforço multimídia",
      "videos": [
        {
          "title": "Comandos do while (Curso em Vídeo, 2022)",
          "src": "https://www.youtube.com/embed/GGHR93PKsXc"
        },
        {
          "title": "Domine o while passo a passo (Guanabara)",
          "src": "https://www.youtube.com/embed/FhM-rXPALL8"
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Exemplo comentado: média até sentinela",
      "content": [
        {
          "type": "paragraph",
          "text": "O trecho abaixo apresenta uma implementação minimalista em C. Observe como cada etapa está alinhada aos componentes do laço while descritos anteriormente."
        },
        {
          "type": "code",
          "language": "c",
          "code": "#include <stdio.h>\n\nint main(void) {\n  int nota = 0;\n  int soma = 0;\n  int quantidade = 0;\n\n  printf(\"Digite uma nota entre 0 e 10 ou -1 para encerrar: \");\n  while (scanf(\"%d\", &nota) == 1 && nota != -1) {\n    if (nota < 0 || nota > 10) {\n      printf(\"Valor invalido. Tente novamente: \");\n      continue;\n    }\n\n    soma += nota;\n    quantidade++;\n    printf(\"Digite outra nota ou -1 para encerrar: \");\n  }\n\n  if (quantidade > 0) {\n    printf(\"Media final: %.2f\\n\", (float)soma / quantidade);\n  } else {\n    printf(\"Nenhuma nota valida informada.\\n\");\n  }\n\n  return 0;\n}\n"
        },
        {
          "type": "paragraph",
          "text": "A validação é feita imediatamente após a leitura, garantindo que valores fora da faixa não impactem os acumuladores. Também garantimos que a mensagem final trate adequadamente os casos sem entrada válida."
        }
      ]
    },
    {
      "type": "md3Table",
      "title": "Rastreamento da média (entrada 8, 7, 11, 6, -1)",
      "headers": ["Iteração", "Entrada lida", "Acumulador", "Quantidade", "Ação tomada"],
      "rows": [
        [
          {
            "value": "1"
          },
          {
            "value": "8"
          },
          {
            "value": "8"
          },
          {
            "value": "1"
          },
          {
            "value": "Valor válido somado"
          }
        ],
        [
          {
            "value": "2"
          },
          {
            "value": "7"
          },
          {
            "value": "15"
          },
          {
            "value": "2"
          },
          {
            "value": "Valor válido somado"
          }
        ],
        [
          {
            "value": "3"
          },
          {
            "value": "11"
          },
          {
            "value": "15"
          },
          {
            "value": "2"
          },
          {
            "value": "Entrada rejeitada (fora da faixa)"
          }
        ],
        [
          {
            "value": "4"
          },
          {
            "value": "6"
          },
          {
            "value": "21"
          },
          {
            "value": "3"
          },
          {
            "value": "Valor válido somado"
          }
        ],
        [
          {
            "value": "5"
          },
          {
            "value": "-1"
          },
          {
            "value": "21"
          },
          {
            "value": "3"
          },
          {
            "value": "Sentinela detectado, encerra laço"
          }
        ]
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Casos de teste sugeridos",
      "content": [
        {
          "type": "paragraph",
          "text": "Use os cenários abaixo para complementar a tabela de rastreamento e verificar se o while responde corretamente a entradas desafiadoras."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Notas: 7 8 9 -1 → média 8.0 (caminho feliz)."
            },
            {
              "text": "Notas: 10 11 5 -1 → rejeita 11, recalcula média com válidas (8.3)."
            },
            {
              "text": "Notas: -1 → nenhuma nota válida, informar mensagem de ausência."
            }
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "good-practice",
      "title": "Boas práticas",
      "content": [
        {
          "type": "list",
          "items": [
            "Use nomes de variáveis autoexplicativos (ex.: total, media, indice).",
            "Evite números mágicos; use constantes quando apropriado.",
            "Comente trechos que expressem intenção (não o óbvio).",
            "Garanta avanço de estado dentro do laço para evitar loops infinitos."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "Erros comuns e refatorações",
      "content": [
        {
          "type": "list",
          "items": [
            "Leia o enunciado e valide entradas antes de processar.",
            "Inicialize variáveis; evite estados indefinidos.",
            "Documente invariantes e atualizações de variáveis dentro do laço."
          ]
        },
        {
          "type": "paragraph",
          "text": "<strong>Anti-exemplo</strong>"
        },
        {
          "type": "code",
          "code": "while (x != 0) { /* não altera x */ }",
          "language": "c"
        },
        {
          "type": "paragraph",
          "text": "<strong>Refatorado</strong>"
        },
        {
          "type": "code",
          "code": "while (x != 0) { /* ... */ scanf(\"%d\", &x); }",
          "language": "c"
        }
      ]
    },
    {
      "type": "parsons",
      "title": "While — somatório até zero",
      "instructions": "Reordene para somar números até digitar 0.",
      "lines": [
        "int x = 0;",
        "scanf(\"%d\", &x);",
        "while (x != 0) {",
        "  soma += x;",
        "  scanf(\"%d\", &x);",
        "}",
        "printf(\"%d\", soma);"
      ],
      "solution": [
        "int x = 0;",
        "scanf(\"%d\", &x);",
        "while (x != 0) {",
        "  soma += x;",
        "  scanf(\"%d\", &x);",
        "}",
        "printf(\"%d\", soma);"
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Gerador de casos de teste (C)",
      "content": [
        {
          "type": "code",
          "language": "c",
          "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nstatic int gerar_nota(void) {\n  return (rand() % 120) - 10;\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  for (int caso = 1; caso <= 5; ++caso) {\n    int soma = 0;\n    int count = 0;\n\n    printf(\"Caso %d: \", caso);\n    while (1) {\n      int nota = gerar_nota();\n      if (nota > 100) {\n        nota = -1;\n      }\n      printf(\"%d \", nota);\n      if (nota == -1) {\n        break;\n      }\n      if (nota >= 0 && nota <= 10) {\n        soma += nota;\n        count++;\n      }\n    }\n\n    if (count > 0) {\n      printf(\"-> media esperada %.2f\\n\", (float)soma / count);\n    } else {\n      printf(\"-> nenhuma nota valida\\n\");\n    }\n  }\n\n  return 0;\n}\n"
        },
        {
          "type": "paragraph",
          "text": "Utilize os casos gerados para completar a planilha de testes antes de rodar o programa final."
        }
      ]
    },
    {
      "type": "callout",
      "variant": "academic",
      "title": "Leitura recomendada",
      "content": [
        {
          "type": "list",
          "items": [
            "FORBELLONE, A. L. V.; EBERSPÄCHER, H. F. Algoritmos: Lógica para Desenvolvimento de Programas. Prentice Hall.",
            "MANZANO, J. A. N. G.; OLIVEIRA, J. F. Algoritmos: lógica para desenvolvimento de programação. Érica.",
            "BACKES, A. Linguagem C: completa e descomplicada. Elsevier."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "TED 17 – Média até sentinela",
      "content": [
        {
          "type": "paragraph",
          "text": "Envie até 23h59 do dia seguinte: código em C, planilha de testes e breve relato explicando a lógica de saída."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Arquivo aula17_media_while.c."
            },
            {
              "text": "Planilha 'TED17_while.xlsx' com casos válidos, inválidos e sentinela."
            },
            {
              "text": "Parágrafo no Moodle descrevendo como evita loops infinitos."
            }
          ]
        }
      ]
    },
    {
      "type": "checklist",
      "title": "Ao final, garanta que você",
      "items": [
        "Definiu sentinelas e condições de parada claramente.",
        "Registrou o comportamento esperado quando nenhuma nota válida é informada.",
        "Validou entradas negativas fora do sentinela."
      ]
    }
  ],
  "metadata": {
    "status": "published",
    "updatedAt": "2025-10-02T08:28:28.981Z",
    "owners": ["Prof. Tiago Sombra"],
    "sources": ["Plano pedagógico Algoritmos I 2025.1", "Roteiro de laboratório while 2025"]
  }
}

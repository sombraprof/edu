{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-35",
  "title": "Introdução a Structs (Registros)",
  "summary": "Apresenta structs em C como registros compostos e conduz um CRUD básico em memória para consolidar o modelo de dados.",
  "description": "Apresenta structs em C como registros compostos e organiza um CRUD inicial para consolidar o modelo de dados.",
  "objective": "Compreender a declaração, instância e manipulação inicial de structs em C, preparando-se para coleções de registros.",
  "objectives": [
    "Declarar structs com campos adequados ao domínio proposto.",
    "Inicializar e acessar membros por ponto e ponteiros.",
    "Construir um mini-CRUD em memória com ênfase em criação e leitura."
  ],
  "competencies": ["05", "11"],
  "skills": [
    "Definir structs representando registros compostos com campos coerentes.",
    "Implementar operações CRUD em memória validando entrada e saída de dados.",
    "Registrar casos de teste que comprovem a integridade do fluxo de operações."
  ],
  "outcomes": [
    "Entrega módulo com definição de struct e funções para criar, ler, atualizar e remover registros.",
    "Anexa log de testes cobrindo operações bem-sucedidas e tratamento de erros.",
    "Apresenta documentação resumida orientando como utilizar o CRUD implementado."
  ],
  "prerequisites": [
    "Conhecimento de vetores simples (Aula 30).",
    "Noções de funções e passagem de parâmetros."
  ],
  "tags": ["structs", "crud", "revisao"],
  "duration": 100,
  "modality": "in-person",
  "resources": [
    {
      "label": "Moodle — AVA (Unichristus)",
      "type": "plataforma",
      "url": "https://ava.unichristus.edu.br/"
    }
  ],
  "bibliography": [
    "KERNIGHAN, B.; RITCHIE, D. Linguagem de Programação C. 2. ed. Pearson, 2021.",
    "PRESSMAN, R. Engenharia de Software. McGraw Hill, 2023."
  ],
  "content": [
    {
      "type": "contentBlock",
      "title": "Atividade em sala",
      "content": [
        {
          "type": "paragraph",
          "text": "Em duplas ou trios, resolvam as questões a seguir para reforçar o aprendizado durante a aula."
        },
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Questão teórica",
              "text": "Explique com suas palavras os principais conceitos abordados em \"Introdução a Structs (Registros)\" e destaque por que eles são importantes para a resolução de problemas."
            },
            {
              "title": "Questão prática",
              "text": "Implemente ou descreva um exemplo curto relacionado a \"Introdução a Structs (Registros)\" utilizando OnlineGDB ou Dev-C++ e compartilhe o resultado com o grupo."
            }
          ]
        }
      ]
    },
    {
      "type": "videos",
      "title": "Vídeos de apoio",
      "videos": [
        {
          "title": "Laço for e laço for aninhado | Linguagem C #009",
          "src": "https://www.youtube.com/embed/58aAZEUlHqU"
        },
        {
          "title": "Linguagem C | Aula 44 - Parâmetros da função",
          "src": "https://www.youtube.com/embed/5BBD_IfFUtk"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Warm-up (pré-aula)",
      "content": [
        {
          "type": "paragraph",
          "text": "Revise os materiais desta aula aqui no site e anote os pontos-chave que precisam de atenção. Identifique dúvidas ou conceitos que merecem ser revisitados durante o encontro."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Reserve alguns minutos para tentar resolver mentalmente um exemplo relacionado ao tema da aula."
            },
            {
              "text": "Garanta acesso ao OnlineGDB ou ao Dev-C++ para experimentar os códigos durante a aula."
            }
          ]
        }
      ]
    },
    {
      "type": "lessonPlan",
      "title": "Roteiro detalhado",
      "cards": [
        {
          "icon": "clock",
          "title": "Aquecimento",
          "content": "Quiz com cinco cenários para identificar campos de dados (10 min)."
        },
        {
          "icon": "database",
          "title": "Sintaxe de struct",
          "content": "Declaração, typedef e alinhamento na memória (25 min)."
        },
        {
          "icon": "code",
          "title": "Manipulação",
          "content": "Atribuições, acesso por ponto/seta e funções auxiliares (20 min)."
        },
        {
          "icon": "gears",
          "title": "Mini-CRUD",
          "content": "Criar e listar registros de Empresas em vetor fixo (35 min)."
        },
        {
          "icon": "check-circle",
          "title": "Retrospectiva",
          "content": "Mapa mental com principais boas práticas (15 min)."
        }
      ]
    },
    {
      "type": "promptTip",
      "title": "Prompt para planejar Introdução a Structs (Registros)",
      "description": "Use com o assistente para organizar seus estudos, revisar conteúdos e praticar com exercícios.",
      "audience": "estudantes de Algoritmos I",
      "prompt": "Você é estudante de Algoritmos I estudando Introdução a Structs (Registros). Contexto da aula: Apresenta structs em C como registros compostos e conduz um CRUD básico em memória para consolidar o modelo de dados. Objetivo central: Compreender a declaração, instância e manipulação inicial de structs em C, preparando-se para coleções de registros. Monte um plano de estudo dividido em revisão teórica, prática guiada e autoavaliação, indicando atividades de leitura, exercícios resolvidos em C ou pseudocódigo e perguntas de checagem que ajudem você a consolidar o conteúdo. Sugira estratégias para aprofundar o aprendizado, reforçar pontos frágeis e buscar ajuda quando necessário.",
      "tags": ["algoritmos", "crud", "revisao", "structs"],
      "tips": [
        "Peça ao assistente variações de exercícios que reforcem declarar structs com campos adequados ao domínio proposto.",
        "Solicite exemplos adicionais relacionados a structs, crud para praticar.",
        "Peça um checklist final para acompanhar suas dúvidas recorrentes e organizar revisões.",
        "Peça sugestões de autoavaliação que ajudem você a inicializar e acessar membros por ponto e ponteiros."
      ]
    },
    {
      "type": "lessonPlan",
      "title": "Plano de voo (1h40)",
      "cards": [
        {
          "icon": "check-circle",
          "title": "9 min",
          "content": "Icebreaker com cartões de atributos empresariais."
        },
        {
          "icon": "check-circle",
          "title": "(18 min) Live coding",
          "content": "declaração e inicialização de Empresa."
        },
        {
          "icon": "check-circle",
          "title": "(13 min) Exercício individual",
          "content": "função para imprimir struct formatada."
        },
        {
          "icon": "check-circle",
          "title": "(26 min) Laboratório guiado",
          "content": "operações create/list com vetor local."
        },
        {
          "icon": "check-circle",
          "title": "(17 min) Debriefing",
          "content": "decisões de modelagem e validação de dados."
        },
        {
          "icon": "check-circle",
          "title": "17 min",
          "content": "Check-out com quiz interativo (Kahoot) sobre sintaxe de structs."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Componentes essenciais de um registro",
      "content": [
        {
          "type": "unorderedList",
          "items": [
            {
              "text": "Elemento: Campos | Descrição: Definem as informações necessárias do domínio. | Exemplo: int id; char nome[64]; | Boas práticas: Escolha tipos apropriados e limites realistas."
            },
            {
              "text": "Elemento: Typedef | Descrição: Simplifica a declaração de variáveis do registro. | Exemplo: typedef struct { ... } Empresa; | Boas práticas: Use nomes no singular representando a entidade."
            },
            {
              "text": "Elemento: Funções auxiliares | Descrição: Centralizam operações comuns sobre o registro. | Exemplo: void imprimir(const Empresa *e); | Boas práticas: Evite duplicar prints/formatos no código."
            },
            {
              "text": "Elemento: Constantes | Descrição: Guardam limites e tamanhos máximos. | Exemplo: #define MAX_EMPRESAS 50 | Boas práticas: Documente o motivo do limite em comentários."
            },
            {
              "text": "Elemento: Documentação | Descrição: Explica finalidade e origem dos campos. | Exemplo: // Faturamento médio mensal (R$) | Boas práticas: Padronize comentários para revisão coletiva."
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Prática de laboratório: CRUD em memória",
      "content": [
        {
          "type": "paragraph",
          "text": "Os squads implementam um CRUD mínimo (Create/Read) apenas em memória usando um vetor de structs Empresa. Cada equipe documenta o fluxo em um quadro Kanban simplificado para registrar progresso."
        },
        {
          "type": "orderedList",
          "items": [
            {
              "text": "Modelar struct Empresa alinhada aos dados do SEBRAE/IBGE trabalhados no semestre."
            },
            {
              "text": "Codificar funções create/list, validando tamanhos e duplicidade de id."
            },
            {
              "text": "Preparar checklist de testes exploratórios baseado na rubrica compartilhada."
            }
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "good-practice",
      "title": "Integração com dados oficiais",
      "content": [
        {
          "type": "paragraph",
          "text": "Utilize dados de perfil do Microempreendedor Individual disponíveis no portal do SEBRAE para sugerir campos realistas e discutir ética no uso de dados."
        }
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "TED pós-aula",
      "content": [
        {
          "type": "paragraph",
          "text": "Reserve um momento após a aula para concluir a atividade descrita a seguir. Ela complementa os estudos e ajuda a consolidar o que foi trabalhado em sala."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Desenvolva a prática proposta na aula registrando os passos e resultados no caderno ou no editor de sua preferência."
            },
            {
              "text": "Anote dúvidas e insights que surgirem para discutirmos na próxima aula."
            }
          ]
        }
      ]
    },
    {
      "type": "tabs",
      "title": "Struct — definição × uso",
      "tabs": [
        {
          "label": "Definição",
          "code": "typedef struct { char nome[50]; int idade; } Pessoa;",
          "language": "c"
        },
        {
          "label": "Uso",
          "code": "Pessoa p; scanf(\"%s %d\", p.nome, &p.idade);",
          "language": "c"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "academic",
      "title": "Leitura recomendada",
      "content": [
        {
          "type": "list",
          "items": [
            "FORBELLONE, A. L. V.; EBERSPÄCHER, H. F. Algoritmos: Lógica para Desenvolvimento de Programas. Prentice Hall.",
            "MANZANO, J. A. N. G.; OLIVEIRA, J. F. Algoritmos: lógica para desenvolvimento de programação. Érica.",
            "BACKES, A. Linguagem C: completa e descomplicada. Elsevier."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Casos de teste sugeridos",
      "content": [
        {
          "type": "code",
          "code": "# Struct Pessoa\nEntrada: Ana 20 -> Pessoa{nome=Ana, idade=20}",
          "language": "plaintext"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "Erros comuns e refatorações",
      "content": [
        {
          "type": "list",
          "items": [
            "Leia o enunciado e valide entradas antes de processar.",
            "Inicialize variáveis; evite estados indefinidos."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "task",
      "title": "Check-out (fechamento rápido)",
      "content": [
        {
          "type": "list",
          "items": ["Registre 1 aprendizado e 1 dúvida.", "Entregue no AVA (campo de texto)."]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Gerador de casos de teste (C)",
      "content": [
        {
          "type": "code",
          "language": "c",
          "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\ntypedef struct {\n  int id;\n  char nome[16];\n  int idade;\n} Paciente;\n\nvoid gerarNome(char destino[], int id) {\n  snprintf(destino, 16, \"Paciente%02d\", id);\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  Paciente p;\n  p.id = rand() % 90 + 10;\n  gerarNome(p.nome, p.id);\n  p.idade = rand() % 60 + 18;\n\n  printf(\"Registro gerado:\\nID: %d\\nNome: %s\\nIdade: %d\\n\", p.id, p.nome, p.idade);\n  printf(\"Saida esperada: atualizar CRUD em memoria com esses campos.\\n\");\n\n  return 0;\n}"
        }
      ]
    }
  ],
  "metadata": {
    "status": "draft",
    "updatedAt": "2025-10-02T08:28:29.004Z",
    "owners": ["Equipe Algoritmos I", "Prof. Tiago Sombra"],
    "sources": ["Plano de ensino Algoritmos I 2025.2", "Relatórios SEBRAE 2024"]
  },
  "assessment": {
    "type": "prática",
    "description": "Prática orientada para fortalecer os conceitos trabalhados em aula. Registre suas soluções e dúvidas para acompanhamento posterior."
  }
}

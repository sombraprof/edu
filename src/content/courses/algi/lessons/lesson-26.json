{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-26",
  "title": "Aula 26: Funções com Parâmetros e Retorno",
  "summary": "Explora assinatura completa de funções em C, analisando passagem de parâmetros por valor e por referência com foco em testes.",
  "objective": "Aplicar parâmetros e valores de retorno para construir funções reutilizáveis que tratam entradas variadas com segurança.",
  "objectives": [
    "Comparar passagem por valor e por referência em C.",
    "Projetar funções que retornam códigos de erro ou resultados numéricos.",
    "Documentar contratos (pré e pós-condições) para cada função criada."
  ],
  "competencies": ["05", "08", "11"],
  "skills": [
    "Implementar funções com parâmetros por valor e por referência conforme necessidade.",
    "Construir casos de teste que validem contratos de entrada e saída.",
    "Documentar brevemente cada função explicando propósito e efeitos colaterais."
  ],
  "outcomes": [
    "Entrega código com funções parametrizadas e comentários sobre uso de ponteiros.",
    "Anexa suíte de testes cobrindo cenários positivos, negativos e limites.",
    "Registra documentação resumida disponível para colegas reutilizarem as funções."
  ],
  "prerequisites": [
    "Aula 25 concluída com atividades de modularização.",
    "Conhecimentos básicos de ponteiros."
  ],
  "tags": ["funcoes", "parametros", "ponteiros"],
  "duration": 100,
  "modality": "hybrid",
  "resources": [
    {
      "label": "Moodle — AVA (Unichristus)",
      "type": "plataforma",
      "url": "https://ava.unichristus.edu.br/"
    },
    {
      "label": "Boas práticas de modularização (Moodle)",
      "type": "guide",
      "url": "https://raw.githubusercontent.com/md3-content/edu/main/docs/didactics/modularizacao-boas-praticas.md"
    }
  ],
  "bibliography": [
    "ZIVIANI, N. Projetos de Algoritmos. Cengage, 2020.",
    "FORBELLONE, A. L. V.; EBERSPÄCHER, H. F. Lógica de Programação. Pearson, 2020.",
    "BACKES, A. Linguagem C: Completa e Descomplicada. Elsevier, 2019."
  ],
  "assessment": {
    "type": "prática",
    "description": "Prática orientada para fortalecer os conceitos trabalhados em aula. Registre suas soluções e dúvidas para acompanhamento posterior."
  },
  "content": [
    {
      "type": "callout",
      "variant": "info",
      "title": "Warm-up (pré-aula)",
      "content": [
        {
          "type": "paragraph",
          "text": "Revise os materiais desta aula aqui no site e anote os pontos-chave que precisam de atenção. Identifique dúvidas ou conceitos que merecem ser revisitados durante o encontro."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Reserve alguns minutos para tentar resolver mentalmente um exemplo relacionado ao tema da aula."
            },
            {
              "text": "Garanta acesso ao OnlineGDB ou ao Dev-C++ para experimentar os códigos durante a aula."
            }
          ]
        }
      ]
    },
    {
      "type": "lessonPlan",
      "title": "Roteiro",
      "cards": [
        {
          "icon": "book-open",
          "title": "Assinatura",
          "content": "Desmontamos a assinatura de uma função real e avaliamos parâmetros obrigatórios/opcionais."
        },
        {
          "icon": "gears",
          "title": "Por valor x por referência",
          "content": "Simulações no quadro demonstram efeitos (ou não) sobre variáveis externas."
        },
        {
          "icon": "check-circle",
          "title": "Contratos",
          "content": "Discussão sobre pré-condições, pós-condições e mensagens de erro padronizadas."
        }
      ]
    },
    {
      "type": "flightPlan",
      "title": "Plano de voo (1h40)",
      "items": [
        "(13 min) Revisão rápida de funções sem parâmetros.",
        "(22 min) Demonstração: calculadora modular usando parâmetros.",
        "(22 min) Atividade síncrona: refatorar leitura e validação de dados em ponteiros.",
        "(17 min) Oficina assíncrona orientada no laboratório (parametrização avançada).",
        "(13 min) Revisão cruzada usando a rubrica de modularização.",
        "(13 min) Registro de contratos e métricas de testes no mural digital."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Atividade em sala",
      "content": [
        {
          "type": "paragraph",
          "text": "Em duplas ou trios, resolvam as questões a seguir para reforçar o aprendizado durante a aula."
        },
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Questão teórica",
              "text": "Explique com suas palavras os principais conceitos abordados em \"Funções com Parâmetros e Retorno\" e destaque por que eles são importantes para a resolução de problemas."
            },
            {
              "title": "Questão prática",
              "text": "Implemente ou descreva um exemplo curto relacionado a \"Funções com Parâmetros e Retorno\" utilizando OnlineGDB ou Dev-C++ e compartilhe o resultado com o grupo."
            }
          ]
        }
      ]
    },
    {
      "type": "promptTip",
      "title": "Prompt para planejar Funções com Parâmetros e Retorno",
      "description": "Use com o assistente para organizar seus estudos, revisar conteúdos e praticar com exercícios.",
      "audience": "estudantes de Algoritmos I",
      "prompt": "Você é estudante de Algoritmos I estudando Aula 26: Funções com Parâmetros e Retorno. Contexto da aula: Explora assinatura completa de funções em C, analisando passagem de parâmetros por valor e por referência com foco em testes. Objetivo central: Aplicar parâmetros e valores de retorno para construir funções reutilizáveis que tratam entradas variadas com segurança. Monte um plano de estudo dividido em revisão teórica, prática guiada e autoavaliação, indicando atividades de leitura, exercícios resolvidos em C ou pseudocódigo e perguntas de checagem que ajudem você a consolidar o conteúdo. Sugira estratégias para aprofundar o aprendizado, reforçar pontos frágeis e buscar ajuda quando necessário.",
      "tags": ["algoritmos", "funcoes", "parametros", "ponteiros"],
      "tips": [
        "Peça ao assistente variações de exercícios que reforcem comparar passagem por valor e por referência em c.",
        "Solicite exemplos adicionais relacionados a funcoes, parametros para praticar.",
        "Peça um checklist final para acompanhar suas dúvidas recorrentes e organizar revisões.",
        "Peça sugestões de autoavaliação que ajudem você a projetar funções que retornam códigos de erro ou resultados numéricos."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Quando usar ponteiros?",
      "content": [
        {
          "type": "paragraph",
          "text": "Use ponteiros para devolver múltiplos resultados ou atualizar variáveis externas sem recorrer a globais."
        },
        {
          "type": "list",
          "items": [
            "Atualizar saldos, contadores ou flags compartilhadas.",
            "Retornar códigos de erro além do valor principal.",
            "Compartilhar buffers de leitura para evitar cópias desnecessárias."
          ]
        }
      ]
    },
    {
      "type": "videosBlock",
      "title": "Vídeos de apoio",
      "videos": [
        {
          "youtubeId": "SwdNXx2A3YE",
          "title": "Ponteiros para iniciantes"
        },
        {
          "youtubeId": "2hgYQ1YF5AQ",
          "title": "Passagem de parâmetros em C na prática"
        }
      ]
    },
    {
      "type": "cardGrid",
      "title": "Exemplos guiados",
      "cards": [
        {
          "title": "Validar entrada",
          "content": "`int validar_idade(int idade)` retorna 1/0 sinalizando validade."
        },
        {
          "title": "Atualizar saldo",
          "content": "`void atualizar_saldo(double *saldo, double deposito)` altera valor via ponteiro."
        },
        {
          "title": "Converter unidades",
          "content": "`int converter_minutos_para_segundos(int minutos)` retorna -1 para entradas inválidas."
        }
      ]
    },
    {
      "type": "code",
      "language": "c",
      "title": "Suite rápida de asserts",
      "code": "#include <assert.h>\n\nint validar_idade(int idade); // protótipo declarado em header\nvoid atualizar_saldo(double *saldo, double deposito);\n\nvoid testar_validacoes(void) {\n  assert(validar_idade(18) == 1);\n  assert(validar_idade(-1) == 0);\n\n  double carteira = 100.0;\n  atualizar_saldo(&carteira, 50.0);\n  assert(carteira == 150.0);\n}\n"
    },
    {
      "type": "checklist",
      "title": "Checklist de contratos",
      "items": [
        "Listei pré-condições nos comentários.",
        "Descrevi retorno e códigos de erro.",
        "Cobri casos limite nos testes unitários."
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "TED pós-aula",
      "content": [
        {
          "type": "paragraph",
          "text": "Implemente e refatore incrementalmente funções parametrizadas, documentando responsabilidades e anexando asserts que validem cada incremento."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "No relatório da squad, descreva a sequência de incrementos (dados, processamento, saída) e respectivos responsáveis."
            },
            {
              "text": "Atualize comentários das funções explicando contratos e cite os asserts usados para confirmar o comportamento."
            }
          ]
        }
      ]
    },
    {
      "type": "stepper",
      "title": "Decomposição em funções",
      "steps": [
        {
          "title": "Ler dados",
          "description": "Função input()"
        },
        {
          "title": "Processar",
          "description": "Função process()"
        },
        {
          "title": "Exibir",
          "description": "Função output()"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "academic",
      "title": "Leitura recomendada",
      "content": [
        {
          "type": "list",
          "items": [
            "FORBELLONE, A. L. V.; EBERSPÄCHER, H. F. Algoritmos: Lógica para Desenvolvimento de Programas. Prentice Hall.",
            "MANZANO, J. A. N. G.; OLIVEIRA, J. F. Algoritmos: lógica para desenvolvimento de programação. Érica.",
            "BACKES, A. Linguagem C: completa e descomplicada. Elsevier."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Casos de teste sugeridos",
      "content": [
        {
          "type": "code",
          "code": "# Funções\ninput: 2 3 -> soma()=5",
          "language": "plaintext"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "good-practice",
      "title": "Boas práticas",
      "content": [
        {
          "type": "list",
          "items": [
            "Use nomes de variáveis autoexplicativos (ex.: total, media, indice).",
            "Evite números mágicos; use constantes quando apropriado.",
            "Comente trechos que expressem intenção (não o óbvio).",
            "Funções pequenas e coesas: uma responsabilidade clara por função.",
            "Prefira passar dados por parâmetro ao invés de depender de variáveis globais."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "Erros comuns e refatorações",
      "content": [
        {
          "type": "list",
          "items": [
            "Leia o enunciado e valide entradas antes de processar.",
            "Inicialize variáveis; evite estados indefinidos."
          ]
        },
        {
          "type": "paragraph",
          "text": "<strong>Anti-exemplo</strong>"
        },
        {
          "type": "code",
          "code": "int soma(int a,int b){ printf(\"%d\", a+b); } // mistura cálculo e I/O",
          "language": "c"
        },
        {
          "type": "paragraph",
          "text": "<strong>Refatorado</strong>"
        },
        {
          "type": "code",
          "code": "int soma(int a,int b){ return a+b; } // devolve resultado",
          "language": "c"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "academic",
      "title": "Solução de referência",
      "content": [
        {
          "type": "code",
          "code": "int soma(int a, int b){ return a+b; }\n#include <stdio.h>\nint main(){ int a,b; scanf(\"%d %d\", &a,&b); printf(\"%d\n\", soma(a,b)); }",
          "language": "c"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "task",
      "title": "Check-out (fechamento rápido)",
      "content": [
        {
          "type": "list",
          "items": ["Registre 1 aprendizado e 1 dúvida.", "Entregue no AVA (campo de texto)."]
        }
      ]
    },
    {
      "type": "flashcards",
      "title": "Flashcards — revisão rápida",
      "shuffle": true,
      "cards": [
        {
          "front": "<b>Protótipo</b>",
          "back": "Assinatura da função"
        },
        {
          "front": "<b>Escopo</b>",
          "back": "Visibilidade da variável"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Gerador de casos de teste (C)",
      "content": [
        {
          "type": "code",
          "language": "c",
          "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nvoid atualizarEstatisticas(int valor, int *menor, int *maior, int *soma) {\n  if (valor < *menor) {\n    *menor = valor;\n  }\n  if (valor > *maior) {\n    *maior = valor;\n  }\n  *soma += valor;\n}\n\ndouble calcularMedia(int soma, int quantidade) {\n  return (double)soma / quantidade;\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int leituras = rand() % 6 + 5;\n  int menor = 1000;\n  int maior = -1000;\n  int soma = 0;\n\n  printf(\"Leituras de batimentos:\\n\");\n  for (int i = 0; i < leituras; ++i) {\n    int valor = rand() % 61 + 80;\n    atualizarEstatisticas(valor, &menor, &maior, &soma);\n    printf(\"%d \", valor);\n  }\n  printf(\"\\nSaidas esperadas -> menor=%d maior=%d media=%.2f\\n\", menor, maior, calcularMedia(soma, leituras));\n\n  return 0;\n}"
        }
      ]
    }
  ],
  "metadata": {
    "status": "published",
    "updatedAt": "2025-10-02T08:28:28.990Z",
    "owners": ["Prof. Tiago Sombra"],
    "sources": ["Plano pedagógico Algoritmos I 2025.1", "Laboratório de parâmetros 2025"]
  }
}

{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-07",
  "title": "Aula 7: Operadores e Expressões em C",
  "summary": "Apresenta as famílias de operadores da linguagem C, mostra como combinar expressões com precedência correta e conecta os resultados às decisões lógicas do algoritmo.",
  "objective": "Construir expressões aritméticas e lógicas corretas em C, respeitando precedência e usando operadores apropriados para cada situação.",
  "objectives": [
    "Identificar a função das principais categorias de operadores em C.",
    "Aplicar precedência e agrupamento para evitar ambiguidades em expressões.",
    "Interpretar resultados lógicos para alimentar decisões e fluxos de controle."
  ],
  "competencies": ["Raciocínio lógico", "Pensamento computacional", "Programação estruturada"],
  "skills": [
    "Selecionar operadores adequados para cálculos matemáticos e comparações.",
    "Reescrever expressões utilizando parênteses para tornar a intenção explícita.",
    "Avaliar o resultado de operações booleanas para controlar o fluxo do programa."
  ],
  "outcomes": [
    "Produz um programa que combina operadores aritméticos, relacionais e lógicos para resolver um caso realista.",
    "Explica oralmente como a precedência impacta o resultado de expressões compostas.",
    "Elabora uma tabela-verdade simples para validar condições críticas do algoritmo."
  ],
  "prerequisites": ["Revisar variáveis, tipos e leitura com scanf trabalhados na Aula 6."],
  "tags": ["operadores", "expressoes", "linguagem-c"],
  "duration": 115,
  "modality": "in-person",
  "resources": [
    {
      "label": "Guia rápido de operadores C (PDF)",
      "type": "handout",
      "url": "https://example.edu/algi/guias/operadores-c.pdf"
    },
    {
      "label": "Compilador OnlineGDB",
      "type": "tool",
      "url": "https://www.onlinegdb.com/online_c_compiler"
    }
  ],
  "bibliography": [
    "KERNIGHAN, B.; RITCHIE, D. A Linguagem de Programação C. Prentice Hall, 2020.",
    "BACKES, A. Linguagem C: Completa e Descomplicada. Elsevier, 2019.",
    "MANZANO, J. A. N. G.; OLIVEIRA, J. F. Algoritmos. Érica, 2019."
  ],
  "assessment": {
    "type": "practice",
    "description": "Entrega individual de um programa que calcula indicadores compostos (médias ponderadas e faixas) destacando o uso correto de operadores e precedência."
  },
  "content": [
    {
      "type": "lessonPlan",
      "title": "Plano da Aula",
      "cards": [
        {
          "icon": "book-open",
          "title": "Conteúdo",
          "content": "Operadores aritméticos, relacionais, lógicos, de atribuição composta e unários aplicados a expressões reais."
        },
        {
          "icon": "bullseye",
          "title": "Objetivo",
          "content": "Garantir que toda expressão escrita em C comunique com clareza a lógica desejada."
        },
        {
          "icon": "gears",
          "title": "Metodologia",
          "content": "Aula dialogada com experimentos no console, seguida de laboratório guiado e validação em pares."
        }
      ]
    },
    {
      "type": "flightPlan",
      "title": "Plano de voo (1h55)",
      "items": [
        "(10 min) Aquecimento: revisando operadores conhecidos e erros comuns.",
        "(20 min) Operadores aritméticos e de atribuição com exercícios rápidos.",
        "(20 min) Operadores relacionais e leitura de comparações encadeadas.",
        "(25 min) Operadores lógicos com tabelas-verdade e casos práticos.",
        "(20 min) Oficina: calculadora de indicadores acadêmicos.",
        "(20 min) Compartilhamento em pares e registro da TED."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Por que operadores importam",
      "content": [
        {
          "type": "paragraph",
          "text": "Operadores definem como transformamos dados no estágio de Processamento. São eles que permitem combinar entradas, aplicar regras de negócio e alimentar decisões futuras."
        },
        {
          "type": "paragraph",
          "text": "Escolher o operador errado ou esquecer a precedência pode produzir resultados completamente diferentes do esperado, mesmo que o programa compile sem erros."
        }
      ]
    },
    {
      "type": "cardGrid",
      "title": "Famílias de operadores em C",
      "columns": 2,
      "cards": [
        {
          "title": "Aritméticos",
          "content": "Somam, subtraem, multiplicam, dividem e capturam o resto de divisões para produzir novos valores numéricos."
        },
        {
          "title": "Relacionais",
          "content": "Comparam valores e retornam 0 ou 1 para indicar se a condição é satisfeita."
        },
        {
          "title": "Lógicos",
          "content": "Combinam resultados booleanos com AND, OR e NOT para expressar regras mais ricas."
        },
        {
          "title": "Atribuição e Unários",
          "content": "Atualizam variáveis com incrementos, decrementos e composições como += ou -=, simplificando o código."
        }
      ]
    },
    {
      "type": "md3Table",
      "headers": ["Operador", "Descrição", "Exemplo"],
      "rows": [
        [
          {
            "value": "+",
            "mono": true
          },
          {
            "value": "Adição"
          },
          {
            "value": "total = preco + frete;",
            "code": true
          }
        ],
        [
          {
            "value": "-",
            "mono": true
          },
          {
            "value": "Subtração"
          },
          {
            "value": "saldo = deposito - saque;",
            "code": true
          }
        ],
        [
          {
            "value": "*",
            "mono": true
          },
          {
            "value": "Multiplicação"
          },
          {
            "value": "area = base * altura;",
            "code": true
          }
        ],
        [
          {
            "value": "/",
            "mono": true
          },
          {
            "value": "Divisão"
          },
          {
            "value": "media = soma / quantidade;",
            "code": true
          }
        ],
        [
          {
            "value": "%",
            "mono": true
          },
          {
            "value": "Resto da divisão inteira"
          },
          {
            "value": "par = numero % 2 == 0;",
            "code": true
          }
        ]
      ]
    },
    {
      "type": "md3Table",
      "headers": ["Operador", "Significado", "Quando usar"],
      "rows": [
        [
          {
            "value": "==",
            "mono": true
          },
          {
            "value": "Igualdade"
          },
          {
            "value": "Comparar respostas ou estados"
          }
        ],
        [
          {
            "value": "!=",
            "mono": true
          },
          {
            "value": "Diferença"
          },
          {
            "value": "Validar que entradas são distintas"
          }
        ],
        [
          {
            "value": ">",
            "mono": true
          },
          {
            "value": "Maior que"
          },
          {
            "value": "Checar metas atingidas"
          }
        ],
        [
          {
            "value": "<",
            "mono": true
          },
          {
            "value": "Menor que"
          },
          {
            "value": "Monitorar limites mínimos"
          }
        ],
        [
          {
            "value": ">=",
            "mono": true
          },
          {
            "value": "Maior ou igual"
          },
          {
            "value": "Validar faixa superior inclusiva"
          }
        ],
        [
          {
            "value": "<=",
            "mono": true
          },
          {
            "value": "Menor ou igual"
          },
          {
            "value": "Garantir teto máximo"
          }
        ]
      ]
    },
    {
      "type": "contentBlock",
      "title": "Atribuição composta e operadores unários",
      "content": [
        {
          "type": "paragraph",
          "text": "Atualizações sucessivas de uma variável ficam mais legíveis com operadores compostos. Eles preservam a intenção e evitam repetição do nome da variável."
        },
        {
          "type": "code",
          "language": "c",
          "code": "int contador = 10;\ncontador += 3;    // equivale a contador = contador + 3;\ncontador -= 1;    // decrementa mantendo o histórico\ncontador++;        // incrementa de 1 em 1\n--contador;        // pré-decremento antes de usar o valor"
        }
      ]
    },
    {
      "type": "truthTable",
      "title": "Combinações lógicas",
      "headers": ["A", "B", "A && B", "A || B", "!A"],
      "rows": [
        [
          {
            "value": 1
          },
          {
            "value": 1
          },
          {
            "state": "true",
            "display": "1"
          },
          {
            "state": "true",
            "display": "1"
          },
          {
            "state": "false",
            "display": "0"
          }
        ],
        [
          {
            "value": 1
          },
          {
            "value": 0
          },
          {
            "state": "false",
            "display": "0"
          },
          {
            "state": "true",
            "display": "1"
          },
          {
            "state": "false",
            "display": "0"
          }
        ],
        [
          {
            "value": 0
          },
          {
            "value": 1
          },
          {
            "state": "false",
            "display": "0"
          },
          {
            "state": "true",
            "display": "1"
          },
          {
            "state": "true",
            "display": "1"
          }
        ],
        [
          {
            "value": 0
          },
          {
            "value": 0
          },
          {
            "state": "false",
            "display": "0"
          },
          {
            "state": "false",
            "display": "0"
          },
          {
            "state": "true",
            "display": "1"
          }
        ]
      ]
    },
    {
      "type": "contentBlock",
      "title": "Precedência e agrupamento",
      "content": [
        {
          "type": "paragraph",
          "text": "C segue uma ordem de avaliação: primeiro operadores unários, depois multiplicação/divisão/módulo, em seguida soma/subtração, comparações e, por fim, operadores lógicos."
        },
        {
          "type": "orderedList",
          "items": [
            "Use parênteses para deixar explícita a ordem desejada.",
            "Evite misturar muitos operadores diferentes em uma única linha.",
            "Teste expressões complexas isoladamente antes de inseri-las em decisões.",
            "Documente com comentários quando a intenção não for óbvia."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "Atenção com divisões inteiras",
      "content": [
        {
          "type": "paragraph",
          "text": "Dividir dois int descarta a parte decimal. Faça casting para float quando precisar de precisão: (float)total / quantidade."
        }
      ]
    },
    {
      "type": "checklist",
      "title": "Checklist de domínio",
      "items": [
        "Reconheço rapidamente a categoria de cada operador.",
        "Consigo prever o resultado de expressões com combinações simples.",
        "Aplico parênteses para comunicar claramente a ordem de execução.",
        "Valido condições com tabelas-verdade antes de levar para o código."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Laboratório guiado: indicadores acadêmicos",
      "content": [
        {
          "type": "paragraph",
          "text": "Implemente no laboratório um programa que leia três notas, calcule a média ponderada (pesos 4, 3 e 3) e determine se o estudante está aprovado, em recuperação ou reprovado."
        },
        {
          "type": "code",
          "language": "c",
          "code": "float n1, n2, n3;\nfloat media;\n\nprintf(\"Digite as tres notas: \");\nscanf(\"%f %f %f\", &n1, &n2, &n3);\nmedia = (n1 * 4 + n2 * 3 + n3 * 3) / 10.0f;\nif (media >= 7.0f && media <= 10.0f) {\n  printf(\"Aprovado com media %.1f\\n\", media);\n} else if (media >= 5.0f) {\n  printf(\"Recuperacao com media %.1f\\n\", media);\n} else {\n  printf(\"Reprovado com media %.1f\\n\", media);\n}\n"
        }
      ]
    }
  ],
  "metadata": {
    "status": "published",
    "updatedAt": "2025-02-10T12:00:00.000Z",
    "owners": ["Profa. Carla Mendes", "Prof. Miguel Souza"],
    "sources": ["Plano pedagógico Algoritmos I 2025.1", "Ata pedagógica de revisão 2024-12"]
  }
}

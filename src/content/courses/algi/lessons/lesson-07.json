{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-07",
  "title": "Aula 7: Operadores e Expressões em C",
  "summary": "Apresenta as famílias de operadores da linguagem C, mostra como combinar expressões com precedência correta e conecta os resultados às decisões lógicas do algoritmo.",
  "objective": "Construir expressões aritméticas e lógicas corretas em C, respeitando precedência e usando operadores apropriados para cada situação.",
  "objectives": [
    "Identificar a função das principais categorias de operadores em C.",
    "Aplicar precedência e agrupamento para evitar ambiguidades em expressões.",
    "Interpretar resultados lógicos para alimentar decisões e fluxos de controle."
  ],
  "competencies": ["02", "05", "08"],
  "skills": [
    "Organizar expressões utilizando precedência e parênteses para garantir clareza lógica.",
    "Simular avaliações de expressões passo a passo verificando efeitos de operadores relacionais e lógicos.",
    "Criar casos de teste que comprovem limites e exceções dos cálculos implementados."
  ],
  "outcomes": [
    "Entrega quadro com expressões reescritas e justificativas para o posicionamento de parênteses.",
    "Apresenta tabela de rastreamento com valores intermediários e resultado final de cada expressão.",
    "Disponibiliza conjunto de testes documentados cobrindo entradas típicas, limites e valores inválidos."
  ],
  "prerequisites": ["Revisar variáveis, tipos e leitura com scanf trabalhados na Aula 6."],
  "tags": ["operadores", "expressoes", "linguagem-c"],
  "duration": 100,
  "modality": "in-person",
  "resources": [
    {
      "label": "Moodle — AVA (Unichristus)",
      "type": "plataforma",
      "url": "https://ava.unichristus.edu.br/"
    }
  ],
  "bibliography": [
    "KERNIGHAN, B.; RITCHIE, D. A Linguagem de Programação C. Prentice Hall, 2020.",
    "BACKES, A. Linguagem C: Completa e Descomplicada. Elsevier, 2019.",
    "MANZANO, J. A. N. G.; OLIVEIRA, J. F. Algoritmos. Érica, 2019."
  ],
  "assessment": {
    "type": "prática",
    "description": "Prática orientada para fortalecer os conceitos trabalhados em aula. Registre suas soluções e dúvidas para acompanhamento posterior."
  },
  "content": [
    {
      "type": "callout",
      "variant": "info",
      "title": "Warm-up (pré-aula)",
      "content": [
        {
          "type": "paragraph",
          "text": "Revise os materiais desta aula aqui no site e anote os pontos-chave que precisam de atenção. Identifique dúvidas ou conceitos que merecem ser revisitados durante o encontro."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Reserve alguns minutos para tentar resolver mentalmente um exemplo relacionado ao tema da aula."
            },
            {
              "text": "Garanta acesso ao OnlineGDB ou ao Dev-C++ para experimentar os códigos durante a aula."
            }
          ]
        }
      ]
    },
    {
      "type": "lessonPlan",
      "title": "Plano da Aula",
      "cards": [
        {
          "icon": "book-open",
          "title": "Conteúdo",
          "content": "Operadores aritméticos, relacionais, lógicos, de atribuição composta e unários aplicados a expressões reais."
        },
        {
          "icon": "bullseye",
          "title": "Objetivo",
          "content": "Garantir que toda expressão escrita em C comunique com clareza a lógica desejada."
        },
        {
          "icon": "gears",
          "title": "Metodologia",
          "content": "Aula dialogada com experimentos no console, seguida de laboratório guiado e validação em pares."
        }
      ]
    },
    {
      "type": "flightPlan",
      "title": "Plano de voo (1h40)",
      "items": [
        "(9 min) Aquecimento: revisando operadores conhecidos e erros comuns.",
        "(18 min) Operadores aritméticos e de atribuição com exercícios rápidos.",
        "(17 min) Operadores relacionais e leitura de comparações encadeadas.",
        "(22 min) Operadores lógicos com tabelas-verdade e casos práticos.",
        "(17 min) Oficina: calculadora de indicadores acadêmicos.",
        "(17 min) Compartilhamento em pares e registro da TED."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Atividade em sala",
      "content": [
        {
          "type": "paragraph",
          "text": "Em duplas ou trios, resolvam as questões a seguir para reforçar o aprendizado durante a aula."
        },
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Questão teórica",
              "text": "Explique com suas palavras os principais conceitos abordados em \"Operadores e Expressões em C\" e destaque por que eles são importantes para a resolução de problemas."
            },
            {
              "title": "Questão prática",
              "text": "Implemente ou descreva um exemplo curto relacionado a \"Operadores e Expressões em C\" utilizando OnlineGDB ou Dev-C++ e compartilhe o resultado com o grupo."
            }
          ]
        }
      ]
    },
    {
      "type": "promptTip",
      "title": "Prompt para planejar Operadores e Expressões em C",
      "description": "Use com o assistente para organizar seus estudos, revisar conteúdos e praticar com exercícios.",
      "audience": "estudantes de Algoritmos I",
      "prompt": "Você é estudante de Algoritmos I estudando Aula 7: Operadores e Expressões em C. Contexto da aula: Apresenta as famílias de operadores da linguagem C, mostra como combinar expressões com precedência correta e conecta os resultados às decisões lógicas do algoritmo. Objetivo central: Construir expressões aritméticas e lógicas corretas em C, respeitando precedência e usando operadores apropriados para cada situação. Monte um plano de estudo dividido em revisão teórica, prática guiada e autoavaliação, indicando atividades de leitura, exercícios resolvidos em C ou pseudocódigo e perguntas de checagem que ajudem você a consolidar o conteúdo. Sugira estratégias para aprofundar o aprendizado, reforçar pontos frágeis e buscar ajuda quando necessário.",
      "tags": ["algoritmos", "expressoes", "linguagem-c", "operadores"],
      "tips": [
        "Peça ao assistente variações de exercícios que reforcem identificar a função das principais categorias de operadores em c.",
        "Solicite exemplos adicionais relacionados a operadores, expressoes para praticar.",
        "Peça um checklist final para acompanhar suas dúvidas recorrentes e organizar revisões.",
        "Peça sugestões de autoavaliação que ajudem você a aplicar precedência e agrupamento para evitar ambiguidades em expressões."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Por que operadores importam",
      "content": [
        {
          "type": "paragraph",
          "text": "Operadores definem como transformamos dados no estágio de Processamento. São eles que permitem combinar entradas, aplicar regras de negócio e alimentar decisões futuras."
        },
        {
          "type": "paragraph",
          "text": "Escolher o operador errado ou esquecer a precedência pode produzir resultados completamente diferentes do esperado, mesmo que o programa compile sem erros."
        }
      ]
    },
    {
      "type": "cardGrid",
      "title": "Famílias de operadores em C",
      "columns": 2,
      "cards": [
        {
          "title": "Aritméticos",
          "content": "Somam, subtraem, multiplicam, dividem e capturam o resto de divisões para produzir novos valores numéricos."
        },
        {
          "title": "Relacionais",
          "content": "Comparam valores e retornam 0 ou 1 para indicar se a condição é satisfeita."
        },
        {
          "title": "Lógicos",
          "content": "Combinam resultados booleanos com AND, OR e NOT para expressar regras mais ricas."
        },
        {
          "title": "Atribuição e Unários",
          "content": "Atualizam variáveis com incrementos, decrementos e composições como += ou -=, simplificando o código."
        }
      ]
    },
    {
      "type": "md3Table",
      "headers": ["Operador", "Descrição", "Exemplo"],
      "rows": [
        [
          {
            "value": "+",
            "mono": true
          },
          {
            "value": "Adição"
          },
          {
            "value": "total = preco + frete;",
            "code": true
          }
        ],
        [
          {
            "value": "-",
            "mono": true
          },
          {
            "value": "Subtração"
          },
          {
            "value": "saldo = deposito - saque;",
            "code": true
          }
        ],
        [
          {
            "value": "*",
            "mono": true
          },
          {
            "value": "Multiplicação"
          },
          {
            "value": "area = base * altura;",
            "code": true
          }
        ],
        [
          {
            "value": "/",
            "mono": true
          },
          {
            "value": "Divisão"
          },
          {
            "value": "media = soma / quantidade;",
            "code": true
          }
        ],
        [
          {
            "value": "%",
            "mono": true
          },
          {
            "value": "Resto da divisão inteira"
          },
          {
            "value": "par = numero % 2 == 0;",
            "code": true
          }
        ]
      ]
    },
    {
      "type": "md3Table",
      "headers": ["Operador", "Significado", "Quando usar"],
      "rows": [
        [
          {
            "value": "==",
            "mono": true
          },
          {
            "value": "Igualdade"
          },
          {
            "value": "Comparar respostas ou estados"
          }
        ],
        [
          {
            "value": "!=",
            "mono": true
          },
          {
            "value": "Diferença"
          },
          {
            "value": "Validar que entradas são distintas"
          }
        ],
        [
          {
            "value": ">",
            "mono": true
          },
          {
            "value": "Maior que"
          },
          {
            "value": "Checar metas atingidas"
          }
        ],
        [
          {
            "value": "<",
            "mono": true
          },
          {
            "value": "Menor que"
          },
          {
            "value": "Monitorar limites mínimos"
          }
        ],
        [
          {
            "value": ">=",
            "mono": true
          },
          {
            "value": "Maior ou igual"
          },
          {
            "value": "Validar faixa superior inclusiva"
          }
        ],
        [
          {
            "value": "<=",
            "mono": true
          },
          {
            "value": "Menor ou igual"
          },
          {
            "value": "Garantir teto máximo"
          }
        ]
      ]
    },
    {
      "type": "contentBlock",
      "title": "Atribuição composta e operadores unários",
      "content": [
        {
          "type": "paragraph",
          "text": "Atualizações sucessivas de uma variável ficam mais legíveis com operadores compostos. Eles preservam a intenção e evitam repetição do nome da variável."
        },
        {
          "type": "code",
          "language": "c",
          "code": "int contador = 10;\ncontador += 3;    // equivale a contador = contador + 3;\ncontador -= 1;    // decrementa mantendo o histórico\ncontador++;        // incrementa de 1 em 1\n--contador;        // pré-decremento antes de usar o valor"
        }
      ]
    },
    {
      "type": "truthTable",
      "title": "Combinações lógicas",
      "headers": ["A", "B", "A && B", "A || B", "!A"],
      "rows": [
        [
          {
            "value": 1
          },
          {
            "value": 1
          },
          {
            "state": "true",
            "display": "1"
          },
          {
            "state": "true",
            "display": "1"
          },
          {
            "state": "false",
            "display": "0"
          }
        ],
        [
          {
            "value": 1
          },
          {
            "value": 0
          },
          {
            "state": "false",
            "display": "0"
          },
          {
            "state": "true",
            "display": "1"
          },
          {
            "state": "false",
            "display": "0"
          }
        ],
        [
          {
            "value": 0
          },
          {
            "value": 1
          },
          {
            "state": "false",
            "display": "0"
          },
          {
            "state": "true",
            "display": "1"
          },
          {
            "state": "true",
            "display": "1"
          }
        ],
        [
          {
            "value": 0
          },
          {
            "value": 0
          },
          {
            "state": "false",
            "display": "0"
          },
          {
            "state": "false",
            "display": "0"
          },
          {
            "state": "true",
            "display": "1"
          }
        ]
      ]
    },
    {
      "type": "truthTable",
      "title": "Operadores relacionais alimentando decisões lógicas",
      "headers": [
        "Entrada",
        "idade >= 18",
        "cartao == 'S'",
        "Pode viajar (idade >= 18 && cartao == 'S')"
      ],
      "rows": [
        [
          {
            "value": "17 anos, cartão S"
          },
          {
            "state": "false",
            "display": "Falso"
          },
          {
            "state": "true",
            "display": "Verdadeiro"
          },
          {
            "state": "false",
            "display": "Barrado"
          }
        ],
        [
          {
            "value": "18 anos, cartão N"
          },
          {
            "state": "true",
            "display": "Verdadeiro"
          },
          {
            "state": "false",
            "display": "Falso"
          },
          {
            "state": "false",
            "display": "Barrado"
          }
        ],
        [
          {
            "value": "21 anos, cartão S"
          },
          {
            "state": "true",
            "display": "Verdadeiro"
          },
          {
            "state": "true",
            "display": "Verdadeiro"
          },
          {
            "state": "true",
            "display": "Autorizado"
          }
        ],
        [
          {
            "value": "16 anos, cartão N"
          },
          {
            "state": "false",
            "display": "Falso"
          },
          {
            "state": "false",
            "display": "Falso"
          },
          {
            "state": "false",
            "display": "Barrado"
          }
        ]
      ],
      "legend": [
        {
          "label": "Condição satisfeita",
          "state": "true"
        },
        {
          "label": "Condição não satisfeita",
          "state": "false"
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Precedência e agrupamento",
      "content": [
        {
          "type": "paragraph",
          "text": "C segue uma ordem de avaliação: primeiro operadores unários, depois multiplicação/divisão/módulo, em seguida soma/subtração, comparações e, por fim, operadores lógicos."
        },
        {
          "type": "orderedList",
          "items": [
            "Use parênteses para deixar explícita a ordem desejada.",
            "Evite misturar muitos operadores diferentes em uma única linha.",
            "Teste expressões complexas isoladamente antes de inseri-las em decisões.",
            "Documente com comentários quando a intenção não for óbvia."
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Worksheet progressiva",
      "content": [
        {
          "type": "orderedList",
          "items": [
            "Nível 1 – Resolva cinco expressões simples e marque o operador dominante.",
            "Nível 2 – Compare pares de valores e complete os resultados esperados em uma tabela.",
            "Nível 3 – Combine relacionais e lógicos, anotando o passo a passo que levou ao valor final.",
            "Nível 4 – Reescreva as expressões usando parênteses para deixar a intenção explícita e valide no OnlineGDB."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "Atenção com divisões inteiras",
      "content": [
        {
          "type": "paragraph",
          "text": "Dividir dois int descarta a parte decimal. Faça casting para float quando precisar de precisão: (float)total / quantidade."
        }
      ]
    },
    {
      "type": "checklist",
      "title": "Checklist de domínio",
      "items": [
        "Reconheço rapidamente a categoria de cada operador.",
        "Consigo prever o resultado de expressões com combinações simples.",
        "Aplico parênteses para comunicar claramente a ordem de execução.",
        "Valido condições com tabelas-verdade antes de levar para o código."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Laboratório guiado: indicadores acadêmicos",
      "content": [
        {
          "type": "paragraph",
          "text": "Implemente no laboratório um programa que leia três notas, calcule a média ponderada (pesos 4, 3 e 3) e determine se o estudante está aprovado, em recuperação ou reprovado."
        },
        {
          "type": "code",
          "language": "c",
          "code": "float n1, n2, n3;\nfloat media;\n\nprintf(\"Digite as tres notas: \");\nscanf(\"%f %f %f\", &n1, &n2, &n3);\nmedia = (n1 * 4 + n2 * 3 + n3 * 3) / 10.0f;\nif (media >= 7.0f && media <= 10.0f) {\n  printf(\"Aprovado com media %.1f\\n\", media);\n} else if (media >= 5.0f) {\n  printf(\"Recuperacao com media %.1f\\n\", media);\n} else {\n  printf(\"Reprovado com media %.1f\\n\", media);\n}\n"
        }
      ]
    },
    {
      "type": "videos",
      "title": "Reforço em precedência",
      "videos": [
        {
          "title": "Ordem de operadores em C",
          "src": "https://www.youtube.com/embed/JnAmSrg0xgk"
        },
        {
          "title": "Vídeo recomendado (08LWytp6PNI)",
          "src": "https://www.youtube.com/embed/08LWytp6PNI"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "TED pós-aula",
      "content": [
        {
          "type": "paragraph",
          "text": "Reserve um momento após a aula para concluir a atividade descrita a seguir. Ela complementa os estudos e ajuda a consolidar o que foi trabalhado em sala."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Desenvolva a prática proposta na aula registrando os passos e resultados no caderno ou no editor de sua preferência."
            },
            {
              "text": "Anote dúvidas e insights que surgirem para discutirmos na próxima aula."
            }
          ]
        }
      ]
    },
    {
      "type": "component",
      "component": "QuizBlock",
      "props": {
        "data": {
          "type": "quiz",
          "title": "Precedência de operadores",
          "multiple": false,
          "options": [
            {
              "text": "2 + 2 * 2 = 6",
              "correct": true
            },
            {
              "text": "2 + 2 * 2 = 8",
              "correct": false
            }
          ]
        }
      }
    },
    {
      "type": "component",
      "component": "Md3LogicOperators"
    },
    {
      "type": "callout",
      "variant": "academic",
      "title": "Leitura recomendada",
      "content": [
        {
          "type": "list",
          "items": [
            "FORBELLONE, A. L. V.; EBERSPÄCHER, H. F. Algoritmos: Lógica para Desenvolvimento de Programas. Prentice Hall.",
            "MANZANO, J. A. N. G.; OLIVEIRA, J. F. Algoritmos: lógica para desenvolvimento de programação. Érica.",
            "BACKES, A. Linguagem C: completa e descomplicada. Elsevier."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Casos de teste sugeridos",
      "content": [
        {
          "type": "code",
          "code": "# Defina entradas e saídas esperadas para validar seu programa.",
          "language": "plaintext"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "good-practice",
      "title": "Boas práticas",
      "content": [
        {
          "type": "list",
          "items": [
            "Use nomes de variáveis autoexplicativos (ex.: total, media, indice).",
            "Evite números mágicos; use constantes quando apropriado.",
            "Comente trechos que expressem intenção (não o óbvio)."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "Erros comuns e refatorações",
      "content": [
        {
          "type": "list",
          "items": [
            "Leia o enunciado e valide entradas antes de processar.",
            "Inicialize variáveis; evite estados indefinidos."
          ]
        },
        {
          "type": "paragraph",
          "text": "<strong>Anti-exemplo</strong>"
        },
        {
          "type": "code",
          "code": "printf(\"%d\", 2 + 2 * 2); // espera 8 (incorreto)",
          "language": "c"
        },
        {
          "type": "paragraph",
          "text": "<strong>Refatorado</strong>"
        },
        {
          "type": "code",
          "code": "printf(\"%d\", 2 + (2 * 2)); // 6 (correto: precedência)",
          "language": "c"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "task",
      "title": "Check-out (fechamento rápido)",
      "content": [
        {
          "type": "list",
          "items": ["Registre 1 aprendizado e 1 dúvida.", "Entregue no AVA (campo de texto)."]
        }
      ]
    },
    {
      "type": "flashcards",
      "title": "Flashcards — revisão rápida",
      "shuffle": true,
      "cards": [
        {
          "front": "<b>Precedência</b>",
          "back": "*, / antes de +, -"
        },
        {
          "front": "<b>Parênteses</b>",
          "back": "Explicitam intenção"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Gerador de casos de teste (C)",
      "content": [
        {
          "type": "code",
          "language": "c",
          "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int a = rand() % 41 + 10;\n  int b = rand() % 21 + 5;\n  int c = rand() % 16 + 1;\n  int d = rand() % 9 + 2;\n\n  int expressao1 = a * b - c;\n  int expressao2 = (a + b) % d;\n  double expressao3 = (a * 1.0 + c) / d + b;\n\n  printf(\"Entrada (a b c d):\\n%d %d %d %d\\n\", a, b, c, d);\n  printf(\"Saidas esperadas:\\n- a*b-c = %d\\n- (a+b)%%d = %d\\n- (a+c)/d + b = %.2f\\n\", expressao1, expressao2, expressao3);\n\n  return 0;\n}"
        }
      ]
    }
  ],
  "metadata": {
    "status": "published",
    "updatedAt": "2025-10-02T08:28:28.971Z",
    "owners": ["Prof. Tiago Sombra"],
    "sources": ["Plano pedagógico Algoritmos I 2025.1", "Ata pedagógica de revisão 2024-12"]
  }
}

{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-25",
  "title": "Aula 25: Introdução a Funções e Modularização",
  "summary": "Motiva a decomposição de programas em funções, introduzindo protótipos, escopo e primeiros padrões de modularização.",
  "objective": "Compreender por que dividir o código em funções torna programas mais legíveis, testáveis e sustentáveis.",
  "objectives": [
    "Identificar sinais de que um algoritmo deve ser quebrado em funções.",
    "Escrever protótipos simples com parâmetros e retorno.",
    "Organizar arquivo C com seções de protótipos, main e funções auxiliares."
  ],
  "competencies": ["05", "08", "11"],
  "skills": [
    "Identificar oportunidades de modularização em programas sequenciais.",
    "Desenhar protótipos de funções definindo assinaturas, parâmetros e retorno.",
    "Registrar pré e pós-condições que orientem o uso correto de cada função."
  ],
  "outcomes": [
    "Entrega roteiro que aponta blocos candidatos à extração em funções.",
    "Disponibiliza protótipo documentado em arquivo header ou anotações estruturadas.",
    "Apresenta quadro de pré/pós-condições validado com exemplos práticos."
  ],
  "prerequisites": [
    "Rever laços e condicionais (aulas 19-24).",
    "Trazer compilador configurado com flags -Wall -Wextra."
  ],
  "tags": ["funcoes", "modularizacao", "c-basico"],
  "duration": 100,
  "modality": "in-person",
  "resources": [
    {
      "label": "Moodle — AVA (Unichristus)",
      "type": "plataforma",
      "url": "https://ava.unichristus.edu.br/"
    },
    {
      "label": "Boas práticas de modularização (Moodle)",
      "type": "guide",
      "url": "https://raw.githubusercontent.com/md3-content/edu/main/docs/didactics/modularizacao-boas-praticas.md"
    }
  ],
  "bibliography": [
    "BACKES, A. Linguagem C: Completa e Descomplicada. Elsevier, 2019.",
    "HARVEY, B.; WRIGHT, J. Think C. O'Reilly, 2023.",
    "KERNIGHAN, B.; RITCHIE, D. A Linguagem de Programação C. Prentice Hall, 2020."
  ],
  "assessment": {
    "type": "prática",
    "description": "Prática orientada para fortalecer os conceitos trabalhados em aula. Registre suas soluções e dúvidas para acompanhamento posterior."
  },
  "content": [
    {
      "type": "callout",
      "variant": "info",
      "title": "Warm-up (pré-aula)",
      "content": [
        {
          "type": "paragraph",
          "text": "Revise os materiais desta aula aqui no site e anote os pontos-chave que precisam de atenção. Identifique dúvidas ou conceitos que merecem ser revisitados durante o encontro."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Reserve alguns minutos para tentar resolver mentalmente um exemplo relacionado ao tema da aula."
            },
            {
              "text": "Garanta acesso ao OnlineGDB ou ao Dev-C++ para experimentar os códigos durante a aula."
            }
          ]
        }
      ]
    },
    {
      "type": "lessonPlan",
      "title": "Plano da sessão",
      "cards": [
        {
          "icon": "book-open",
          "title": "Motivação",
          "content": "Histórias reais de bugs resolvidos após modularização e revisão de responsabilidades."
        },
        {
          "icon": "code",
          "title": "Demonstração",
          "content": "Construção de função `double calcular_media(...)` ao vivo destacando protótipo, chamada e retorno."
        },
        {
          "icon": "users",
          "title": "Laboratório guiado",
          "content": "Times refatoram exercício da aula 23 dividindo em funções reutilizáveis."
        }
      ]
    },
    {
      "type": "flightPlan",
      "title": "Plano de voo (1h40)",
      "items": [
        "(8 min) Check-in: dores de manutenção em códigos monolíticos.",
        "(17 min) Anatomia de uma função: protótipo, assinatura e escopo.",
        "(21 min) Live coding: separando cálculos e impressões.",
        "(25 min) Oficina em duplas: refatorar algoritmo de triagem médica.",
        "(16 min) Revisão cruzada usando a rubrica de modularização.",
        "(8 min) Configuração da suíte de testes base.",
        "(5 min) TED com compromissos para a próxima aula."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Atividade em sala",
      "content": [
        {
          "type": "paragraph",
          "text": "Em duplas ou trios, resolvam as questões a seguir para reforçar o aprendizado durante a aula."
        },
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Questão teórica",
              "text": "Explique com suas palavras os principais conceitos abordados em \"Introdução a Funções e Modularização\" e destaque por que eles são importantes para a resolução de problemas."
            },
            {
              "title": "Questão prática",
              "text": "Implemente ou descreva um exemplo curto relacionado a \"Introdução a Funções e Modularização\" utilizando OnlineGDB ou Dev-C++ e compartilhe o resultado com o grupo."
            }
          ]
        }
      ]
    },
    {
      "type": "videos",
      "title": "Vídeos de apoio",
      "videos": [
        {
          "title": "C Language - Starting from Absolute Zero - Free (2022)",
          "src": "https://www.youtube.com/embed/2w8GYzBjNj8"
        },
        {
          "title": "Turma do Cristãozinho MIMO - A sentinela",
          "src": "https://www.youtube.com/embed/2wA0ErtmqxQ"
        }
      ]
    },
    {
      "type": "promptTip",
      "title": "Prompt para planejar Introdução a Funções e Modularização",
      "description": "Use com o assistente para organizar seus estudos, revisar conteúdos e praticar com exercícios.",
      "audience": "estudantes de Algoritmos I",
      "prompt": "Você é estudante de Algoritmos I estudando Aula 25: Introdução a Funções e Modularização. Contexto da aula: Motiva a decomposição de programas em funções, introduzindo protótipos, escopo e primeiros padrões de modularização. Objetivo central: Compreender por que dividir o código em funções torna programas mais legíveis, testáveis e sustentáveis. Monte um plano de estudo dividido em revisão teórica, prática guiada e autoavaliação, indicando atividades de leitura, exercícios resolvidos em C ou pseudocódigo e perguntas de checagem que ajudem você a consolidar o conteúdo. Sugira estratégias para aprofundar o aprendizado, reforçar pontos frágeis e buscar ajuda quando necessário.",
      "tags": ["algoritmos", "c-basico", "funcoes", "modularizacao"],
      "tips": [
        "Peça ao assistente variações de exercícios que reforcem identificar sinais de que um algoritmo deve ser quebrado em funções.",
        "Solicite exemplos adicionais relacionados a funcoes, modularizacao para praticar.",
        "Peça um checklist final para acompanhar suas dúvidas recorrentes e organizar revisões.",
        "Peça sugestões de autoavaliação que ajudem você a escrever protótipos simples com parâmetros e retorno."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Por que modularizar?",
      "content": [
        {
          "type": "paragraph",
          "text": "Funções encapsulam regras de negócio e reduzem a repetição de código, favorecendo manutenção e testes."
        },
        {
          "type": "list",
          "items": [
            "Evita duplicação de lógica crítica.",
            "Facilita leitura com nomes expressivos.",
            "Permite testes unitários direcionados."
          ]
        }
      ]
    },
    {
      "type": "md3Table",
      "title": "Checklist de um protótipo bem escrito",
      "headers": ["Item", "Pergunta", "Status"],
      "rows": [
        [
          {
            "value": "Nome"
          },
          {
            "value": "Representa ação clara?"
          },
          {
            "value": "✅/⚠️"
          }
        ],
        [
          {
            "value": "Parâmetros"
          },
          {
            "value": "Inclui apenas o necessário?"
          },
          {
            "value": "✅/⚠️"
          }
        ],
        [
          {
            "value": "Retorno"
          },
          {
            "value": "Comunica sucesso/erro?"
          },
          {
            "value": "✅/⚠️"
          }
        ]
      ]
    },
    {
      "type": "code",
      "language": "c",
      "title": "Exemplo inicial",
      "code": "double calcular_media(double soma, int quantidade) {\n  if (quantidade <= 0) {\n    return 0.0;\n  }\n  return soma / quantidade;\n}\n\nint main(void) {\n  double media = calcular_media(42.0, 6);\n  printf(\"Media: %.2f\\n\", media);\n  return 0;\n}\n"
    },
    {
      "type": "code",
      "language": "c",
      "title": "Testando imediatamente com assert.h",
      "code": "#include <assert.h>\n\ndouble calcular_media(double soma, int quantidade); // protótipo conhecido do módulo\n\nvoid testar_calcular_media(void) {\n  assert(calcular_media(10.0, 2) == 5.0);\n  assert(calcular_media(0.0, 5) == 0.0);\n  assert(calcular_media(10.0, 0) == 0.0);\n}\n\nint main(void) {\n  testar_calcular_media();\n  // implementação segue com o restante do programa\n  return 0;\n}\n"
    },
    {
      "type": "checklist",
      "title": "Antes de entregar",
      "items": [
        "Usei nomes verbais para todas as funções.",
        "Adicionei comentários de propósito.",
        "Rodei a suíte de testes fornecida e registrei os resultados."
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "TED pós-aula",
      "content": [
        {
          "type": "paragraph",
          "text": "Refatore incrementalmente o exercício da triagem dividindo responsabilidades em funções e registrando os testes com `assert` após cada alteração."
        },
        {
          "type": "list",
          "items": [
            {
              "text": "Atualize comentários de propósito nas funções criadas indicando responsabilidade e autor/a do incremento."
            },
            {
              "text": "Anexe no Moodle o relatório de fluxos da squad destacando os commits e asserts executados."
            }
          ]
        }
      ]
    },
    {
      "type": "stepper",
      "title": "Decomposição em funções",
      "steps": [
        {
          "title": "Ler dados",
          "description": "Função input()"
        },
        {
          "title": "Processar",
          "description": "Função process()"
        },
        {
          "title": "Exibir",
          "description": "Função output()"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "academic",
      "title": "Leitura recomendada",
      "content": [
        {
          "type": "list",
          "items": [
            "FORBELLONE, A. L. V.; EBERSPÄCHER, H. F. Algoritmos: Lógica para Desenvolvimento de Programas. Prentice Hall.",
            "MANZANO, J. A. N. G.; OLIVEIRA, J. F. Algoritmos: lógica para desenvolvimento de programação. Érica.",
            "BACKES, A. Linguagem C: completa e descomplicada. Elsevier."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Casos de teste sugeridos",
      "content": [
        {
          "type": "code",
          "code": "# Funções\ninput: 2 3 -> soma()=5",
          "language": "plaintext"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "good-practice",
      "title": "Boas práticas",
      "content": [
        {
          "type": "list",
          "items": [
            "Use nomes de variáveis autoexplicativos (ex.: total, media, indice).",
            "Evite números mágicos; use constantes quando apropriado.",
            "Comente trechos que expressem intenção (não o óbvio).",
            "Funções pequenas e coesas: uma responsabilidade clara por função.",
            "Prefira passar dados por parâmetro ao invés de depender de variáveis globais."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "warning",
      "title": "Erros comuns e refatorações",
      "content": [
        {
          "type": "list",
          "items": [
            "Leia o enunciado e valide entradas antes de processar.",
            "Inicialize variáveis; evite estados indefinidos."
          ]
        },
        {
          "type": "paragraph",
          "text": "<strong>Anti-exemplo</strong>"
        },
        {
          "type": "code",
          "code": "int soma(int a,int b){ printf(\"%d\", a+b); } // mistura cálculo e I/O",
          "language": "c"
        },
        {
          "type": "paragraph",
          "text": "<strong>Refatorado</strong>"
        },
        {
          "type": "code",
          "code": "int soma(int a,int b){ return a+b; } // devolve resultado",
          "language": "c"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "task",
      "title": "Check-out (fechamento rápido)",
      "content": [
        {
          "type": "list",
          "items": ["Registre 1 aprendizado e 1 dúvida.", "Entregue no AVA (campo de texto)."]
        }
      ]
    },
    {
      "type": "flashcards",
      "title": "Flashcards — revisão rápida",
      "shuffle": true,
      "cards": [
        {
          "front": "<b>Protótipo</b>",
          "back": "Assinatura da função"
        },
        {
          "front": "<b>Escopo</b>",
          "back": "Visibilidade da variável"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Gerador de casos de teste (C)",
      "content": [
        {
          "type": "code",
          "language": "c",
          "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\ndouble calcularMedia(double valores[], int tamanho) {\n  double soma = 0.0;\n  for (int i = 0; i < tamanho; ++i) {\n    soma += valores[i];\n  }\n  return soma / tamanho;\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int quantidade = 5;\n  double notas[5];\n  for (int i = 0; i < quantidade; ++i) {\n    notas[i] = (double)(rand() % 401 + 300) / 100.0;\n  }\n\n  printf(\"Notas geradas:\\n\");\n  for (int i = 0; i < quantidade; ++i) {\n    printf(\"%.2f \", notas[i]);\n  }\n  printf(\"\\nSaida esperada (media): %.2f\\n\", calcularMedia(notas, quantidade));\n\n  return 0;\n}"
        }
      ]
    }
  ],
  "metadata": {
    "status": "published",
    "updatedAt": "2025-10-02T08:28:28.990Z",
    "owners": ["Prof. Tiago Sombra"],
    "sources": ["Plano pedagógico Algoritmos I 2025.1", "Diário de bordo do módulo de funções 2025"]
  }
}

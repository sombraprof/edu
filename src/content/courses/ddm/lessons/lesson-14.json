{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-14",
  "title": "Aula 14: Unidade III – Introdução ao Room: Entities e DAO",
  "slug": "introducao-ao-room-entities-e-dao",
  "summary": "Apresenta o Room como camada de persistência moderna no Android, guiando a modelagem de entidades e a criação de DAO para operações seguras com banco de dados local.",
  "objective": "Modelar e acessar dados relacionais no Android utilizando Room, garantindo consultas performáticas e consistentes.",
  "objectives": [
    "Definir entities alinhadas ao domínio do aplicativo.",
    "Criar DAO com operações de consulta, inserção e atualização.",
    "Configurar o RoomDatabase e conectar a camada de dados à UI."
  ],
  "competencies": [
    "Persistência local com Room",
    "Modelagem de dados relacionais aplicados a apps móveis",
    "Arquitetura em camadas em aplicações Android"
  ],
  "skills": [
    "Criar classes @Entity com chaves primárias e relacionamentos simples.",
    "Escrever consultas SQL anotadas em interfaces DAO.",
    "Instanciar RoomDatabase com migrações automáticas básicas."
  ],
  "outcomes": [
    "Modela entidades Room coerentes com o domínio da aplicação.",
    "Implementa DAO para CRUD completo em Kotlin.",
    "Integra o RoomDatabase ao fluxo de dados do app de exemplo."
  ],
  "prerequisites": [
    "Persistência leve com SharedPreferences.",
    "Fundamentos de SQL e modelagem relacional simples."
  ],
  "tags": ["android", "room", "persistencia"],
  "duration": 120,
  "modality": "in-person",
  "resources": [
    {
      "label": "Room persistence library",
      "url": "https://developer.android.com/training/data-storage/room",
      "type": "article"
    },
    {
      "label": "Defining data using Room entities",
      "url": "https://developer.android.com/training/data-storage/room/defining-data",
      "type": "reference"
    }
  ],
  "bibliography": [
    "ANDROID DEVELOPERS. Save data in a local database using Room. 2024.",
    "GOYAL, M. Android Room Database. Apress, 2023."
  ],
  "assessment": {
    "type": "formative",
    "description": "Rubrica para avaliar o mapeamento de uma entidade e DAO em um mini projeto de catálogo."
  },
  "content": [
    {
      "type": "videos",
      "title": "Referências em vídeo – Unidade III",
      "videos": [
        {
          "url": "https://www.youtube.com/watch?v=lwAvI3WDXBY",
          "title": "Room: arquitetando persistência local",
          "caption": "Sessão técnica do Google I/O apresentando o Room. Créditos: Android Developers (Google, 2017)."
        },
        {
          "url": "https://www.youtube.com/playlist?list=PLWz5rJ2EKKc9mxIBd0DRw9gwXuQshgEts",
          "title": "Android Jetpack Architecture Components",
          "caption": "Playlist institucional sobre persistência, ViewModel e LiveData. Créditos: Android Developers (Google, 2024)."
        }
      ]
    },
    {
      "type": "flightPlan",
      "title": "Plano de voo da aula",
      "items": [
        "Recapitulação: Rever as limitações de SharedPreferences para dados estruturados.",
        "Introdução ao Room: Entender por que a biblioteca moderniza o acesso ao SQLite.",
        "Componente 1: Mapear entidades com @Entity.",
        "Componente 2: Construir DAOs com consultas validadas.",
        "Atividade prática: Preparar dependências e criar a primeira entidade + DAO.",
        "Ponte para a próxima aula: Identificar o que falta para um banco completo.",
        "Tarefa (TED): Consolidar o esqueleto de persistência."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Do simples ao estruturado: por que o Room?",
      "content": [
        {
          "type": "paragraph",
          "text": "Na Aula 13 vimos como SharedPreferences resolve preferências e dados simples. Listas ou registros ricos exigem outra abordagem: chave-valor se torna difícil de manter."
        },
        {
          "type": "paragraph",
          "text": "Antes do Jetpack, trabalhávamos diretamente com SQLiteOpenHelper e muito boilerplate. Faltava verificação de consultas em tempo de compilação e o risco de erros aumentava."
        },
        {
          "type": "callout",
          "variant": "info",
          "title": "O que o Room oferece",
          "content": [
            {
              "type": "paragraph",
              "text": "O Room é uma camada de abstração sobre o SQLite. Ele combina a performance do banco nativo com uma API moderna: valida SQL em build, gera código repetitivo automaticamente e integra-se com corrotinas e Flow."
            }
          ]
        }
      ]
    },
    {
      "type": "cardGrid",
      "title": "Os três componentes do Room",
      "columns": 3,
      "cards": [
        {
          "title": "Entidade (Entity)",
          "subtitle": "Molde da tabela",
          "tone": "info",
          "items": [
            "Representa linhas de uma tabela.",
            "Cada propriedade vira uma coluna.",
            "Aceita anotações para nomes amigáveis."
          ]
        },
        {
          "title": "DAO",
          "subtitle": "Data Access Object",
          "tone": "success",
          "items": [
            "Interface com métodos de leitura/escrita.",
            "Anotações mapeiam consultas SQL.",
            "Room gera a implementação concreta."
          ]
        },
        {
          "title": "Database",
          "subtitle": "RoomDatabase",
          "tone": "secondary",
          "items": [
            "Classe abstrata que une entidades e DAOs.",
            "Expõe o banco para o restante da aplicação.",
            "Configura migrações e instâncias singleton."
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Componente 1 — A Entidade",
      "content": [
        {
          "type": "paragraph",
          "text": "Uma entidade é uma data class anotada com @Entity. Cada instância representa uma linha e cada propriedade corresponde a uma coluna."
        },
        {
          "type": "code",
          "language": "kotlin",
          "code": "import androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"tabela_de_notas\")\ndata class Nota(\n    @PrimaryKey(autoGenerate = true)\n    val id: Int = 0,\n\n    @ColumnInfo(name = \"titulo_da_nota\")\n    val titulo: String,\n\n    @ColumnInfo(name = \"conteudo_da_nota\")\n    val conteudo: String\n)\n\n// Referência: ANDROID DEVELOPERS (2024)"
        },
        {
          "type": "callout",
          "variant": "info",
          "title": "Anatomia da entidade",
          "content": [
            {
              "type": "list",
              "ordered": false,
              "items": [
                "@Entity define a tabela e permite personalizar o nome.",
                "@PrimaryKey(autoGenerate = true) delega ao Room a geração do identificador único.",
                "@ColumnInfo facilita renomear colunas e evitar conflitos com palavras reservadas."
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Componente 2 — O DAO",
      "content": [
        {
          "type": "paragraph",
          "text": "O DAO é uma interface marcada com @Dao. Definimos métodos e o Room gera a implementação. As consultas são validadas em tempo de compilação."
        },
        {
          "type": "code",
          "language": "kotlin",
          "code": "import androidx.room.Dao\nimport androidx.room.Delete\nimport androidx.room.Insert\nimport androidx.room.Query\n\n@Dao\ninterface NotaDao {\n\n    @Insert\n    suspend fun insert(nota: Nota)\n\n    @Query(\"SELECT * FROM tabela_de_notas ORDER BY id DESC\")\n    suspend fun getAll(): List<Nota>\n\n    @Query(\"DELETE FROM tabela_de_notas\")\n    suspend fun deleteAll()\n\n    @Delete\n    suspend fun delete(nota: Nota)\n}\n\n// Referência: ANDROID DEVELOPERS (2024)"
        },
        {
          "type": "callout",
          "variant": "info",
          "title": "Boas práticas para DAOs",
          "content": [
            {
              "type": "list",
              "ordered": false,
              "items": [
                "@Insert, @Update e @Delete cobrem operações básicas.",
                "@Query aceita SQL livre e acusa erros de digitação durante o build.",
                "Marque métodos longos como suspend para rodar em corrotinas sem bloquear a UI."
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "task",
      "title": "Tarefa para a próxima aula (TED)",
      "content": [
        {
          "type": "paragraph",
          "text": "Monte a base do banco de notas."
        },
        {
          "type": "list",
          "ordered": true,
          "items": [
            "Adicione as dependências do Room ao arquivo build.gradle.kts.",
            "Implemente a entidade Nota.kt seguindo o exemplo.",
            "Crie o NotaDao.kt com os métodos insert, getAll e deleteAll.",
            "Envie os dois arquivos no Moodle com um breve resumo do que foi aprendido."
          ]
        }
      ]
    },
    {
      "type": "bibliography",
      "title": "Bibliografia recomendada",
      "items": [
        "SIMAS, V. L. et al. Desenvolvimento para Dispositivos Móveis – Volume 2. Grupo A, 2019.",
        "Documentação oficial do Jetpack Room (https://developer.android.com/training/data-storage/room)."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Exemplo de código comentado",
      "content": [
        {
          "type": "paragraph",
          "text": "O exemplo evidencia como estruturar entidades e DAOs coerentes com o conteúdo de Introdução ao Room: Entities e DAO."
        },
        {
          "type": "code",
          "language": "kotlin",
          "code": "@Entity(tableName = \"registros\")\ndata class Registro(\n    @PrimaryKey(autoGenerate = true) val id: Long = 0,\n    val titulo: String,\n    val atualizadoEm: Long\n)\n\n@Dao\ninterface RegistroDao {\n    @Query(\"SELECT * FROM registros ORDER BY atualizadoEm DESC\")\n    fun listar(): Flow<List<Registro>>\n}\n// Referência: ANDROID DEVELOPERS (2024)"
        },
        {
          "type": "paragraph",
          "text": "Observe que a consulta utiliza Flow para aderir às recomendações de ANDROID DEVELOPERS (2024)."
        },
        {
          "type": "callout",
          "variant": "academic",
          "title": "Fundamentação bibliográfica",
          "content": [
            {
              "type": "paragraph",
              "text": "ANDROID DEVELOPERS. Save data in a local database using Room. 2024."
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Leitura complementar e estudos de caso",
      "content": [
        {
          "type": "paragraph",
          "text": "Reforce os conceitos de Introdução ao Room: Entities e DAO relacionando SharedPreferences, Room e estratégias de migração."
        },
        {
          "type": "list",
          "items": [
            "Releia: ANDROID DEVELOPERS. Save data in a local database using Room. 2024.",
            "Conecte com o estudo: GOYAL, M. Android Room Database. Apress, 2023."
          ]
        },
        {
          "type": "paragraph",
          "text": "Descreva um caso de uso real do seu projeto que se beneficie de camadas de persistência bem definidas."
        },
        {
          "type": "blockquote",
          "text": "GOYAL, M. Android Room Database. Apress, 2023."
        }
      ]
    }
  ],
  "metadata": {
    "status": "in-review",
    "updatedAt": "2024-06-17T00:00:00.000Z",
    "owners": ["Prof. Tiago Sombra"],
    "sources": ["Plano de ensino DDM 2024.2", "Laboratório Room"]
  }
}

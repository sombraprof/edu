{
  "id": "lesson5",
  "title": "Aula 5: Unidade I – Layouts e Views",
  "objective": "",
  "content": [
    {
      "type": "legacySection",
      "id": "aula5",
      "title": "Plano de Voo da Aula",
      "html": "<div data-legacy-card=\"\"> <ul> <li> <strong>Recapitulação e Contexto:</strong> Da interface estática da Aula 4 para a interatividade. </li> <li> <strong>Conceitos Fundamentais:</strong> O que são Listeners e Callbacks? </li> <li> <strong>Conectando Mundos:</strong> Acessando Views do XML no código Kotlin. </li> <li> <strong>Ouvindo o Usuário:</strong> Explorando <code>setOnClickListener</code> e outros tipos de eventos. </li> <li> <strong>O Melhor Amigo do Desenvolvedor:</strong> Um mergulho profundo no Logcat e suas boas práticas. </li> <li> <strong>Atividade Prática:</strong> Dando vida ao nosso app \"Olá, [Nome]!\" de forma incremental. </li> <li> <strong>Relevância Profissional:</strong> Por que estas ferramentas são cruciais no mercado de trabalho. </li> <li> <strong>Quiz Rápido e Tarefa (TED):</strong> Consolidando o conhecimento. </li> </ul> </div> <div id=\"contexto\" data-legacy-card=\"\"> <h3> Contextualizando: Onde a Interação Acontece? </h3> <div> <p> Na <strong>Aula 4</strong>, construímos nossa primeira interface com <code>TextView</code>, <code>EditText</code> e <code>Button</code>. Criamos uma tela estática, uma \"planta baixa\" visual. Agora, precisamos fazer com que essa tela \"sem vida\" se torne interativa. A lógica para isso vive no nosso arquivo <strong><code>MainActivity.kt</code></strong>, especificamente dentro do método <strong><code>onCreate()</code></strong>. </p> <p> O <code>onCreate()</code> é o local ideal para configurar nossos <code>listeners</code> porque ele é chamado apenas uma vez quando a tela é criada. Isso garante que nossos \"vigias\" de eventos sejam posicionados assim que os componentes visuais existem, prontos para responder às ações do usuário. </p> <div> <h5>O que são Listeners e Callbacks?</h5> <p> Esses são padrões de programação fundamentais. Um <strong>Listener</strong> (\"ouvinte\") é um objeto que \"escuta\" por um evento específico (como um clique). Um <strong>Callback</strong> (\"chamada de volta\") é a função que o listener executa quando o evento ocorre. Em resumo: nós registramos um listener em um botão e fornecemos uma função de callback para ser chamada de volta quando o clique acontecer. </p> </div> </div> </div> <div id=\"conectando-mundos\" data-legacy-card=\"\"> <h3> Conectando o Visual (XML) à Lógica (Kotlin) </h3> <div> <p> Para manipular uma View no Kotlin, primeiro precisamos obter uma referência a ela. A forma tradicional é usando o método <strong><code>findViewById()</code></strong>. </p> <div> <button>Copiar</button> <div> <h5> // Encontrando as Views pelo ID e atribuindo a variáveis </h5> <pre>val meuButton: Button = findViewById(R.id.buttonSaudacao)\nval meuEditText: EditText = findViewById(R.id.editTextNome)</pre> </div> </div> <div> <h5>Tópico Avançado: View Binding</h5> <p> Embora <code>findViewById()</code> funcione, a abordagem moderna e recomendada pela Google é o <strong>View Binding</strong>. Ele gera uma classe de vinculação que permite acessar as Views diretamente, com segurança de nulos e de tipos, eliminando a necessidade do <code>findViewById()</code>. Veremos isso em detalhes mais à frente, mas é importante saber que existe uma forma mais segura e eficiente! </p> </div> </div> </div> <div id=\"event-listeners\" data-legacy-card=\"\"> <h3> Ouvindo o Usuário: Manipulação de Eventos </h3> <div> <p> Com a referência ao botão em mãos, podemos configurar seu <code>OnClickListener</code>. Esta é a forma mais comum de responder a cliques. </p> <div> <h4> Fluxo de um Evento de Clique </h4> <img src=\"https://placehold.co/800x200/e0e7ff/3730a3?text=Usuário+Toca+na+Tela+->+Sistema+Android+Detecta+o+Toque+->+Chama+o+Listener+do+Botão+->+Seu+Código+Kotlin+é+Executado\" alt=\"Diagrama de fluxo de evento\"> </div> <h4> Sintaxe Lambda (Preferencial) </h4> <p> O Kotlin torna a definição de listeners extremamente concisa com a sintaxe de lambda (o bloco de código entre <code-text>{}</code-text>). </p> <div> <button>Copiar</button> <div> <h5>// Sintaxe moderna e limpa com Lambda</h5> <pre>meuButton.setOnClickListener { // Ação a ser executada Log.d(TAG, \"Botão foi clicado!\")\n}</pre> </div> </div> <h4> Sintaxe com Classe Anônima (Legado) </h4> <p> É útil conhecer a sintaxe mais antiga, que você encontrará em projetos Java ou em código mais antigo. Ela é mais verbosa, mas faz exatamente a mesma coisa. </p> <div> <button>Copiar</button> <div> <h5>// Sintaxe mais antiga com classe anônima</h5> <pre>meuButton.setOnClickListener(object : View.OnClickListener { override fun onClick(v: View?) { // Ação a ser executada Log.d(TAG, \"Botão foi clicado!\") }\n})</pre> </div> </div> <h4> Além do Clique Simples </h4> <p> Existem muitos outros tipos de eventos. Por exemplo, para detectar um clique longo, usamos o <code>setOnLongClickListener</code>. </p> <div> <button>Copiar</button> <div> <h5>// Exemplo de clique longo</h5> <pre>meuButton.setOnLongClickListener { Log.d(TAG, \"O botão foi pressionado por um tempo!\") true // Retornar 'true' indica que o evento foi consumido\n}</pre> </div> </div> <p> Para saber mais, explore a <a href=\"https://developer.android.com/guide/topics/ui/ui-events\" target=\"_blank\">documentação oficial sobre Eventos de Interface</a>. </p> </div> </div> <div id=\"logcat\" data-legacy-card=\"\"> <h3> O Melhor Amigo do Dev: Usando o Logcat </h3> <div> <p> O Logcat é a sua janela para a alma do seu aplicativo. É a ferramenta mais fundamental para depurar e entender o que está acontecendo \"por baixo dos panos\". </p> <img src=\"https://placehold.co/800x250/1e293b/94a3b8?text=Janela+do+Logcat+no+Android+Studio\" alt=\"Janela do Logcat no Android Studio\"> <p> Para enviar mensagens para o Logcat, usamos a classe <code-text>Log</code-text>. Cada nível de prioridade tem uma cor associada no Android Studio para fácil identificação: </p> <ul> <li> <span>Log.v(\"TAG\", \"Verbose\")</span>: Para logs detalhados. </li> <li> <span>Log.d(\"TAG\", \"Debug\")</span>: O que mais usaremos para depuração. </li> <li> <span>Log.i(\"TAG\", \"Info\")</span>: Para informações de execução normal. </li> <li> <span>Log.w(\"TAG\", \"Warning\")</span>: Para alertar sobre algo inesperado. </li> <li> <span>Log.e(\"TAG\", \"Error\")</span>: Para registrar erros e exceções. </li> </ul> <div> <h5>Boas Práticas de Logging</h5> <ul> <li> <strong>Use TAGs Consistentes:</strong> Defina uma <code-text>TAG</code-text> constante no início de cada classe para filtrar facilmente seus logs. </li> <li> <strong>Escolha o Nível Certo:</strong> Use <code-text>Log.d</code-text> para depuração durante o desenvolvimento e <code-text>Log.i</code-text> para eventos importantes. <code-text>Log.e</code-text> deve ser reservado para erros reais. </li> <li> <strong>Não Exponha Dados Sensíveis:</strong> Nunca, jamais, imprima senhas, tokens de API ou informações pessoais do usuário nos logs. Em um app publicado, esses logs podem ser lidos. </li> </ul> <p> Aprenda a usar esta ferramenta de forma eficaz na <a href=\"https://developer.android.com/studio/debug/logcat\" target=\"_blank\">documentação oficial do Logcat</a>. </p> </div> </div> </div> <div id=\"atividade-pratica-aula5\" data-legacy-card=\"\"> <h3> Atividade Prática: Dando Vida ao App </h3> <div> <p> Vamos juntar tudo! O objetivo agora é fazer com que, ao clicar no botão, o nome digitado no <code-text>EditText</code-text> seja exibido no <code-text>Logcat</code-text>. </p> <ol> <li>Abra o seu projeto \"Olá, Mundo!\" no Android Studio.</li> <li>Navegue até o arquivo <strong><code-text>MainActivity.kt</code-text></strong>.</li> <li>Substitua o conteúdo do arquivo pelo código completo abaixo.</li> </ol> <div> <button>Copiar</button> <div> <h5>// Código Final para MainActivity.kt</h5> <pre>package br.com.unichristus.ads.olamundoandroid import androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.util.Log\nimport android.widget.Button\nimport android.widget.EditText class MainActivity : AppCompatActivity() { // Boa prática: Definir uma TAG constante para os logs desta classe private val TAG = \"MainActivity\" override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) // Encontrar o botão pelo ID que definimos no XML val meuButton: Button = findViewById(R.id.buttonSaudacao) val meuEditText: EditText = findViewById(R.id.editTextNome) // Configurar o listener de clique para o botão meuButton.setOnClickListener { // Este bloco de código é executado quando o botão é clicado // 1. Pegar o texto que o usuário digitou no EditText val nomeDigitado = meuEditText.text.toString() // 2. Exibir o texto no Logcat com o nível de Debug Log.d(TAG, \"O nome digitado foi: $nomeDigitado\") } }\n}</pre> </div> </div> <h4>Como Testar:</h4> <ul> <li>Execute o aplicativo no emulador ou no seu dispositivo.</li> <li> No Android Studio, abra a janela do Logcat (geralmente na parte inferior da tela). </li> <li> Na barra de busca do Logcat, digite a TAG que usamos: <code-text>MainActivity</code-text>. </li> <li> No aplicativo, digite seu nome no campo de texto e clique no botão \"Exibir Mensagem\". </li> <li>Observe a mensagem aparecer na janela do Logcat!</li> </ul> </div> </div> <div id=\"tarefa-aula5\" data-legacy-grid=\"\"> <h3> Encerramento e Próximos Passos </h3> <div data-legacy-card=\"\"> <h5>Tarefa para a próxima aula (TED)</h5> <p> O desafio é comprovar que você conseguiu executar os passos da aula de hoje e sabe usar a ferramenta de depuração mais essencial. </p> <ol> <li> Siga os passos da atividade prática para fazer seu aplicativo exibir uma mensagem no Logcat ao clicar no botão. </li> <li>Execute o app, digite seu nome e clique no botão.</li> <li> Tire um print (captura de tela) da janela do Logcat no Android Studio, mostrando claramente a mensagem com seu nome. </li> <li>Submeta a imagem no Moodle.</li> </ol> </div> <div data-legacy-card=\"\"> <h4> Bibliografia Recomendada </h4> <ul> <li> OLIVEIRA, Diego Bittencourt de et al. <strong>Desenvolvimento para Dispositivos Móveis</strong>. Porto Alegre: SAGAH, 2019. v. 1. </li> <li> SIMAS, V. L. et al. <strong>Desenvolvimento para Dispositivos Móveis – Volume 2</strong>. Grupo A, 2019. </li> </ul> </div> </div>"
    }
  ]
}

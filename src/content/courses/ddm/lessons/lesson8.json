{
  "id": "lesson8",
  "title": "Aula 8: Unidade I – Consumo de APIs",
  "objective": "",
  "content": [
    {
      "type": "html",
      "html": "<section id=\"aula8\" class=\"mb-16 pt-16\">\n  <header class=\"mb-12 border-b pb-8\">\n    <h2 class=\"text-4xl font-bold text-slate-900\">\n      Aula 8: Unidade II – Salvando Estado com Bundle\n    </h2>\n    <p class=\"text-lg text-slate-600 mt-2\">\n      Preservar o estado da interface em mudanças de configuração, como rotação\n      de tela, utilizando o objeto Bundle.\n    </p>\n  </header>\n\n  <div class=\"bg-white p-6 rounded-lg shadow-md mb-12\">\n    <h3 class=\"font-bold text-2xl text-slate-800 mb-4\">Plano de Voo da Aula</h3>\n    <ul class=\"list-disc list-inside space-y-2 text-slate-700\">\n      <li>\n        <strong>Recapitulação e Relevância Profissional:</strong> Conectando a\n        Aula 7 com o mercado de trabalho.\n      </li>\n      <li>\n        <strong>A Solução Clássica:</strong> O que é um\n        <code-text>Bundle</code-text> e como usar\n        <code-text>onSaveInstanceState</code-text>.\n      </li>\n      <li>\n        <strong>Abordagem Alternativa:</strong> Conhecendo o\n        <code-text>onRestoreInstanceState</code-text>.\n      </li>\n      <li>\n        <strong>Atividade Prática Guiada:</strong> Codificação passo a passo da\n        funcionalidade completa.\n      </li>\n      <li>\n        <strong>A Abordagem Moderna:</strong> Introdução ao ViewModel com\n        SavedStateHandle.\n      </li>\n      <li>\n        <strong>Tarefa (TED):</strong> Aplicar o conhecimento em um projeto\n        próprio.\n      </li>\n    </ul>\n  </div>\n\n  <div id=\"contexto\" class=\"mb-16\">\n    <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n      Recapitulando o Problema e a Relevância Profissional\n    </h3>\n    <div class=\"bg-white p-8 rounded-lg shadow-md\">\n      <p class=\"text-lg mb-4\">\n        Na <strong>Aula 7</strong>, vimos a recriação da Activity: ao rotacionar\n        a tela, o Android <strong>destrói e recria</strong> a nossa tela, e com\n        isso, qualquer dado inserido pelo usuário é perdido. Agora, vamos\n        resolver o problema salvando o estado.\n      </p>\n      <div class=\"callout callout-info\">\n        <h5 class=\"font-bold mb-2\">Relevância Profissional e UX</h5>\n        <p>\n          Saber gerenciar o estado da UI não é um detalhe, é um requisito\n          fundamental. Em aplicações reais, a perda de estado é inaceitável:\n        </p>\n        <ul class=\"list-disc list-inside mt-2\">\n          <li>\n            <strong>Apps de Banco:</strong> Perder dados durante uma\n            transferência.\n          </li>\n          <li>\n            <strong>E-commerce:</strong> Esvaziar o carrinho de compras durante\n            o checkout.\n          </li>\n          <li>\n            <strong>Editores de Texto:</strong> Apagar o parágrafo que o usuário\n            acabou de escrever.\n          </li>\n        </ul>\n        <p class=\"mt-2\">\n          Falhas como essas impactam negativamente as métricas de\n          <strong>retenção e satisfação do usuário</strong>. Por isso, este é um\n          dos tópicos mais cobrados em entrevistas para desenvolvedores Android.\n        </p>\n      </div>\n    </div>\n  </div>\n\n  <div id=\"bundle\" class=\"mb-16\">\n    <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n      A Solução Clássica: <code-text>onSaveInstanceState</code-text> e o\n      <code-text>Bundle</code-text>\n    </h3>\n    <div class=\"bg-white p-8 rounded-lg shadow-md\">\n      <p class=\"text-lg mb-4\">\n        O Android nos oferece um mecanismo para salvar e restaurar o estado\n        temporário da nossa UI. A abordagem clássica envolve dois métodos do\n        ciclo de vida e um objeto chamado <code-text>Bundle</code-text>.\n      </p>\n      <img\n        src=\"https://sombraprof.github.io/ddm/imagens/aula_8_imagen_1.png\"\n        alt=\"Fluxo do Bundle\"\n        class=\"mt-6 rounded-lg shadow-sm mx-auto\"\n        width=\"600\"\n        height=\"600\"\n      />\n      <h4 class=\"font-bold text-xl text-slate-800 mt-8 mb-4\">\n        Abordagem Alternativa: <code-text>onRestoreInstanceState</code-text>\n      </h4>\n      <p>\n        Além de restaurar o estado no <code-text>onCreate</code-text>, você pode\n        usar o método <code-text>onRestoreInstanceState()</code-text>. A\n        principal diferença é quando ele é chamado:\n      </p>\n      <ul class=\"list-disc list-inside space-y-2 mt-2\">\n        <li>\n          <code-text>onCreate()</code-text>: É chamado sempre que a Activity é\n          criada. Você precisa verificar se\n          <code-text>savedInstanceState</code-text> não é nulo.\n        </li>\n        <li>\n          <code-text>onRestoreInstanceState()</code-text>: É chamado\n          <strong>apenas se houver um estado a ser restaurado</strong>, e sempre\n          <strong>após</strong> o <code-text>onStart()</code-text>. É um local\n          mais \"limpo\" para a lógica de restauração, pois você não precisa da\n          verificação de nulidade.\n        </li>\n      </ul>\n      <p class=\"mt-4\">\n        Saiba mais na\n        <a\n          href=\"https://developer.android.com/reference/android/app/Activity.html#onRestoreInstanceState(android.os.Bundle)\"\n          target=\"_blank\"\n          class=\"text-indigo-600 hover:underline font-semibold\"\n          >documentação oficial do onRestoreInstanceState</a\n        >.\n      </p>\n    </div>\n  </div>\n\n  <div id=\"atividade-pratica-aula8\" class=\"mb-16\">\n    <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n      Atividade Prática: Salvando um Formulário Simples\n    </h3>\n    <div class=\"bg-white p-8 rounded-lg shadow-md\">\n      <p class=\"mb-4\">\n        Vamos criar um app com dois campos de texto (Nome e Sobrenome) e\n        garantir que os dados não se percam na rotação.\n      </p>\n\n      <h4 class=\"font-bold text-2xl text-slate-800 mt-8 mb-4\">\n        Passo 1: O Layout (<code-text>activity_main.xml</code-text>)\n      </h4>\n      <p class=\"mb-4\">\n        Crie um novo projeto e substitua o conteúdo do seu arquivo de layout por\n        este código.\n      </p>\n      <div class=\"code-block-wrapper\">\n        <button class=\"copy-button\">Copiar</button>\n        <div class=\"code-block\">\n          <h5 class=\"mono\">\n            &lt;-- Código para res/layout/activity_main.xml --&gt;\n          </h5>\n          <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\"\n    tools:context=\".MainActivity\"&gt;\n\n    &lt;EditText\n        android:id=\"@+id/editTextNome\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"Digite seu nome\"\n        android:inputType=\"textPersonName\" /&gt;\n\n    &lt;EditText\n        android:id=\"@+id/editTextSobrenome\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"16dp\"\n        android:hint=\"Digite seu sobrenome\"\n        android:inputType=\"textPersonName\" /&gt;\n\n&lt;/LinearLayout&gt;</code></pre>\n        </div>\n      </div>\n\n      <h4 class=\"font-bold text-2xl text-slate-800 mt-12 mb-4\">\n        Passo 2: A Lógica (<code-text>MainActivity.kt</code-text>)\n      </h4>\n      <p class=\"mb-4\">\n        Agora, vamos implementar a lógica para salvar e restaurar o texto dos\n        dois campos.\n      </p>\n      <div class=\"code-block-wrapper\">\n        <button class=\"copy-button\">Copiar</button>\n        <div class=\"code-block\">\n          <h5 class=\"mono\">// Código Final para MainActivity.kt</h5>\n          <pre><code>package br.com.unichristus.ads.salvandoestado\n\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.util.Log\nimport android.widget.EditText\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var editTextNome: EditText\n    private lateinit var editTextSobrenome: EditText\n\n    companion object {\n        private const val KEY_NOME = \"KEY_NOME\"\n        private const val KEY_SOBRENOME = \"KEY_SOBRENOME\"\n        private const val TAG = \"EstadoApp\"\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        Log.d(TAG, \"onCreate\")\n\n        editTextNome = findViewById(R.id.editTextNome)\n        editTextSobrenome = findViewById(R.id.editTextSobrenome)\n\n        if (savedInstanceState != null) {\n            val nomeSalvo = savedInstanceState.getString(KEY_NOME)\n            val sobrenomeSalvo = savedInstanceState.getString(KEY_SOBRENOME)\n            Log.i(TAG, \"Restaurando estado... Nome: $nomeSalvo, Sobrenome: $sobrenomeSalvo\")\n            editTextNome.setText(nomeSalvo)\n            editTextSobrenome.setText(sobrenomeSalvo)\n        }\n    }\n\n    override fun onSaveInstanceState(outState: Bundle) {\n        super.onSaveInstanceState(outState)\n        Log.i(TAG, \"onSaveInstanceState: Salvando dados...\")\n\n        val nomeAtual = editTextNome.text.toString()\n        val sobrenomeAtual = editTextSobrenome.text.toString()\n\n        outState.putString(KEY_NOME, nomeAtual)\n        outState.putString(KEY_SOBRENOME, sobrenomeAtual)\n    }\n}</code></pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div id=\"tarefa-aula8\" class=\"mb-16\">\n    <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n      Encerramento e Próximos Passos\n    </h3>\n    <div class=\"callout callout-task\">\n      <h5 class=\"font-bold mb-2\">Tarefa para a próxima aula (TED)</h5>\n      <p class=\"mb-4\">\n        O desafio é replicar o que fizemos hoje, consolidando o entendimento\n        sobre o salvamento de estado.\n      </p>\n      <ol class=\"list-decimal list-inside space-y-2\">\n        <li>\n          Crie um novo aplicativo com dois campos de entrada\n          (<code-text>EditText</code-text>) de sua escolha (ex: \"Email\" e\n          \"Telefone\").\n        </li>\n        <li>\n          Implemente a lógica com <code-text>onSaveInstanceState</code-text> e a\n          restauração no <code-text>onCreate</code-text> para garantir que os\n          dados digitados persistam durante a rotação da tela.\n        </li>\n        <li>\n          Tire prints (capturas de tela) do seu app funcionando: um antes de\n          rotacionar (com dados) e um depois de rotacionar (mostrando que os\n          dados foram mantidos).\n        </li>\n        <li>Submeta os prints no Moodle.</li>\n      </ol>\n    </div>\n    <div class=\"bg-white p-6 rounded-lg shadow-md mt-8\">\n      <h4 class=\"font-bold text-xl text-slate-800 mb-4\">\n        Bibliografia Recomendada\n      </h4>\n      <ul class=\"list-disc list-inside space-y-2\">\n        <li>\n          SIMAS, V. L. et al.\n          <strong>Desenvolvimento para Dispositivos Móveis – Volume 2</strong>.\n          Grupo A, 2019.\n        </li>\n        <li>\n          OLIVEIRA, Diego Bittencourt de et al.\n          <strong>Desenvolvimento para Dispositivos Móveis</strong>. SAGAH,\n          2019. v. 1.\n        </li>\n        <li>\n          <a\n            href=\"https://developer.android.com/topic/libraries/architecture/saving-states\"\n            target=\"_blank\"\n            class=\"text-indigo-600 hover:underline font-semibold\"\n            >Documentação Oficial sobre Como Salvar Estados da UI</a\n          >.\n        </li>\n      </ul>\n    </div>\n  </div>\n</section>\n"
    }
  ]
}

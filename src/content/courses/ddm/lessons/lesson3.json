{
  "id": "lesson3",
  "title": "Aula 3: Unidade I – Primeiro App Android",
  "objective": "",
  "content": [
    {
      "type": "legacySection",
      "id": "aula3",
      "title": "Plano de Voo da Aula",
      "html": "<div data-legacy-card=\"\"> <ul> <li><strong>Recapitulação:</strong> Revisão rápida da criação do projeto \"Olá, Mundo!\".</li> <li><strong>O Mapa do Tesouro:</strong> Por que a estrutura de pastas é o nosso guia.</li> <li><strong>Análise dos Arquivos Essenciais:</strong> Um mergulho profundo no que cada arquivo principal faz.</li> <li><strong>Atividade Prática:</strong> Exploração orientada da estrutura do nosso projeto no Android Studio.</li> <li><strong>Tarefa (TED):</strong> Preparação para a consolidação do conhecimento.</li> </ul> </div> <div id=\"mapa-do-tesouro\" data-legacy-card=\"\"> <h3>O Mapa do Tesouro: Entendendo a Estrutura do Projeto</h3> <div> <p>Imagine que um projeto Android é como uma cidade. Existem diferentes bairros, cada um com uma função específica: um para as \"casas\" (layouts), um para as \"leis\" (manifest), e um para os \"cérebros\" que fazem tudo funcionar (código Kotlin). Antes de começar a construir novos prédios, precisamos aprender a ler o mapa da cidade.</p> <p>Nesta aula, vamos aprender a ler este \"mapa\". Compreender a função de cada pasta e arquivo principal é fundamental para nos tornarmos desenvolvedores organizados e eficientes. Ignorar esta etapa é como tentar construir uma casa sem a planta: o resultado será o caos.</p> </div> </div> <div id=\"estrutura-visual\" data-legacy-card=\"\"> <h3>A Estrutura de Pastas Desmistificada</h3> <div> <p>Quando abrimos nosso projeto na visão \"Android\" do Android Studio, vemos uma estrutura simplificada e lógica. Vamos analisar os componentes mais importantes:</p> <div> <p>📁 app</p> <div> <p>📁 manifests</p> <div> <p>📄 AndroidManifest.xml</p> </div> </div> <div> <p>📁 java</p> <div> <p>📄 br.com.unichristus.ads.olamundoandroid</p> <div> <p>📄 MainActivity.kt</p> </div> </div> </div> <div> <p>📁 res (Recursos)</p> <div> <p>📁 drawable (Imagens, formas, ícones)</p> <p>📁 layout (Telas do App)</p> <div> <p>📄 activity_main.xml</p> </div> <p>📁 mipmap (Ícones do App para diferentes densidades)</p> <p>📁 values (Textos, Cores, Temas)</p> </div> </div> </div> </div> </div> <div data-legacy-grid=\"\"> <h3>Análise Detalhada dos Arquivos Principais</h3> <!-- AndroidManifest.xml --> <div data-legacy-card=\"\"> <h4>📄 AndroidManifest.xml</h4> <p><strong>Função:</strong> É o \"RG\" do seu aplicativo. Este arquivo contém metadados essenciais que o sistema Android precisa para poder executar seu código.</p> <p><strong>Analogia:</strong> Pense nele como a capa de um livro, que informa o título, o autor e um resumo do que se trata, antes mesmo de você começar a ler.</p> <div> <h5>&lt;-- Exemplo Simplificado do Manifest --&gt;</h5> <pre><code>&lt;manifest ...&gt; &lt;!-- Futuramente, permissões como a de internet serão declaradas aqui --&gt; &lt;!-- &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt; --&gt; &lt;application android:allowBackup=\"true\" android:icon=\"@mipmap/ic_launcher\" android:label=\"@string/app_name\" android:roundIcon=\"@mipmap/ic_launcher_round\" android:supportsRtl=\"true\" android:theme=\"@style/Theme.OlaMundoAndroid\"&gt; &lt;activity android:name=\".MainActivity\" android:exported=\"true\"&gt; &lt;intent-filter&gt; &lt;action android:name=\"android.intent.action.MAIN\" /&gt; &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;/application&gt;\n&lt;/manifest&gt;</code></pre> </div> <div> <h5>Pontos-Chave a Observar</h5> <ul> <li><code>android:icon</code> e <code>android:label</code>: Definem o ícone e o nome do aplicativo que aparecem na tela inicial do celular.</li> <li><code>&lt;activity&gt;</code>: Cada tela (Activity) do seu app deve ser declarada aqui. Por enquanto, só temos uma: a <code-text>MainActivity</code-text>.</li> <li><code>&lt;intent-filter&gt;</code>: Este bloco dentro da activity, com as tags <code>MAIN</code> e <code>LAUNCHER</code>, é especial. Ele diz ao sistema Android: \"Esta é a tela principal, a primeira a ser aberta quando o usuário clicar no ícone do app\".</li> <li><strong>Permissões:</strong> Futuramente, quando nosso app precisar acessar recursos como a internet, a câmera ou a localização, teremos que solicitar permissões aqui.</li> </ul> <p>Para um mergulho mais fundo, consulte a <a href=\"https://developer.android.com/guide/topics/manifest/manifest-intro\" target=\"_blank\">documentação oficial do AndroidManifest.xml</a>.</p> </div> </div> <!-- MainActivity.kt --> <div data-legacy-card=\"\"> <h4>📄 MainActivity.kt</h4> <p><strong>Função:</strong> É o \"cérebro\" da sua tela principal. Este arquivo Kotlin contém a lógica que controla o comportamento da interface.</p> <p><strong>Analogia:</strong> Se o arquivo de layout é a planta da casa, o arquivo Kotlin é o eletricista e o encanador que fazem as luzes acenderem e a água correr.</p> <div> <h5>// Código Padrão da MainActivity</h5> <pre><code>package br.com.unichristus.ads.olamundoandroid import androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle class MainActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) }\n}</code></pre> </div> <div> <h5>Analisando o Código</h5> <ul> <li><code>class MainActivity : AppCompatActivity()</code>: Estamos a criar uma classe chamada <code-text>MainActivity</code-text> que \"herda\" comportamentos e características de <code-text>AppCompatActivity</code-text>, uma classe base do Android que nos dá funcionalidades essenciais.</li> <li><code>override fun onCreate(...)</code>: Este é um método do ciclo de vida da Activity. O código dentro dele é executado assim que a tela é criada. É aqui que configuramos o nosso layout.</li> <li><code>setContentView(R.layout.activity_main)</code>: Esta é a linha que conecta a lógica (Kotlin) ao visual (XML). Ela diz: \"Para esta tela, use o design definido no arquivo <code-text>activity_main.xml</code-text> que está na pasta <code-text>layout</code-text>\".</li> </ul> <p>Aprenda mais sobre o ciclo de vida na <a href=\"https://developer.android.com/guide/components/activities/activity-lifecycle\" target=\"_blank\">documentação oficial sobre Activities</a>.</p> </div> </div> <!-- Pasta res --> <div data-legacy-card=\"\"> <h4>📁 res (Recursos)</h4> <p><strong>Função:</strong> Esta é a pasta mais importante para a parte visual e estática do seu app. Ela contém todos os recursos que não são código, como layouts, imagens, textos e cores.</p> <p><strong>Boa Prática:</strong> A principal vantagem de usar a pasta <code-text>res</code-text> é a separação de responsabilidades. Manter o design (XML), textos (strings) e lógica (Kotlin) em arquivos separados torna o projeto muito mais organizado e fácil de manter.</p> <div> <p><strong>📁 drawable:</strong> Contém imagens (PNG, JPG), vetores (XML) e outros recursos gráficos.</p> <p><strong>📁 layout:</strong> Contém os arquivos XML que definem a estrutura visual de cada tela do seu app. O nosso <code-text>activity_main.xml</code-text> vive aqui.</p> <p><strong>📁 mipmap:</strong> Similar ao <code-text>drawable</code-text>, mas é usado especificamente para os ícones do aplicativo. O Android usa esta pasta para fornecer a versão do ícone com a melhor qualidade dependendo da densidade da tela do dispositivo.</p> <p><strong>📁 values:</strong> Uma pasta crucial para a organização e boas práticas. </p><ul> <li><code>strings.xml</code>: Onde você deve definir TODOS os textos do seu app. Em vez de escrever \"Olá, Mundo!\" diretamente no layout, você cria uma string com um nome (ex: <code-text>app_name</code-text>) e a referencia no layout (<code-text>@string/app_name</code-text>). Isso facilita a tradução do app para outros idiomas.</li> <li><code>colors.xml</code>: Onde você define a paleta de cores do seu app.</li> <li><code>themes.xml</code>: Onde você define o estilo visual geral do seu app (cores primárias, fontes, etc.).</li> </ul> <p></p> </div> </div> </div> <div id=\"atividade-pratica\" data-legacy-card=\"\"> <h3>Atividade Prática: Exploração Guiada</h3> <div> <p>Agora, vamos abrir o projeto \"Olá, Mundo!\" no Android Studio e explorar juntos. Tente encontrar as respostas para as seguintes perguntas:</p> <ol> <li>Abra o arquivo <code>AndroidManifest.xml</code>. Qual é o nome do tema (theme) do seu aplicativo?</li> <li>Navegue até a pasta <code>res/values</code> e abra o arquivo <code>strings.xml</code>. Altere o valor da string <code-text>app_name</code-text> para \"Meu Primeiro App\". Execute o aplicativo novamente. O que mudou?</li> <li>Abra o arquivo <code>activity_main.xml</code>. Mude o valor do atributo <code>android:text</code> no <code-text>TextView</code-text> de \"Hello World!\" para o seu nome. Execute o aplicativo e veja o resultado.</li> <li>Abra a <code>MainActivity.kt</code>. Encontre a linha que carrega o layout. Tente comentá-la (adicionando <code-text>//</code-text> no início da linha) e execute o app. O que acontece? (Não se esqueça de descomentar depois!).</li> </ol> </div> </div> <div id=\"tarefa-aula3\" data-legacy-grid=\"\"> <h3>Encerramento e Próximos Passos</h3> <div data-legacy-card=\"\"> <h5>Tarefa para a próxima aula (TED)</h5> <p>Para consolidar o que aprendemos hoje, a tarefa é criar um mapa mental ou um diagrama que represente a estrutura de um projeto Android.</p> <ol> <li>Utilize uma ferramenta de sua preferência (como <a href=\"https://app.diagrams.net/\" target=\"_blank\">draw.io</a>, um software de mapa mental, ou até mesmo papel e caneta).</li> <li>Elabore um diagrama que mostre as principais pastas (<code-text>manifests</code-text>, <code-text>java</code-text>, <code-text>res</code-text>) e arquivos (<code-text>AndroidManifest.xml</code-text>, <code-text>MainActivity.kt</code-text>, <code-text>activity_main.xml</code-text>).</li> <li>Para cada item, escreva uma breve descrição da sua função, com base no que discutimos em aula.</li> <li>Submeta uma imagem ou PDF do seu diagrama no Moodle.</li> </ol> </div> <div data-legacy-card=\"\"> <h4>Bibliografia Recomendada</h4> <ul> <li>OLIVEIRA, Diego Bittencourt de et al. <strong>Desenvolvimento para Dispositivos Móveis</strong>. Porto Alegre: SAGAH, 2019. v. 1.</li> <li>URMA, Raoul-Gabriel; WARBURTON, Richard. <strong>Desenvolvimento Real de Software: Um Guia de Projetos para Fundamentos em Java</strong>. Alta Books, 2021.</li> </ul> </div> </div>"
    }
  ]
}

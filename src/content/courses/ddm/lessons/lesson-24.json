{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-24",
  "title": "Aula 24: Testes de UI com Espresso e Compose Testing",
  "slug": "testes-ui-espresso-compose",
  "summary": "Constrói suíte de testes de interface usando Espresso e Compose Testing, integrando ao pipeline de QA colaborativo.",
  "objective": "Automatizar fluxos críticos de UI garantindo regressão mínima e evidências para o squad.",
  "objectives": [
    "Escrever testes Espresso para telas XML legado.",
    "Criar testes Compose usando `composeTestRule`.",
    "Aplicar princípios de acessibilidade e sincronização de idling resources.",
    "Integrar testes ao CI e registrar métricas de cobertura."
  ],
  "competencies": ["Qualidade de software mobile", "Automação de testes", "Colaboração QA-dev"],
  "skills": [
    "Localizar elementos com `onView`/`onNodeWithTag`.",
    "Criar idling resources personalizados.",
    "Capturar screenshots pós-teste.",
    "Publicar relatórios no GitHub Actions."
  ],
  "outcomes": [
    "Suite de testes cobrindo fluxo de login e listagem.",
    "Relatório de cobertura anexado ao Moodle.",
    "Pipeline CI rodando testes automaticamente."
  ],
  "prerequisites": ["Aulas 21-23"],
  "tags": ["android", "tests", "espresso", "compose"],
  "duration": 120,
  "modality": "in-person",
  "resources": [
    {
      "label": "Testing Compose UI",
      "url": "https://developer.android.com/jetpack/compose/testing",
      "type": "guide"
    },
    {
      "label": "Espresso Testing",
      "url": "https://developer.android.com/training/testing/espresso",
      "type": "guide"
    },
    {
      "label": "GitHub Actions for Android",
      "url": "https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-android",
      "type": "guide"
    }
  ],
  "bibliography": [
    "Google. Testing documentation. 2024.",
    "Android Dev BR. Guia de testes Espresso/Compose. 2024.",
    "Testing Google Samples. Now in Android. 2024."
  ],
  "assessment": {
    "type": "formative",
    "description": "Rubrica avalia cobertura, clareza dos testes e integração no CI."
  },
  "content": [
    {
      "type": "videos",
      "title": "Vídeos em português",
      "videos": [
        {
          "url": "https://www.youtube.com/watch?v=RgFnE7o_TN0",
          "title": "Testes de UI com Espresso no Android (Rocketseat Brasil)",
          "caption": "Demonstra como testar fluxos críticos usando Espresso com dicas em português."
        },
        {
          "url": "https://www.youtube.com/watch?v=3wkqkl7tYj4",
          "title": "Compose Testing avançado (Android Dev BR)",
          "caption": "Apresenta composeTestRule, tags e estratégias de sincronização."
        }
      ]
    },
    {
      "type": "flightPlan",
      "title": "Plano da aula",
      "items": [
        "(15 min) Warm-up: revisar bugs recentes detectados via testes manuais.",
        "(30 min) Demo: configurar Espresso + Compose Testing no projeto.",
        "(45 min) Laboratório: escrever testes para login e lista, incluindo idling resources.",
        "(20 min) Integração CI: configurar workflow GitHub Actions.",
        "(10 min) Retro: definir próximos fluxos a automatizar."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Estudo de caso – MarketHub: regressões no checkout",
      "content": [
        {
          "type": "paragraph",
          "text": "Uma refatoração recente quebrou o fluxo de checkout e apenas testes manuais detectaram o problema perto do release."
        },
        {
          "type": "paragraph",
          "text": "A equipe possui testes unitários, mas a suíte de UI ainda é pequena. O gerente exigiu evidências automatizadas para evitar novos incidentes."
        },
        {
          "type": "unorderedList",
          "items": [
            "Fluxos críticos: Login, catálogo, checkout",
            "Ferramentas: Espresso, Compose Testing, GitHub Actions",
            "Objetivo: Cobertura de UI 65% e relatórios publicados a cada PR"
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            "Pergunta: Quais cenários precisam de testes instrumentados prioritários?",
            "Pergunta: Como garantir dados previsíveis para testes?",
            "Pergunta: Que automações no CI provam a execução dos testes?"
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            "Ação sugerida: Criar fixtures estáveis para login e catálogo.",
            "Ação sugerida: Implementar gravação de evidências (screenshots, vídeos) em falhas.",
            "Ação sugerida: Publicar workflow Actions com matriz de dispositivos e upload de relatórios."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Padrões de testes",
      "content": "Nomeie testes como `Given_When_Then`, utilize tags acessíveis (`testTag`) e limpe estado entre execuções."
    },
    {
      "type": "contentBlock",
      "title": "Arquitetura de testes",
      "content": [
        {
          "type": "image",
          "src": "https://developer.android.com/static/images/training/testing/espresso-test-structure.png",
          "alt": "Estrutura de testes Espresso"
        },
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Arrange",
              "text": "Configurar ambiente e dados simulados."
            },
            {
              "title": "Act",
              "text": "Interagir com UI usando Espresso/Compose APIs."
            },
            {
              "title": "Assert",
              "text": "Validar saída e registrar evidências."
            }
          ]
        }
      ]
    },
    {
      "type": "stepper",
      "title": "Pipeline de QA orientado a evidências",
      "steps": [
        {
          "title": "Planejamento",
          "description": "Defina personas, fluxos críticos e dados mock para cada cenário."
        },
        {
          "title": "Implementação",
          "description": "Escreva testes Espresso/Compose organizados por features com IDs acessíveis."
        },
        {
          "title": "Automação",
          "description": "Configure GitHub Actions para rodar em emuladores e publicar relatórios e artefatos."
        },
        {
          "title": "Análise",
          "description": "Monitore resultados, identifique flakiness e ajuste o backlog de QA continuamente."
        }
      ]
    },
    {
      "type": "pipelineCanvas",
      "title": "Pipeline de QA automatizado",
      "summary": "Conectar desenvolvimento, testes e evidências em cada sprint.",
      "stages": [
        {
          "id": "planejamento",
          "title": "1. Planejamento",
          "summary": "Selecionar fluxos críticos, definir métricas e ambiente.",
          "status": "in-progress",
          "owners": ["QA", "Mobile"],
          "deliverables": [
            {
              "id": "matriz",
              "label": "Matriz de testes"
            },
            {
              "id": "dados",
              "label": "Dados mock"
            }
          ]
        },
        {
          "id": "execucao",
          "title": "2. Execução",
          "summary": "Escrever testes, rodar localmente e ajustar idling resources.",
          "status": "not-started",
          "owners": ["Mobile"],
          "deliverables": [
            {
              "id": "suite",
              "label": "Suite instrumentada"
            },
            {
              "id": "report",
              "label": "Relatório JUnit"
            }
          ]
        },
        {
          "id": "ci",
          "title": "3. CI/CD",
          "summary": "Integrar pipeline ao GitHub Actions e armazenar evidências.",
          "status": "not-started",
          "owners": ["DevOps", "QA"],
          "deliverables": [
            {
              "id": "workflow",
              "label": "Workflow YAML"
            },
            {
              "id": "artefatos",
              "label": "Screenshots e vídeos"
            }
          ]
        }
      ]
    },
    {
      "type": "quiz",
      "title": "Checagem rápida",
      "question": "Um teste Compose intermitente falha por causa de animações assíncronas. Qual solução estabiliza o cenário?",
      "options": [
        {
          "id": "opt-1",
          "text": "Desabilitar animações usando `composeTestRule.mainClock.autoAdvance = false` e controlar o avanço manualmente.",
          "correct": true
        },
        {
          "id": "opt-2",
          "text": "Rodar o teste no modo release para que as animações sejam mais rápidas.",
          "correct": false
        },
        {
          "id": "opt-3",
          "text": "Executar o teste três vezes seguidas e considerar aprovado se passar em pelo menos uma.",
          "correct": false
        }
      ],
      "allowRetry": true,
      "feedback": {
        "correct": "Controlar o clock garante previsibilidade do Compose Testing sem desativar validações importantes.",
        "incorrect": "Controlar o clock garante previsibilidade do Compose Testing sem desativar validações importantes."
      }
    },
    {
      "type": "callout",
      "variant": "task",
      "title": "TED – Suite automatizada",
      "content": "Implemente testes para login e lista, publique relatório no Actions e envie link + commit `QA_A24` no Moodle."
    }
  ],
  "metadata": {
    "status": "in-review",
    "updatedAt": "2025-02-10T00:00:00.000Z",
    "owners": ["Equipe de Conteúdo DDM"],
    "sources": ["Plano de ensino DDM 2025.2", "Revisão docente fev/2025"]
  }
}

{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-10",
  "title": "Aula 10: Unidade II – Passagem de Dados com Intent.putExtra",
  "summary": "Explora estratégias para enviar diferentes tipos de dados entre Activities, padronizando chaves e validando retornos.",
  "objective": "Trocar informações complexas entre telas usando extras seguros e reutilizáveis.",
  "objectives": [
    "Definir contratos de navegação reutilizando constantes de chave.",
    "Serializar objetos com Parcelable e transferi-los entre Activities.",
    "Implementar respostas com Activity Result API para sincronizar edições."
  ],
  "competencies": [
    "Modelagem de dados entre camadas da aplicação",
    "Integração entre componentes Android"
  ],
  "skills": [
    "Criar contratos de extras e validar obrigatoriedade.",
    "Implementar `Parcelable` com Kotlin `@Parcelize`.",
    "Utilizar `registerForActivityResult` para obter feedback de telas filhas."
  ],
  "outcomes": [
    "Contrato de navegação documentado e versionado.",
    "App envia e recebe objetos `Parcelable` sem perder dados."
  ],
  "prerequisites": [
    "Dominar Intents explícitas (aula 9).",
    "Projeto com pelo menos duas Activities configuradas."
  ],
  "tags": ["android", "intents", "parcelable"],
  "duration": 105,
  "modality": "in-person",
  "resources": [
    {
      "label": "Define navigation arguments",
      "url": "https://developer.android.com/guide/navigation/navigation-pass-data",
      "type": "article"
    },
    {
      "label": "Parcelize plugin",
      "url": "https://kotlinlang.org/docs/parcelize.html",
      "type": "reference"
    }
  ],
  "bibliography": [
    "SAGAH. <strong>Desenvolvimento para Dispositivos Móveis</strong>. Cap. 6 – Comunicação entre telas, 2019.",
    "GOOGLE. <strong>Activity results</strong>. Android Developers, 2024."
  ],
  "assessment": {
    "type": "practice",
    "description": "Envio de dados complexos entre tela de formulário e tela de confirmação usando Parcelable e Activity Result.",
    "rubric": "Entrega demonstra ida e volta dos dados, com validação e registro no mural da turma."
  },
  "content": [
    {
      "type": "flightPlan",
      "title": "Plano de voo da aula (1h 45min)",
      "items": [
        "<strong>(10 min) Relembrando Intents:</strong> diferenças entre extras obrigatórios e opcionais.",
        "<strong>(20 min) Contratos de navegação:</strong> centralizando chaves e defaults.",
        "<strong>(20 min) Parcelable com @Parcelize:</strong> enviando objetos complexos.",
        "<strong>(20 min) Activity Result API:</strong> retornando alterações para a tela anterior.",
        "<strong>(15 min) Laboratório:</strong> ida e volta entre cadastro e resumo.",
        "<strong>(10 min) TED e próximos passos.</strong>"
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Situação",
      "content": "O usuário ajusta dados na tela de resumo. Como devolver as alterações para a tela anterior sem recriar tudo?"
    },
    {
      "type": "cardGrid",
      "title": "Tipos de extras mais comuns",
      "columns": 3,
      "cards": [
        {
          "title": "Simples",
          "subtitle": "String, Int, Boolean",
          "tone": "info",
          "items": [
            "Use para campos obrigatórios",
            "Defina defaults claros",
            "Valide antes de enviar"
          ]
        },
        {
          "title": "Coleções",
          "subtitle": "ArrayList, Bundle",
          "tone": "secondary",
          "items": [
            "Use tipos suportados nativamente",
            "Evite listas gigantes",
            "Prefira IDs quando possível"
          ]
        },
        {
          "title": "Objetos",
          "subtitle": "Parcelable/Serializable",
          "tone": "success",
          "items": [
            "Implemente `Parcelable` para performance",
            "Use @Parcelize para reduzir boilerplate",
            "Considere DTOs enxutos"
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Centralizando chaves de extras",
      "content": [
        {
          "type": "code",
          "language": "kotlin",
          "code": "object NavigationKeys {\n  object Summary {\n    const val EXTRA_USER = \"extra_user\"\n    const val EXTRA_REQUEST_CODE = \"extra_request_code\"\n  }\n}"
        },
        {
          "type": "paragraph",
          "text": "Organize chaves em um objeto ou arquivo dedicado. Isso evita typos e facilita a manutenção compartilhada pela equipe."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Enviando objetos com Parcelable",
      "content": [
        {
          "type": "code",
          "language": "kotlin",
          "code": "@Parcelize\ndata class UserInfo(\n  val name: String,\n  val email: String,\n  val subscribed: Boolean\n) : Parcelable\n\nval user = UserInfo(\n  name = binding.nameInput.text.toString(),\n  email = binding.emailInput.text.toString(),\n  subscribed = binding.subscribeSwitch.isChecked\n)\n\nval intent = Intent(this, SummaryActivity::class.java).apply {\n  putExtra(NavigationKeys.Summary.EXTRA_USER, user)\n}\nstartActivity(intent)"
        },
        {
          "type": "callout",
          "variant": "warning",
          "title": "Parcelize exige plugin",
          "content": "Adicione `kotlin-parcelize` no Gradle module e sincronize o projeto antes de usar a anotação."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Recebendo dados e exibindo",
      "content": [
        {
          "type": "code",
          "language": "kotlin",
          "code": "class SummaryActivity : AppCompatActivity() {\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(binding.root)\n\n    val user = intent.getParcelableExtra<UserInfo>(NavigationKeys.Summary.EXTRA_USER)\n      ?: return finish()\n\n    binding.summaryName.text = user.name\n    binding.summaryEmail.text = user.email\n    binding.summarySubscription.text =\n      if (user.subscribed) \"Receber novidades\" else \"Não receber novidades\"\n  }\n}"
        },
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Validar nulos",
              "text": "Finalize a tela caso o objeto seja obrigatório e não tenha sido enviado."
            },
            {
              "title": "Exibir feedback",
              "text": "Mostre ao usuário a confirmação das informações recebidas."
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Retornando alterações com Activity Result API",
      "content": [
        {
          "type": "code",
          "language": "kotlin",
          "code": "private val editUserLauncher = registerForActivityResult(\n  ActivityResultContracts.StartActivityForResult()\n) { result ->\n  if (result.resultCode == Activity.RESULT_OK) {\n    val updatedUser = result.data\n      ?.getParcelableExtra<UserInfo>(NavigationKeys.Summary.EXTRA_USER)\n      ?: return@registerForActivityResult\n    updateUi(updatedUser)\n  }\n}\n\nfun openEditScreen(user: UserInfo) {\n  val intent = Intent(this, EditUserActivity::class.java).apply {\n    putExtra(NavigationKeys.Summary.EXTRA_USER, user)\n  }\n  editUserLauncher.launch(intent)\n}"
        },
        {
          "type": "paragraph",
          "text": "A nova API reduz boilerplate, evita request codes mágicos e lida com recriação automática da Activity."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Laboratório",
      "content": [
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Defina contratos",
              "text": "Mapeie chaves e tipos em um arquivo compartilhado."
            },
            {
              "title": "Implemente ida e volta",
              "text": "Envie `UserInfo` para a tela de resumo e retorne com alterações."
            },
            {
              "title": "Documente",
              "text": "Registre no mural quais dados são obrigatórios e quais são opcionais."
            }
          ]
        },
        {
          "type": "callout",
          "variant": "task",
          "title": "TED",
          "content": "<p>Criar uma variante do app que envia a foto do usuário (URI) e valida o retorno com Activity Result.</p>"
        }
      ]
    },
    {
      "type": "bibliographyBlock",
      "title": "Referências complementares",
      "references": [
        "GOOGLE. <strong>Guide to Parcelable</strong>. 2024.",
        "ANDROID DEVELOPERS. <strong>Get results from activities</strong>. 2024."
      ]
    }
  ],
  "metadata": {
    "status": "in-review",
    "updatedAt": "2024-05-24T00:00:00.000Z",
    "owners": ["Prof. João Lima", "Profa. Ana Bezerra"],
    "sources": ["Plano de navegação DDM", "Guia de boas práticas de Intents"]
  }
}

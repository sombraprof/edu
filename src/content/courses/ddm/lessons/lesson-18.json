{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-18",
  "title": "Aula 18: Coroutines e Tratamento de Erros em Chamadas Remotas",
  "slug": "coroutines-tratamento-erros-remotos",
  "summary": "Aprenda a estruturar coroutines com ViewModelScope, lidar com exceções e exibir feedbacks amigáveis quando a API falhar.",
  "objective": "Implementar camadas assíncronas resilientes usando Kotlin Coroutines, Result wrappers e padrões de retry exponencial.",
  "objectives": [
    "Configurar ViewModelScope e supervisores para isolar falhas.",
    "Mapear exceções e estados de carregamento usando sealed classes.",
    "Implementar políticas de retry com backoff e circuit breaker leve.",
    "Exibir feedback de erro acessível e coletar logs estruturados."
  ],
  "competencies": [
    "Programação assíncrona em Kotlin",
    "Observabilidade e UX resiliente",
    "Integração segura com APIs"
  ],
  "skills": [
    "Criar use cases com `withContext` e `Dispatchers.IO`.",
    "Encadear retries com `retryWhen` e limites configuráveis.",
    "Emitir estados de UI reativos com `StateFlow`.",
    "Persistir falhas em `Crashlytics` ou log local para auditoria."
  ],
  "outcomes": [
    "Entrega ViewModel com fluxo Loading/Success/Error.",
    "Aplicativo exibe mensagens localizadas e opção de tentar novamente.",
    "Logs de erro enviados para canal definido no Moodle."
  ],
  "prerequisites": ["Aula 17 – Consumo de API com Retrofit e Moshi."],
  "tags": ["android", "coroutines", "resiliencia", "ux"],
  "duration": 120,
  "modality": "in-person",
  "resources": [
    {
      "label": "Coroutines on Android",
      "url": "https://developer.android.com/kotlin/coroutines",
      "type": "guide"
    },
    {
      "label": "Retry policies with Kotlin Flow",
      "url": "https://developer.android.com/kotlin/flow",
      "type": "article"
    },
    {
      "label": "Android Accessibility: Error feedback",
      "url": "https://developer.android.com/guide/topics/ui/accessibility/custom-views#error-feedback",
      "type": "guide"
    }
  ],
  "bibliography": [
    "Google. Coroutines on Android. 2024.",
    "Shekhar, A. Kotlin Coroutines by Tutorials. Razeware, 2023.",
    "Android Dev BR. Guia de tratamentos de erro para mobile. 2024."
  ],
  "assessment": {
    "type": "formative",
    "description": "Rubrica de par avaliando fluxo Loading/Success/Error, clareza das mensagens e registro de logs."
  },
  "content": [
    {
      "type": "videos",
      "title": "Vídeos em português para reforço",
      "videos": [
        {
          "url": "https://www.youtube.com/watch?v=dqH4Gq5GgGU",
          "title": "Coroutines no Android na prática (Android Dev BR)",
          "caption": "Live coding em português mostrando ViewModelScope e tratamento de exceções."
        },
        {
          "url": "https://www.youtube.com/watch?v=9xk5Zs7YT1M",
          "title": "Tratamento de erros elegante com Flow (Kotlin Weekend PT-BR)",
          "caption": "Apresenta estratégias de retry, sealed classes e mensagens para usuários brasileiros."
        }
      ]
    },
    {
      "type": "flightPlan",
      "title": "Plano de voo da aula (120 min)",
      "items": [
        "(10 min) Check-in: Conte sobre a pior mensagem de erro que já recebeu em um app.",
        "(20 min) Revisão guiada: estrutura de coroutines, hierarquia e escopos.",
        "(35 min) Laboratório 1: implementar wrapper Result com sealed class e estados para UI.",
        "(25 min) Laboratório 2: adicionar retry com exponencial backoff usando `retryWhen`.",
        "(20 min) Pair testing: validar mensagens, acessibilidade e logging estruturado.",
        "(10 min) Debrief: registrar métricas de erro e plano de monitoramento em squad."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Estudo de caso – MedTrack: incidentes de API",
      "content": [
        {
          "type": "paragraph",
          "text": "O aplicativo MedTrack monitora pacientes crônicos e sofreu quedas na sincronização de exames em horários de pico."
        },
        {
          "type": "paragraph",
          "text": "A equipe adotou coroutines recentemente, mas não mapeou exceções específicas da API. O suporte registrou 37 tickets em dois dias com falhas silenciosas."
        },
        {
          "type": "unorderedList",
          "items": [
            "Usuários afetados: 1.240 pacientes",
            "Janela crítica: 07h às 09h (coleta de exames)",
            "Requisito: Tempo de recuperação < 5 min e logs auditáveis"
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            "Pergunta: Quais operações devem ser isoladas com supervisores para evitar cancelamentos em cascata?",
            "Pergunta: Como comunicar ao usuário a falha sem quebrar a confiança no aplicativo?",
            "Pergunta: Que métricas de observabilidade comprovam que a correção funcionou?"
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            "Ação sugerida: Classifique exceções conhecidas (HTTP, timeouts, parsing) e defina mensagens amigáveis.",
            "Ação sugerida: Implemente retries com backoff exponencial apenas nas operações idempotentes.",
            "Ação sugerida: Envie eventos de falha para o Crashlytics e configure alerta no canal do squad."
          ]
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Checklist de acessibilidade",
      "content": [
        {
          "type": "paragraph",
          "text": "Mensagens devem ter linguagem clara, cores com contraste 4.5:1 e suporte a TalkBack. Inclua ações alternativas (botão tentar novamente e link para suporte)."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Arquitetura recomendada",
      "content": [
        {
          "type": "image",
          "src": "https://developer.android.com/static/images/kotlin/coroutines-viewmodel.svg",
          "alt": "Diagrama de ViewModel emitindo Flow para a UI"
        },
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Use cases",
              "text": "Encapsule chamadas Retrofit e traduza exceções para o domínio."
            },
            {
              "title": "ViewModel",
              "text": "Exponha `StateFlow<UiState>` com Loading/Success/Error e cancelamento seguro em `onCleared`."
            },
            {
              "title": "UI Compose/XML",
              "text": "Renderize estados com componentes acessíveis, Snackbars e CTA de retry."
            }
          ]
        }
      ]
    },
    {
      "type": "stepper",
      "title": "Checklist de resiliência em coroutines",
      "steps": [
        {
          "title": "Mapeamento de riscos",
          "description": "Liste endpoints críticos, SLAs e exceções esperadas; defina responsáveis por cada caso."
        },
        {
          "title": "Proteção",
          "description": "Configure supervisores, timeouts controlados e política de retry com limites explícitos."
        },
        {
          "title": "Experiência do usuário",
          "description": "Projete estados de UI com feedback acessível, botão de tentar novamente e fallback offline."
        },
        {
          "title": "Observabilidade",
          "description": "Envie métricas e logs estruturados, monitore dashboards e compartilhe relatório semanal."
        }
      ]
    },
    {
      "type": "pipelineCanvas",
      "title": "Fluxo resiliente da feature",
      "summary": "Da chamada remota ao feedback ao usuário com métricas registradas.",
      "stages": [
        {
          "id": "contrato",
          "title": "1. Contrato da API",
          "summary": "Validar esquema JSON, códigos HTTP e requisitos de autenticação.",
          "status": "in-progress",
          "owners": ["Backend", "Mobile"],
          "deliverables": [
            {
              "id": "schema",
              "label": "Contrato atualizado"
            },
            {
              "id": "postman",
              "label": "Coleção Postman"
            }
          ]
        },
        {
          "id": "implementacao",
          "title": "2. Implementação e testes",
          "summary": "Adicionar use case, mapper, Flow e testes unitários/instrumentados.",
          "status": "not-started",
          "owners": ["Mobile"],
          "deliverables": [
            {
              "id": "coverage",
              "label": "Cobertura > 80%"
            },
            {
              "id": "log",
              "label": "Logs estruturados"
            }
          ]
        },
        {
          "id": "monitoramento",
          "title": "3. Monitoramento",
          "summary": "Configurar Crashlytics/Logcat remoto e alarmes no Slack/Discord.",
          "status": "not-started",
          "owners": ["Mobile", "QA"],
          "deliverables": [
            {
              "id": "dashboard",
              "label": "Dashboard de erros"
            },
            {
              "id": "playbook",
              "label": "Playbook de rollback"
            }
          ]
        }
      ]
    },
    {
      "type": "quiz",
      "title": "Checagem rápida",
      "question": "`retryWhen` está disparando muitas tentativas em um endpoint que retorna HTTP 400 (erro de validação). Qual ajuste é mais adequado?",
      "options": [
        {
          "id": "opt-1",
          "text": "Interromper o retry ao detectar erros de regra de negócio e notificar o usuário com a mensagem retornada pela API.",
          "correct": true
        },
        {
          "id": "opt-2",
          "text": "Aumentar o delay entre as tentativas para evitar sobrecarga no servidor.",
          "correct": false
        },
        {
          "id": "opt-3",
          "text": "Encapsular a chamada em `withContext(Dispatchers.Default)` para não travar a UI.",
          "correct": false
        }
      ],
      "allowRetry": true,
      "feedback": {
        "correct": "Erros 400 indicam problema de dados; repetir a requisição não resolve e apenas amplia a carga no backend.",
        "incorrect": "Erros 400 indicam problema de dados; repetir a requisição não resolve e apenas amplia a carga no backend."
      }
    },
    {
      "type": "callout",
      "variant": "task",
      "title": "TED – Relatório de Resiliência",
      "content": "Grave um vídeo de 90 segundos demonstrando a tela reagindo a 3 cenários (sucesso, falha de rede, HTTP 500), anexando log formatado em JSON. Submissão pelo Moodle até domingo."
    }
  ],
  "metadata": {
    "status": "in-review",
    "updatedAt": "2025-02-10T00:00:00.000Z",
    "owners": ["Equipe de Conteúdo DDM"],
    "sources": ["Plano de ensino DDM 2025.2", "Revisão docente fev/2025"]
  }
}

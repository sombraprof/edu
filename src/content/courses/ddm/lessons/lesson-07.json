{
  "formatVersion": "md3.lesson.v1",
  "id": "lesson-07",
  "title": "Aula 7: Unidade II – O Ciclo de Vida das Activities",
  "summary": "Mapeia os estados da Activity, apresenta estratégias de preservação de estado e introduz componentes Jetpack lifecycle-aware.",
  "objective": "Dominar o ciclo de vida de uma Activity para evitar perdas de estado e vazamentos de memória em apps Android.",
  "objectives": [
    "Identificar os estados principais de uma Activity e relacioná-los com callbacks do Android Framework.",
    "Implementar persistência de estado em mudanças de configuração usando `onSaveInstanceState` e ViewModel.",
    "Aplicar observadores de ciclo de vida para desacoplar componentes que dependem do contexto da Activity."
  ],
  "competencies": [
    "Gestão de ciclo de vida e recursos em aplicativos móveis",
    "Aplicação de padrões Jetpack para arquitetura reativa"
  ],
  "skills": [
    "Diagnosticar perdas de estado provocadas por mudanças de configuração.",
    "Registrar e interpretar logs de transição de ciclo de vida.",
    "Empregar `LifecycleObserver` e `ViewModel` para preservar dados e desacoplar lógica."
  ],
  "outcomes": [
    "Entrega de um relatório curto destacando transições observadas e correções aplicadas.",
    "Protótipo atualizado do app de boas-vindas com estado preservado após rotação."
  ],
  "prerequisites": [
    "Conclusão das práticas das aulas 01-06.",
    "Android Studio instalado com emulador configurado."
  ],
  "tags": ["android", "lifecycle", "jetpack"],
  "duration": 110,
  "modality": "in-person",
  "resources": [
    {
      "label": "Lifecycle: designing for change",
      "url": "https://developer.android.com/guide/components/activities/activity-lifecycle",
      "type": "article"
    },
    {
      "label": "Lifecycle-aware components codelab",
      "url": "https://developer.android.com/codelabs/android-lifecycles",
      "type": "codelab"
    }
  ],
  "bibliography": [
    "GOOGLE. <strong>Guide to App Architecture</strong>. Android Developers, 2024.",
    "SAGAH. <strong>Desenvolvimento para Dispositivos Móveis</strong>. Cap. 4 – Ciclo de Vida e Estados, 2019."
  ],
  "assessment": {
    "type": "practice",
    "description": "Observação guiada do ciclo de vida com Logcat e atualização do app de boas-vindas preservando estado.",
    "rubric": "Registra todas as transições, documenta decisões e apresenta código funcional com ViewModel ou `onSaveInstanceState`."
  },
  "content": [
    {
      "type": "flightPlan",
      "title": "Plano de voo da aula (1h 50min)",
      "items": [
        "<strong>(10 min) Check-in profissional:</strong> casos reais em que o ciclo de vida causou bugs ou reviews negativas.",
        "<strong>(20 min) Diagrama oficial:</strong> visita guiada pelos estados <em>created → started → resumed → paused → stopped → destroyed</em>.",
        "<strong>(25 min) Callbacks na prática:</strong> instrumentação com logs e inspeção do Logcat.",
        "<strong>(20 min) Mudanças de configuração:</strong> estratégias com `onSaveInstanceState`, `savedStateHandle` e ViewModel.",
        "<strong>(20 min) Lifecycle-aware components:</strong> utilizando `LifecycleObserver` para desacoplar listeners.",
        "<strong>(15 min) Laboratório guiado + TED:</strong> ajustes no app e definição da tarefa assíncrona."
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Pergunta geradora",
      "content": "O que acontece com a experiência do usuário quando o sistema recria a sua Activity sem você perceber?"
    },
    {
      "type": "cardGrid",
      "title": "Estados e responsabilidades",
      "columns": 3,
      "cards": [
        {
          "title": "Created",
          "subtitle": "Configuração inicial",
          "tone": "info",
          "items": [
            "Inflar views e configurar bindings",
            "Instanciar dependências leves",
            "Evitar operações longas na thread principal"
          ]
        },
        {
          "title": "Started / Resumed",
          "subtitle": "Tela em primeiro plano",
          "tone": "success",
          "items": [
            "Registrar listeners visuais",
            "Iniciar animações e sensores necessários",
            "Atualizar UI com dados atuais"
          ]
        },
        {
          "title": "Paused / Stopped",
          "subtitle": "Fora de foco",
          "tone": "warning",
          "items": [
            "Liberar recursos caros (câmera, localização)",
            "Persistir rascunhos temporários",
            "Evitar continuar tarefas que dependem da UI"
          ]
        },
        {
          "title": "Destroyed",
          "subtitle": "Reciclagem de memória",
          "tone": "danger",
          "items": [
            "Cancelar corrotinas ou jobs ativos",
            "Limpar referências a contextos",
            "Preparar o objeto para GC"
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Mapeando transições com o Logcat",
      "content": [
        {
          "type": "paragraph",
          "text": "Instrumente o ciclo de vida adicionando logs nos callbacks principais e observe as transições à medida que a tela ganha ou perde foco."
        },
        {
          "type": "orderedList",
          "items": [
            {
              "title": "onCreate",
              "text": "Configure bindings, DI e dependências leves."
            },
            {
              "title": "onStart",
              "text": "Prepare recursos que tornam a tela visível."
            },
            {
              "title": "onResume",
              "text": "Sincronize dados interativos e retome sensores."
            },
            {
              "title": "onPause",
              "text": "Suspenda atualizações que dependem da interação imediata."
            },
            {
              "title": "onStop",
              "text": "Liberte recursos caros e confirme salvamento de estado."
            }
          ]
        },
        {
          "type": "callout",
          "variant": "warning",
          "title": "Atenção às transições rápidas",
          "content": "Mudanças de app (home button) disparam <code>onPause → onStop</code> rapidamente; certifique-se de não depender do usuário voltar imediatamente."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Salvando e restaurando estado",
      "content": [
        {
          "type": "paragraph",
          "text": "Mudanças de configuração (rotação, modo escuro, idioma) recriam a Activity. Utilize o bundle de estado e ViewModels para preservar dados relevantes."
        },
        {
          "type": "code",
          "language": "kotlin",
          "code": "override fun onSaveInstanceState(outState: Bundle) {\n  super.onSaveInstanceState(outState)\n  outState.putString(KEY_GREETING, binding.messageInput.text.toString())\n}\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n  super.onCreate(savedInstanceState)\n  setContentView(binding.root)\n  binding.messageInput.setText(savedInstanceState?.getString(KEY_GREETING).orEmpty())\n}"
        },
        {
          "type": "callout",
          "variant": "info",
          "title": "Por que ViewModel?",
          "content": "O <code>ViewModel</code> sobrevive a recriações e mantém dados pesados em memória sem depender do bundle serializado. Combine com <code>SavedStateHandle</code> para persistir apenas o essencial."
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Lifecycle-aware components em ação",
      "content": [
        {
          "type": "paragraph",
          "text": "`LifecycleObserver` e extensões KTX permitem reagir às mudanças sem poluir a Activity. Ideal para listeners de localização, analytics ou players de mídia."
        },
        {
          "type": "code",
          "language": "kotlin",
          "code": "class AnalyticsObserver(private val tracker: EventTracker) : DefaultLifecycleObserver {\n  override fun onResume(owner: LifecycleOwner) {\n    tracker.startSession()\n  }\n\n  override fun onPause(owner: LifecycleOwner) {\n    tracker.endSession()\n  }\n}\n\nclass DashboardActivity : AppCompatActivity() {\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    lifecycle.addObserver(AnalyticsObserver(appTracker))\n  }\n}"
        },
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Identifique o gatilho",
              "text": "Ex.: sensor, player, analytics, broadcast."
            },
            {
              "title": "Implemente um observer",
              "text": "Use `DefaultLifecycleObserver` e implemente apenas os callbacks necessários."
            },
            {
              "title": "Registre no lifecycle",
              "text": "Adicione o observer no `onCreate` e remova quando não precisar mais."
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Laboratório guiado",
      "content": [
        {
          "type": "paragraph",
          "text": "Vamos atualizar o app de boas-vindas para registrar transições e preservar o texto digitado."
        },
        {
          "type": "orderedList",
          "items": [
            {
              "title": "Instrumentação",
              "text": "Adicione logs nos callbacks e observe o Logcat ao rotacionar."
            },
            {
              "title": "Preservação",
              "text": "Implemente `onSaveInstanceState` ou ViewModel para manter o nome digitado."
            },
            {
              "title": "Observador",
              "text": "Crie um `LifecycleObserver` para iniciar/encerrar uma animação de destaque."
            },
            {
              "title": "Reflexão",
              "text": "Documente no mural da turma o que mudou na UX depois dos ajustes."
            }
          ]
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "Encerramento e próximos passos",
      "content": [
        {
          "type": "callout",
          "variant": "task",
          "title": "Tarefa assíncrona (TED)",
          "content": "<p>Implemente um medidor de sessão que conta quanto tempo a Activity ficou ativa e publica o valor no Firebase Analytics ou Logcat.</p><p>Traga os insights na próxima aula com capturas de tela do Logcat.</p>"
        }
      ]
    },
    {
      "type": "bibliographyBlock",
      "title": "Referências complementares",
      "references": [
        "GOOGLE. <strong>Manage your app's lifecycle with Lifecycle libraries</strong>. 2024.",
        "MEDNIEKS, Zigurd et al. <strong>Programming Android</strong>. O'Reilly, 4ª ed., 2022. Cap. 3."
      ]
    }
  ],
  "metadata": {
    "status": "in-review",
    "updatedAt": "2024-05-18T00:00:00.000Z",
    "owners": ["Prof. João Lima", "Profa. Ana Bezerra"],
    "sources": ["Backlog da sprint 'Ciclo de Vida' – DDM", "Notas de aula 2024.1"]
  }
}

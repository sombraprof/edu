{
  "id": "lesson10",
  "title": "Aula 10: Unidade II – Firebase e Autenticação",
  "objective": "",
  "content": [
    {
      "type": "html",
      "html": "<section id=\"aula10\" class=\"max-w-7xl mx-auto\">\n    <header class=\"mb-12 border-b pb-8\">\n        <h2 class=\"text-4xl font-bold text-slate-900\">\n            Aula 10: Unidade II – Passagem de Dados com <code>Intent.putExtra</code>\n        </h2>\n        <p class=\"text-lg text-slate-600 mt-2\">\n            Demonstrar como enviar diferentes tipos de dados de uma Activity para outra e recebê-los de forma segura.\n        </p>\n    </header>\n\n    <div class=\"bg-white p-6 rounded-lg shadow-md mb-12\">\n        <h3 class=\"font-bold text-2xl text-slate-800 mb-4\">Plano de Voo da Aula</h3>\n        <ul class=\"list-disc list-inside space-y-2 text-slate-700\">\n            <li><strong>Recapitulação da Aula 9:</strong> O que é uma <code>Intent</code> explícita e como iniciar uma nova tela.</li>\n            <li><strong>Anexando Dados à \"Carta\":</strong> Aprofundando no método <code>putExtra()</code>.</li>\n            <li><strong>Tipos de Dados:</strong> Como enviar não apenas Strings, mas também números, booleanos e outros tipos primitivos.</li>\n            <li><strong>Recebendo os Dados com Segurança:</strong> A importância dos valores padrão ao usar <code>getIntExtra()</code>, <code>getBooleanExtra()</code>, etc.</li>\n            <li><strong>Atividade Prática Guiada:</strong> Construindo uma tela de cadastro e uma tela de confirmação de dados.</li>\n            <li><strong>Tópico Avançado:</strong> Uma introdução sobre como passar objetos complexos com a interface <code>Parcelable</code>.</li>\n            <li><strong>Tarefa (TED):</strong> Aplicar todo o conhecimento construindo um app de cadastro funcional.</li>\n        </ul>\n    </div>\n\n    <div id=\"recapitulacao\" class=\"mb-16\">\n        <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">Recapitulando: A \"Carta\" e o \"Anexo\"</h3>\n        <div class=\"bg-white p-8 rounded-lg shadow-md\">\n            <p class=\"text-lg mb-4\">Na <strong>Aula 9</strong>, aprendemos que uma <code>Intent</code> funciona como uma carta que uma <code>Activity</code> envia para outra. Usamos <code>putExtra()</code> para anexar uma única informação (o nome do usuário) a essa carta.</p>\n            <p>Hoje, vamos expandir esse conceito. Uma carta pode ter vários anexos, e cada anexo pode ser de um tipo diferente. Vamos aprender a enviar um formulário completo de dados de uma tela para outra, lidando com diferentes tipos de informação, como textos, números e valores lógicos.</p>\n        </div>\n    </div>\n\n    <div id=\"putExtra-detalhes\" class=\"mb-16\">\n        <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">Aprofundando no <code>Intent.putExtra()</code></h3>\n        <div class=\"bg-white p-8 rounded-lg shadow-md\">\n            <p class=\"text-lg mb-4\">O método <code>putExtra()</code> é sobrecarregado, o que significa que existem várias versões dele, cada uma projetada para um tipo de dado específico. A estrutura é sempre a mesma: um par de <strong>chave-valor</strong>.</p>\n            \n            <div class=\"code-block-wrapper\">\n                <button class=\"copy-button\">Copiar</button>\n                <div class=\"code-block\">\n                    <h5 class=\"mono\">// Sintaxe do putExtra</h5>\n                    <pre><code>intent.putExtra(\"CHAVE_DO_DADO\", valor)</code></pre>\n                </div>\n            </div>\n\n            <h4 class=\"font-bold text-xl text-slate-800 mt-8 mb-4\">Enviando e Recebendo Diferentes Tipos</h4>\n            <p>Abaixo está uma tabela com os tipos de dados mais comuns que você pode passar e os métodos correspondentes para enviar e receber:</p>\n            <div class=\"overflow-x-auto mt-4\">\n                <table class=\"w-full text-left border-collapse\">\n                    <thead class=\"bg-slate-200\">\n                        <tr>\n                            <th class=\"p-3 border\">Tipo de Dado</th>\n                            <th class=\"p-3 border\">Método para Enviar</th>\n                            <th class=\"p-3 border\">Método para Receber</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td class=\"p-3 border mono\">String</td>\n                            <td class=\"p-3 border mono\"><code>.putExtra(\"KEY\", \"Texto\")</code></td>\n                            <td class=\"p-3 border mono\"><code>.getStringExtra(\"KEY\")</code></td>\n                        </tr>\n                        <tr>\n                            <td class=\"p-3 border mono\">Int</td>\n                            <td class=\"p-3 border mono\"><code>.putExtra(\"KEY\", 10)</code></td>\n                            <td class=\"p-3 border mono\"><code>.getIntExtra(\"KEY\", 0)</code></td>\n                        </tr>\n                        <tr>\n                            <td class=\"p-3 border mono\">Boolean</td>\n                            <td class=\"p-3 border mono\"><code>.putExtra(\"KEY\", true)</code></td>\n                            <td class=\"p-3 border mono\"><code>.getBooleanExtra(\"KEY\", false)</code></td>\n                        </tr>\n                        <tr>\n                            <td class=\"p-3 border mono\">Float</td>\n                            <td class=\"p-3 border mono\"><code>.putExtra(\"KEY\", 19.99f)</code></td>\n                            <td class=\"p-3 border mono\"><code>.getFloatExtra(\"KEY\", 0.0f)</code></td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <div class=\"callout callout-info\">\n                <h5 class=\"font-bold mb-2\">A Importância do Valor Padrão</h5>\n                <p>Note que, ao receber tipos primitivos como <code>Int</code>, <code>Boolean</code> ou <code>Float</code>, o método <code>get...Extra()</code> exige um <strong>segundo parâmetro</strong>: um valor padrão. Isso é uma medida de segurança. Se a <code>Intent</code> chegar sem a chave esperada (por exemplo, por um erro de programação), o app não irá travar; ele simplesmente usará o valor padrão que você forneceu.</p>\n            </div>\n        </div>\n    </div>\n\n    <div id=\"atividade-pratica-aula10\" class=\"mb-16\">\n        <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">Atividade Prática: Tela de Cadastro</h3>\n        <div class=\"bg-white p-8 rounded-lg shadow-md\">\n            <p class=\"mb-4\">Vamos construir um app com uma tela de cadastro (<code>MainActivity</code>) que envia os dados para uma tela de confirmação (<code>ConfirmacaoActivity</code>).</p>\n\n            <h4 class=\"font-bold text-2xl text-slate-800 mt-8 mb-4\">Passo 1: Layout do Cadastro (<code>activity_main.xml</code>)</h4>\n            <div class=\"code-block-wrapper\">\n                <button class=\"copy-button\">Copiar</button>\n                <div class=\"code-block\">\n                    <h5 class=\"mono\">&lt;-- Código para res/layout/activity_main.xml --&gt;</h5>\n                    <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;LinearLayout ... android:orientation=\"vertical\" android:padding=\"16dp\"&gt;\n\n    &lt;EditText\n        android:id=\"@+id/editTextNomeCompleto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"Nome Completo\"\n        android:inputType=\"textPersonName\" /&gt;\n\n    &lt;EditText\n        android:id=\"@+id/editTextEmail\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\"\n        android:hint=\"E-mail\"\n        android:inputType=\"textEmailAddress\" /&gt;\n\n    &lt;EditText\n        android:id=\"@+id/editTextIdade\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\"\n        android:hint=\"Idade\"\n        android:inputType=\"number\" /&gt;\n    \n    &lt;Button\n        android:id=\"@+id/buttonCadastrar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"24dp\"\n        android:text=\"Cadastrar\" /&gt;\n\n&lt;/LinearLayout&gt;</code></pre>\n                </div>\n            </div>\n\n            <h4 class=\"font-bold text-2xl text-slate-800 mt-12 mb-4\">Passo 2: Layout da Confirmação (<code>activity_confirmacao.xml</code>)</h4>\n             <div class=\"code-block-wrapper\">\n                <button class=\"copy-button\">Copiar</button>\n                <div class=\"code-block\">\n                    <h5 class=\"mono\">&lt;-- Código para res/layout/activity_confirmacao.xml --&gt;</h5>\n                    <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;LinearLayout ... android:orientation=\"vertical\" android:padding=\"16dp\"&gt;\n\n    &lt;TextView\n        android:id=\"@+id/textViewConfirmacaoNome\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"18sp\"\n        tools:text=\"Nome: Tiago Sombra\" /&gt;\n\n    &lt;TextView\n        android:id=\"@+id/textViewConfirmacaoEmail\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\"\n        android:textSize=\"18sp\"\n        tools:text=\"Email: email@teste.com\" /&gt;\n\n    &lt;TextView\n        android:id=\"@+id/textViewConfirmacaoIdade\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\"\n        android:textSize=\"18sp\"\n        tools:text=\"Idade: 30\" /&gt;\n\n&lt;/LinearLayout&gt;</code></pre>\n                </div>\n            </div>\n\n            <h4 class=\"font-bold text-2xl text-slate-800 mt-12 mb-4\">Passo 3: Lógica da <code>MainActivity.kt</code> (Enviar Dados)</h4>\n            <div class=\"code-block-wrapper\">\n                <button class=\"copy-button\">Copiar</button>\n                <div class=\"code-block\">\n                    <h5 class=\"mono\">// Código atualizado para MainActivity.kt</h5>\n                    <pre><code>// ... imports\nimport android.content.Intent\n\nclass MainActivity : AppCompatActivity() {\n\n    companion object {\n        const val EXTRA_NOME = \"EXTRA_NOME\"\n        const val EXTRA_EMAIL = \"EXTRA_EMAIL\"\n        const val EXTRA_IDADE = \"EXTRA_IDADE\"\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        // ...\n        val buttonCadastrar: Button = findViewById(R.id.buttonCadastrar)\n        val editTextNome: EditText = findViewById(R.id.editTextNomeCompleto)\n        val editTextEmail: EditText = findViewById(R.id.editTextEmail)\n        val editTextIdade: EditText = findViewById(R.id.editTextIdade)\n\n        buttonCadastrar.setOnClickListener {\n            val nome = editTextNome.text.toString()\n            val email = editTextEmail.text.toString()\n            val idade = editTextIdade.text.toString().toIntOrNull() ?: 0 // Converte para Int, com segurança\n\n            val intent = Intent(this, ConfirmacaoActivity::class.java)\n            intent.putExtra(EXTRA_NOME, nome)\n            intent.putExtra(EXTRA_EMAIL, email)\n            intent.putExtra(EXTRA_IDADE, idade)\n            \n            startActivity(intent)\n        }\n    }\n}</code></pre>\n                </div>\n            </div>\n\n            <h4 class=\"font-bold text-2xl text-slate-800 mt-12 mb-4\">Passo 4: Lógica da <code>ConfirmacaoActivity.kt</code> (Receber Dados)</h4>\n            <div class=\"code-block-wrapper\">\n                <button class=\"copy-button\">Copiar</button>\n                <div class=\"code-block\">\n                    <h5 class=\"mono\">// Código para ConfirmacaoActivity.kt</h5>\n                    <pre><code>// ... imports\nimport android.widget.TextView\n\nclass ConfirmacaoActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_confirmacao)\n\n        val nome = intent.getStringExtra(MainActivity.EXTRA_NOME)\n        val email = intent.getStringExtra(MainActivity.EXTRA_EMAIL)\n        val idade = intent.getIntExtra(MainActivity.EXTRA_IDADE, 0) // 0 é o valor padrão\n\n        findViewById&lt;TextView&gt;(R.id.textViewConfirmacaoNome).text = \"Nome: $nome\"\n        findViewById&lt;TextView&gt;(R.id.textViewConfirmacaoEmail).text = \"E-mail: $email\"\n        findViewById&lt;TextView&gt;(R.id.textViewConfirmacaoIdade).text = \"Idade: $idade anos\"\n    }\n}</code></pre>\n                </div>\n            </div>\n        </div>\n\n        <div id=\"tarefa-aula10\" class=\"mb-16\">\n            <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">Encerramento e Próximos Passos</h3>\n             <div class=\"callout callout-info\">\n                <h5 class=\"font-bold mb-2\">Tópico Avançado: Passando Objetos com <code>Parcelable</code></h5>\n                <p>Enviar vários \"extras\" funciona, mas quando temos muitos dados relacionados (como um objeto de `Usuário` com nome, email, idade, etc.), a prática profissional recomendada é agrupar esses dados em uma classe e fazê-la implementar a interface <code>Parcelable</code>. Isso permite que o objeto inteiro seja \"empacotado\", enviado com um único <code>putExtra()</code> e \"desempacotado\" na outra ponta. É um tópico mais avançado, mas você pode começar a explorá-lo na <a href=\"https://developer.android.com/reference/android/os/Parcelable\" target=\"_blank\" class=\"font-semibold underline\">documentação oficial</a>.</p>\n            </div>\n            <div class=\"callout callout-task\">\n                <h5 class=\"font-bold mb-2\">Tarefa para a próxima aula (TED)</h5>\n                <p class=\"mb-4\">O desafio é criar um app de cadastro, onde os dados inseridos são exibidos em uma segunda tela de confirmação utilizando <code>Intent.putExtra</code>.</p>\n                <ol class=\"list-decimal list-inside space-y-2\">\n                    <li>Siga a atividade prática para construir a aplicação de cadastro e confirmação.</li>\n                    <li>Adicione mais um campo de sua escolha (ex: \"Telefone\" do tipo texto, ou \"É estudante?\" do tipo CheckBox/booleano).</li>\n                    <li>Passe este dado extra para a tela de confirmação e exiba-o.</li>\n                    <li>Tire prints das duas telas do seu app funcionando e submeta no Moodle.</li>\n                </ol>\n            </div>\n            <div class=\"bg-white p-6 rounded-lg shadow-md mt-8\">\n                <h4 class=\"font-bold text-xl text-slate-800 mb-4\">Bibliografia Recomendada</h4>\n                <ul class=\"list-disc list-inside space-y-2\">\n                    <li>OLIVEIRA, Diego Bittencourt de et al. <strong>Desenvolvimento para Dispositivos Móveis</strong>. SAGAH, 2019. v. 1.</li>\n                    <li>LECHETA, Ricardo R. <strong>Google Android: Aprenda a criar aplicações para dispositivos móveis com o Android SDK</strong>. Novatec, 2015.</li>\n                </ul>\n            </div>\n        </div>\n    </section>\n"
    }
  ]
}

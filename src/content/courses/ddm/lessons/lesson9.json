{
  "id": "lesson9",
  "title": "Aula 9: Unidade II – Intents Explícitas e Navegação",
  "objective": "",
  "content": [
    {
      "type": "html",
      "html": "<!DOCTYPE html>\n<html lang=\"pt-BR\" class=\"scroll-smooth\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Aula 9: Intents Explícitas e Navegação entre Activities</title>\n  </head>\n  <body class=\"p-6 md:p-10\">\n    <section id=\"aula9\" class=\"max-w-7xl mx-auto\">\n      <header class=\"mb-12 border-b pb-8\">\n        <h2 class=\"text-4xl font-bold text-slate-900\">\n          Aula 9: Unidade II – Intents Explícitas e Navegação\n        </h2>\n        <p class=\"text-lg text-slate-600 mt-2\">\n          Compreender o conceito de Intent explícita, sua aplicação na navegação\n          e como enviar dados entre as telas de um app.\n        </p>\n      </header>\n\n      <div class=\"bg-white p-6 rounded-lg shadow-md mb-12\">\n        <h3 class=\"font-bold text-2xl text-slate-800 mb-4\">\n          Plano de Voo da Aula\n        </h3>\n        <ul class=\"list-disc list-inside space-y-2 text-slate-700\">\n          <li>\n            <strong>Contextualização:</strong> Por que aplicativos precisam de\n            mais de uma tela?\n          </li>\n          <li>\n            <strong>O Mensageiro do Android:</strong> Apresentando o conceito de\n            <code>Intent</code>.\n          </li>\n          <li>\n            <strong>Intents Explícitas:</strong> Navegando com um destino certo.\n          </li>\n          <li>\n            <strong>Atividade Prática (Parte 1):</strong> Criando e iniciando\n            uma segunda <code>Activity</code>.\n          </li>\n          <li>\n            <strong>Levando uma \"Encomenda\":</strong> Passando dados entre\n            Activities com <code>putExtra()</code>.\n          </li>\n          <li>\n            <strong>Recebendo a \"Encomenda\":</strong> Lendo os dados na\n            <code>Activity</code> de destino.\n          </li>\n          <li>\n            <strong>Atividade Prática (Parte 2):</strong> Implementando o fluxo\n            completo de dados.\n          </li>\n          <li>\n            <strong>Tarefa (TED):</strong> Consolidando o aprendizado com um app\n            de duas telas.\n          </li>\n        </ul>\n      </div>\n\n      <div id=\"contexto\" class=\"mb-16\">\n        <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n          Por que uma Tela Apenas Não é Suficiente?\n        </h3>\n        <div class=\"bg-white p-8 rounded-lg shadow-md\">\n          <p class=\"text-lg mb-4\">\n            Até agora, todos os nossos aplicativos tinham uma única tela. Mas\n            pense nos apps que você usa todos os dias: eles têm uma tela de\n            login, uma tela principal, uma tela de perfil, uma tela de\n            detalhes... um aplicativo é uma coleção de telas que trabalham\n            juntas para criar um <strong>fluxo de usuário</strong>.\n          </p>\n          <p>\n            Navegar entre essas telas é uma das tarefas mais fundamentais no\n            desenvolvimento Android. Para fazer isso, precisamos de um mecanismo\n            para que uma tela possa \"pedir\" ao sistema para abrir outra. É aqui\n            que entram as <strong>Intents</strong>.\n          </p>\n        </div>\n      </div>\n\n      <div id=\"intents\" class=\"mb-16\">\n        <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n          O que é uma <code>Intent</code>? O Mensageiro do Android\n        </h3>\n        <div class=\"bg-white p-8 rounded-lg shadow-md\">\n          <p class=\"text-lg mb-4\">\n            Uma <code>Intent</code> é, em sua essência, um\n            <strong>objeto de mensagem</strong> que um componente do Android\n            (como uma <code>Activity</code>) pode usar para solicitar uma ação\n            de outro componente.\n          </p>\n          <p>\n            <strong>Analogia:</strong> Pense em uma <code>Intent</code> como se\n            fosse uma carta. Você escreve a carta (cria o objeto\n            <code>Intent</code>), define o destinatário e o conteúdo, e entrega\n            ao \"correio\" (o sistema Android), que se encarrega de entregá-la ao\n            destino correto.\n          </p>\n          <p class=\"mt-4\">Existem dois tipos de Intents:</p>\n          <ul class=\"list-disc list-inside space-y-2 mt-2\">\n            <li>\n              <strong>Intents Explícitas:</strong> Você especifica exatamente\n              qual componente deve receber a mensagem (ex: \"Abra a\n              <code>DetalheActivity</code>\"). É como enviar uma carta para um\n              endereço completo e específico.\n              <strong>Este é o nosso foco hoje.</strong>\n            </li>\n            <li>\n              <strong>Intents Implícitas:</strong> Você descreve a ação que\n              deseja realizar (ex: \"Abra um mapa com esta localização\"), e o\n              sistema Android decide qual app instalado no dispositivo é o\n              melhor para lidar com essa ação. Veremos isso em aulas futuras.\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div id=\"atividade-pratica-aula9\" class=\"mb-16\">\n        <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n          Atividade Prática: Criando e Navegando entre Telas\n        </h3>\n        <div class=\"bg-white p-8 rounded-lg shadow-md space-y-8\">\n          <div>\n            <h4 class=\"font-bold text-2xl text-slate-800 mb-4\">\n              Passo 1: Criar a Segunda <code>Activity</code>\n            </h4>\n            <p class=\"mb-4\">\n              Primeiro, precisamos de uma tela de destino. Vamos criar uma nova\n              <code>Activity</code> chamada <code>DetalheActivity</code>.\n            </p>\n            <ol class=\"list-decimal list-inside space-y-2 my-4\">\n              <li>\n                No Android Studio, clique com o botão direito na pasta do seu\n                pacote (ex: <code>br.com.unichristus.ads.navegacao</code>).\n              </li>\n              <li>\n                Vá em <strong>New > Activity > Empty Views Activity</strong>.\n              </li>\n              <li>\n                Nomeie a nova Activity como <code>DetalheActivity</code> e\n                clique em \"Finish\".\n              </li>\n            </ol>\n            <img\n              src=\"https://placehold.co/800x450/e0e7ff/3730a3?text=Criando+uma+nova+Activity+no+Android+Studio\"\n              alt=\"Assistente de criação de Activity\"\n              class=\"mt-4 rounded-lg shadow-sm\"\n            />\n            <div class=\"callout callout-info\">\n              <h5 class=\"font-bold mb-2\">\n                O que o Android Studio Fez por Nós?\n              </h5>\n              <p>Ao criar a nova Activity, o Android Studio automaticamente:</p>\n              <ul class=\"list-disc list-inside mt-2\">\n                <li>Criou o arquivo Kotlin <code>DetalheActivity.kt</code>.</li>\n                <li>\n                  Criou o arquivo de layout <code>activity_detalhe.xml</code> na\n                  pasta <code>res/layout</code>.\n                </li>\n                <li>\n                  Registrou a nova <code>&lt;activity&gt;</code> no seu arquivo\n                  <code>AndroidManifest.xml</code>. Isso é obrigatório!\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <div>\n            <h4 class=\"font-bold text-2xl text-slate-800 mb-4\">\n              Passo 2: Iniciar a Nova Tela com uma Intent Explícita\n            </h4>\n            <p class=\"mb-4\">\n              Agora, vamos modificar a <code>MainActivity.kt</code> para que o\n              clique do botão inicie a nossa nova <code>DetalheActivity</code>.\n            </p>\n            <div class=\"code-block-wrapper\">\n              <button class=\"copy-button\">Copiar</button>\n              <div class=\"code-block\">\n                <h5 class=\"mono\">\n                  // Dentro do setOnClickListener na MainActivity.kt\n                </h5>\n                <pre><code>buttonSaudacao.setOnClickListener {\n    // 1. Criar a Intent explícita\n    // O primeiro parâmetro é o contexto (a tela atual, 'this')\n    // O segundo é a classe da Activity de destino\n    val intent = Intent(this, DetalheActivity::class.java)\n\n    // 2. Iniciar a nova Activity\n    startActivity(intent)\n}</code></pre>\n              </div>\n            </div>\n            <p class=\"mt-4\">\n              Execute o app. Agora, ao clicar no botão, a segunda tela (ainda em\n              branco) deverá aparecer!\n            </p>\n          </div>\n\n          <div>\n            <h4 class=\"font-bold text-2xl text-slate-800 mb-4\">\n              Passo 3: Passando Dados com <code>putExtra()</code>\n            </h4>\n            <p class=\"mb-4\">\n              Para enviar dados, usamos o método <code>putExtra()</code> na\n              nossa Intent. Ele funciona com um sistema de chave-valor.\n            </p>\n            <div class=\"code-block-wrapper\">\n              <button class=\"copy-button\">Copiar</button>\n              <div class=\"code-block\">\n                <h5 class=\"mono\">\n                  // Modificando o setOnClickListener na MainActivity.kt\n                </h5>\n                <pre><code>buttonSaudacao.setOnClickListener {\n    val nomeDigitado = editTextNome.text.toString()\n\n    val intent = Intent(this, DetalheActivity::class.java)\n    \n    // Adicionando um \"extra\" à nossa Intent\n    // O primeiro parâmetro é a CHAVE (um nome único para o dado)\n    // O segundo é o VALOR (o dado que queremos enviar)\n    intent.putExtra(\"CHAVE_NOME\", nomeDigitado)\n    \n    startActivity(intent)\n}</code></pre>\n              </div>\n            </div>\n            <div class=\"callout callout-info\">\n              <h5 class=\"font-bold mb-2\">\n                Boa Prática: Use Constantes para as Chaves\n              </h5>\n              <p>\n                Para evitar erros de digitação, é uma excelente prática declarar\n                as chaves das Intents como constantes. Veremos isso no código\n                final.\n              </p>\n            </div>\n          </div>\n\n          <div>\n            <h4 class=\"font-bold text-2xl text-slate-800 mb-4\">\n              Passo 4: Recebendo os Dados na <code>DetalheActivity</code>\n            </h4>\n            <p class=\"mb-4\">\n              Na tela de destino, precisamos de um <code>TextView</code> para\n              exibir a mensagem e do código Kotlin para receber e mostrar o\n              dado.\n            </p>\n            <p class=\"mb-2\">\n              <strong>No <code>activity_detalhe.xml</code>:</strong>\n            </p>\n            <div class=\"code-block-wrapper\">\n              <button class=\"copy-button\">Copiar</button>\n              <div class=\"code-block\">\n                <h5 class=\"mono\">\n                  &lt;-- Adicione este TextView em\n                  res/layout/activity_detalhe.xml --&gt;\n                </h5>\n                <pre><code>&lt;TextView\n    android:id=\"@+id/textViewMensagem\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:textSize=\"24sp\"\n    android:textStyle=\"bold\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\"\n    tools:text=\"Olá, Visitante!\" /&gt;</code></pre>\n              </div>\n            </div>\n\n            <p class=\"mt-6 mb-2\">\n              <strong>No <code>DetalheActivity.kt</code>:</strong>\n            </p>\n            <div class=\"code-block-wrapper\">\n              <button class=\"copy-button\">Copiar</button>\n              <div class=\"code-block\">\n                <h5 class=\"mono\">\n                  // Dentro do onCreate da DetalheActivity.kt\n                </h5>\n                <pre><code>override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_detalhe)\n\n    val textViewMensagem: TextView = findViewById(R.id.textViewMensagem)\n\n    // 1. Receber o dado da Intent usando a mesma chave\n    val nomeRecebido = intent.getStringExtra(\"CHAVE_NOME\")\n\n    // 2. Criar a mensagem final\n    val mensagem = \"Olá, $nomeRecebido!\"\n\n    // 3. Exibir a mensagem no TextView\n    textViewMensagem.text = mensagem\n}</code></pre>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div id=\"tarefa-aula9\" class=\"mb-16\">\n        <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n          Encerramento e Próximos Passos\n        </h3>\n        <div class=\"callout callout-task\">\n          <h5 class=\"font-bold mb-2\">Tarefa para a próxima aula (TED)</h5>\n          <p class=\"mb-4\">\n            O desafio é aplicar exatamente o que fizemos hoje: criar um\n            aplicativo funcional com duas telas que trocam informações.\n          </p>\n          <ol class=\"list-decimal list-inside space-y-2\">\n            <li>Crie um novo projeto Android.</li>\n            <li>\n              Na tela principal, adicione um <code>EditText</code> para o\n              usuário digitar uma informação e um <code>Button</code>.\n            </li>\n            <li>Crie uma segunda <code>Activity</code>.</li>\n            <li>\n              Implemente a lógica para que, ao clicar no botão, a informação do\n              <code>EditText</code> seja enviada e exibida na segunda tela.\n            </li>\n            <li>\n              Tire prints das duas telas do seu app em funcionamento e submeta\n              no Moodle.\n            </li>\n          </ol>\n        </div>\n        <div class=\"bg-white p-6 rounded-lg shadow-md mt-8\">\n          <h4 class=\"font-bold text-xl text-slate-800 mb-4\">\n            Bibliografia Recomendada\n          </h4>\n          <ul class=\"list-disc list-inside space-y-2\">\n            <li>\n              SIMAS, V. L. et al.\n              <strong\n                >Desenvolvimento para Dispositivos Móveis – Volume 2</strong\n              >. Grupo A, 2019.\n            </li>\n            <li>\n              LECHETA, Ricardo R.\n              <strong\n                >Google Android: Aprenda a criar aplicações para dispositivos\n                móveis com o Android SDK</strong\n              >. Novatec, 2015.\n            </li>\n            <li>\n              <a\n                href=\"https://developer.android.com/guide/components/intents-filters\"\n                target=\"_blank\"\n                class=\"text-indigo-600 hover:underline font-semibold\"\n                >Documentação Oficial sobre Intents</a\n              >.\n            </li>\n          </ul>\n        </div>\n      </div>\n    </section>\n  </body>\n</html>\n"
    }
  ]
}

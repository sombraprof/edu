import { readFileSync, writeFileSync } from 'fs';
import { join } from 'path';

const lessonPath = join('src', 'content', 'courses', 'algi', 'lessons');

const generators = {
  'lesson-01.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int clientes = rand() % 11 + 5;\n  int tempoPorCliente = rand() % 6 + 4;\n  int preparoInicial = rand() % 5 + 2;\n  int tempoTotal = preparoInicial + clientes * tempoPorCliente;\n\n  printf(\"Entrada sugerida (clientes tempo_por_cliente tempo_preparo_inicial):\\n\");\n  printf(\"%d %d %d\\n\", clientes, tempoPorCliente, preparoInicial);\n  printf(\"Saida esperada (tempo_total_minutos):\\n%d\\n\", tempoTotal);\n\n  return 0;\n}\n`,
  'lesson-02.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nconst char *resultado(int condicao) {\n  return condicao ? \"ENTRADA LIBERADA\" : \"ENTRADA NEGADA\";\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int idade = rand() % 11 + 14;\n  int autorizacao = rand() % 2;\n  int ingresso = rand() % 2;\n  int podeEntrar = ((idade >= 16) || autorizacao) && ingresso;\n\n  printf(\"Entrada (idade possui_autorizacao tem_ingresso):\\n%d %d %d\\n\", idade, autorizacao, ingresso);\n  printf(\"Saida esperada: %s\\n\", resultado(podeEntrar));\n\n  return 0;\n}\n`,
  'lesson-03.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int tempoDisponivel = rand() % 61 + 70;\n  int pesquisa = rand() % 31 + 20;\n  int prototipacao = rand() % 26 + 15;\n  const int revisao = 15;\n\n  int tempoTotal = pesquisa + prototipacao + revisao;\n  int cabeNaAgenda = tempoTotal <= tempoDisponivel;\n\n  printf(\"Entrada (tempo_disponivel pesquisa prototipacao):\\n%d %d %d\\n\", tempoDisponivel, pesquisa, prototipacao);\n  printf(\"Saidas esperadas:\\n- tempo_total_planejado = %d\\n- cabe_no_dia = %s\\n\", tempoTotal, cabeNaAgenda ? \"SIM\" : \"NAO\");\n\n  return 0;\n}\n`,
  'lesson-04.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  float temperaturaC = (float)(rand() % 3510) / 10.0f;\n  float temperaturaF = temperaturaC * 9.0f / 5.0f + 32.0f;\n  float temperaturaK = temperaturaC + 273.15f;\n\n  printf(\"Entrada (temperatura_celsius):\\n%.1f\\n\", temperaturaC);\n  printf(\"Saidas esperadas (fahrenheit kelvin):\\n%.2f %.2f\\n\", temperaturaF, temperaturaK);\n\n  return 0;\n}\n`,
  'lesson-05.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  float valorCompra = (float)(rand() % 4501 + 500) / 10.0f;\n  int clienteFrequente = rand() % 2;\n  int possuiCupom = rand() % 2;\n\n  float desconto = 0.0f;\n  if (valorCompra >= 300.0f) {\n    desconto += 0.10f;\n  }\n  if (clienteFrequente) {\n    desconto += 0.05f;\n  }\n  if (possuiCupom) {\n    desconto += 0.03f;\n  }\n  if (desconto > 0.20f) {\n    desconto = 0.20f;\n  }\n\n  float valorFinal = valorCompra * (1.0f - desconto);\n\n  printf(\"Entrada (valor_compra cliente_frequente possui_cupom):\\n%.2f %d %d\\n\", valorCompra, clienteFrequente, possuiCupom);\n  printf(\"Saidas esperadas:\\n- percentual_desconto = %.2f\\n- valor_final = %.2f\\n\", desconto * 100.0f, valorFinal);\n\n  return 0;\n}\n`,
  'lesson-06.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  float peso = (float)(rand() % 701 + 500) / 10.0f;\n  float altura = (float)(rand() % 36 + 150) / 100.0f;\n  const int idade = rand() % 43 + 18;\n\n  float imc = peso / (altura * altura);\n\n  printf(\"Entrada (peso altura idade):\\n%.1f %.2f %d\\n\", peso, altura, idade);\n  printf(\"Saida esperada (imc):\\n%.2f\\n\", imc);\n\n  return 0;\n}\n`,
  'lesson-07.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int a = rand() % 41 + 10;\n  int b = rand() % 21 + 5;\n  int c = rand() % 16 + 1;\n  int d = rand() % 9 + 2;\n\n  int expressao1 = a * b - c;\n  int expressao2 = (a + b) % d;\n  double expressao3 = (a * 1.0 + c) / d + b;\n\n  printf(\"Entrada (a b c d):\\n%d %d %d %d\\n\", a, b, c, d);\n  printf(\"Saidas esperadas:\\n- a*b-c = %d\\n- (a+b)%%d = %d\\n- (a+c)/d + b = %.2f\\n\", expressao1, expressao2, expressao3);\n\n  return 0;\n}\n`,
  'lesson-08.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  double salarioBase = (double)(rand() % 4001 + 1200);\n  double vendas = (double)(rand() % 8001 + 500);\n  double bonusPercentual = (double)(rand() % 11 + 5) / 100.0;\n\n  double comissao = vendas * bonusPercentual;\n  double salarioFinal = salarioBase + comissao;\n\n  printf(\"Entrada (salario_base vendas percentual_bonus):\\n%.2f %.2f %.2f\\n\", salarioBase, vendas, bonusPercentual * 100.0);\n  printf(\"Saidas esperadas:\\n- comissao = %.2f\\n- salario_final = %.2f\\n\", comissao, salarioFinal);\n\n  return 0;\n}\n`,
  'lesson-09.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int consumo = rand() % 251 + 150;\n  double tarifa = (double)(rand() % 51 + 30) / 100.0;\n  double bandeira = (double)(rand() % 6) / 10.0;\n\n  double valorConta = consumo * tarifa + bandeira * consumo;\n\n  printf(\"Entrada (kwh_consumidos tarifa_base bandeira_adicional):\\n%d %.2f %.2f\\n\", consumo, tarifa, bandeira);\n  printf(\"Saida esperada (valor_total):\\n%.2f\\n\", valorConta);\n\n  return 0;\n}\n`,
  'lesson-10.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nconst char *classificar(float media, int faltas) {\n  if (media >= 7.0f && faltas <= 10) {\n    return \"APROVADO\";\n  } else if (media >= 5.0f && faltas <= 15) {\n    return \"RECUPERACAO\";\n  }\n  return \"REPROVADO\";\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  float media = (float)(rand() % 401 + 300) / 100.0f;\n  int faltas = rand() % 21;\n\n  printf(\"Entrada (media faltas):\\n%.2f %d\\n\", media, faltas);\n  printf(\"Saida esperada: %s\\n\", classificar(media, faltas));\n\n  return 0;\n}\n`,
  'lesson-11.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nconst char *descricaoPlano(int codigo) {\n  switch (codigo) {\n    case 1: return \"Consulta medica\";\n    case 2: return \"Exame laboratorial\";\n    case 3: return \"Reavaliacao nutricional\";\n    case 4: return \"Vacina\";\n    default: return \"Opcao invalida\";\n  }\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n  int codigo = rand() % 6;\n\n  printf(\"Entrada (codigo_menu):\\n%d\\n\", codigo);\n  printf(\"Saida esperada: %s\\n\", descricaoPlano(codigo));\n\n  return 0;\n}\n`,
  'lesson-12.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nconst char *classificar(float temperatura, int tosse, int saturacao) {\n  if (temperatura >= 39.0f || saturacao < 92) {\n    return \"EMERGENCIA\";\n  } else if ((temperatura >= 37.8f && tosse) || saturacao < 95) {\n    return \"URGENCIA\";\n  } else if (temperatura >= 37.0f) {\n    return \"OBSERVACAO\";\n  }\n  return \"AMBULATORIO\";\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  float temperatura = (float)(rand() % 71 + 350) / 10.0f;\n  int tosse = rand() % 2;\n  int saturacao = rand() % 10 + 90;\n\n  printf(\"Entrada (temperatura tosse saturacao):\\n%.1f %d %d\\n\", temperatura, tosse, saturacao);\n  printf(\"Saida esperada: %s\\n\", classificar(temperatura, tosse, saturacao));\n\n  return 0;\n}\n`,
  'lesson-13.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nconst char *classificarCredito(int score, float renda, float divida) {\n  float comprometimento = divida / renda;\n\n  if (score >= 800 && comprometimento <= 0.2f) {\n    return \"LIMITE MAXIMO\";\n  } else if (score >= 650 && comprometimento <= 0.35f) {\n    return \"LIMITE MEDIO\";\n  } else if (score >= 500 && comprometimento <= 0.45f) {\n    return \"LIMITE BAIXO\";\n  }\n  return \"CREDITO NEGADO\";\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int score = rand() % 551 + 400;\n  float renda = (float)(rand() % 7001 + 2000);\n  float divida = (float)(rand() % 4001 + 200);\n\n  printf(\"Entrada (score renda divida):\\n%d %.2f %.2f\\n\", score, renda, divida);\n  printf(\"Saida esperada: %s\\n\", classificarCredito(score, renda, divida));\n\n  return 0;\n}\n`,
  'lesson-15.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nconst char *diagnosticar(float mediaProva, float mediaLista, int faltas) {\n  if (mediaProva >= 7.0f && mediaLista >= 6.0f && faltas <= 5) {\n    return \"MANTER ESTRATEGIA\";\n  } else if (mediaProva >= 5.0f && faltas <= 10) {\n    return \"FOCAR EM LISTAS\";\n  } else if (mediaLista >= 6.0f) {\n    return \"REVISAR PROVAS\";\n  }\n  return \"PLANO DE RECUPERACAO\";\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  float mediaProva = (float)(rand() % 401 + 300) / 100.0f;\n  float mediaLista = (float)(rand() % 401 + 300) / 100.0f;\n  int faltas = rand() % 16;\n\n  printf(\"Entrada (media_provas media_listas faltas):\\n%.2f %.2f %d\\n\", mediaProva, mediaLista, faltas);\n  printf(\"Saida esperada: %s\\n\", diagnosticar(mediaProva, mediaLista, faltas));\n\n  return 0;\n}\n`,
  'lesson-16.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nconst char *prioridade(int febre, int saturacao, int dor) {\n  if (febre >= 39 || saturacao < 92 || dor >= 9) {\n    return \"VERMELHO\";\n  } else if (febre >= 38 || saturacao < 95 || dor >= 7) {\n    return \"AMARELO\";\n  } else if (febre >= 37 || dor >= 5) {\n    return \"VERDE\";\n  }\n  return \"AZUL\";\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int febre = rand() % 5 + 36;\n  int saturacao = rand() % 11 + 90;\n  int dor = rand() % 11;\n\n  printf(\"Entrada (febre saturacao dor):\\n%d %d %d\\n\", febre, saturacao, dor);\n  printf(\"Saida esperada: %s\\n\", prioridade(febre, saturacao, dor));\n\n  return 0;\n}\n`,
  'lesson-18.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int inicio = rand() % 6 + 1;\n  int fim = inicio + (rand() % 6 + 4);\n\n  int soma = 0;\n  for (int i = inicio; i <= fim; ++i) {\n    soma += i * i;\n  }\n\n  printf(\"Entrada (inicio fim):\\n%d %d\\n\", inicio, fim);\n  printf(\"Saida esperada (soma_dos_quadrados):\\n%d\\n\", soma);\n\n  return 0;\n}\n`,
  'lesson-19.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint somaComFor(int limite) {\n  int acumulador = 0;\n  for (int i = 0; i <= limite; ++i) {\n    acumulador += i;\n  }\n  return acumulador;\n}\n\nint somaComWhile(int limite) {\n  int acumulador = 0;\n  int i = 0;\n  while (i <= limite) {\n    acumulador += i;\n    ++i;\n  }\n  return acumulador;\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int limite = rand() % 41 + 10;\n\n  printf(\"Entrada (limite):\\n%d\\n\", limite);\n  printf(\"Saidas esperadas:\\n- soma_com_for = %d\\n- soma_com_while = %d\\n\", somaComFor(limite), somaComWhile(limite));\n\n  return 0;\n}\n`,
  'lesson-20.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int tentativasMenu = rand() % 4 + 2;\n  int opcaoFinal = rand() % 3 + 1;\n\n  printf(\"Sequencia sugerida de entradas:\\n\");\n  for (int i = 0; i < tentativasMenu - 1; ++i) {\n    printf(\"0 \");\n  }\n  printf(\"%d\\n\", opcaoFinal);\n\n  printf(\"Saida esperada:\\n- O menu deve repetir %d vezes antes de aceitar a opcao %d.\\n\", tentativasMenu - 1, opcaoFinal);\n\n  return 0;\n}\n`,
  'lesson-21.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int linhas = rand() % 4 + 3;\n  int colunas = rand() % 4 + 3;\n\n  printf(\"Entrada (linhas colunas):\\n%d %d\\n\", linhas, colunas);\n  printf(\"Saida esperada (tabela de multiplicacao):\\n\");\n  for (int i = 1; i <= linhas; ++i) {\n    for (int j = 1; j <= colunas; ++j) {\n      printf(\"%3d \", i * j);\n    }\n    printf(\"\\n\");\n  }\n\n  return 0;\n}\n`,
  'lesson-22.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int colaboradores = rand() % 6 + 5;\n\n  printf(\"Entrada (quantidade_colaboradores):\\n%d\\n\", colaboradores);\n  printf(\"Saida esperada (relatorio de presenca):\\n\");\n\n  for (int i = 0; i < colaboradores; ++i) {\n    int horas = rand() % 49;\n    int entregas = rand() % 6;\n    const char *status;\n\n    if (horas >= 40 && entregas >= 3) {\n      status = \"EXCELENTE\";\n    } else if (horas >= 30 && entregas >= 2) {\n      status = \"ADEQUADO\";\n    } else if (horas >= 20) {\n      status = \"ATENCAO\";\n    } else {\n      status = \"CRITICO\";\n    }\n\n    printf(\"Colaborador %d -> horas=%d entregas=%d status=%s\\n\", i + 1, horas, entregas, status);\n  }\n\n  return 0;\n}\n`,
  'lesson-23.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\ntypedef struct {\n  int pressao;\n  int batimentos;\n  int febre;\n} Paciente;\n\nconst char *classificar(const Paciente *p) {\n  if (p->pressao < 90 || p->batimentos > 130 || p->febre >= 39) {\n    return \"PRIORIDADE IMEDIATA\";\n  } else if (p->pressao < 100 || p->batimentos > 110 || p->febre >= 38) {\n    return \"ATENDIMENTO RAPIDO\";\n  } else if (p->febre >= 37) {\n    return \"OBSERVACAO\";\n  }\n  return \"LIBERADO\";\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int quantidade = rand() % 4 + 3;\n  printf(\"Quantidade de pacientes: %d\\n\", quantidade);\n\n  for (int i = 0; i < quantidade; ++i) {\n    Paciente p = { rand() % 61 + 80, rand() % 71 + 70, rand() % 5 + 36 };\n    printf(\"Caso %d -> pressao=%d batimentos=%d febre=%d => %s\\n\", i + 1, p.pressao, p.batimentos, p.febre, classificar(&p));\n  }\n\n  return 0;\n}\n`,
  'lesson-24.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\ntypedef struct {\n  int atendidos;\n  int redirecionados;\n} Turno;\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  Turno turnos[3];\n  int totalAtendidos = 0;\n  int totalRedirecionados = 0;\n\n  for (int i = 0; i < 3; ++i) {\n    turnos[i].atendidos = rand() % 41 + 30;\n    turnos[i].redirecionados = rand() % 11;\n    totalAtendidos += turnos[i].atendidos;\n    totalRedirecionados += turnos[i].redirecionados;\n  }\n\n  printf(\"Relatorio consolidado de turnos:\\n\");\n  for (int i = 0; i < 3; ++i) {\n    printf(\"Turno %d -> atendidos=%d redirecionados=%d\\n\", i + 1, turnos[i].atendidos, turnos[i].redirecionados);\n  }\n  printf(\"Total atendidos: %d\\nTotal redirecionados: %d\\n\", totalAtendidos, totalRedirecionados);\n\n  return 0;\n}\n`,
  'lesson-25.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\ndouble calcularMedia(double valores[], int tamanho) {\n  double soma = 0.0;\n  for (int i = 0; i < tamanho; ++i) {\n    soma += valores[i];\n  }\n  return soma / tamanho;\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int quantidade = 5;\n  double notas[5];\n  for (int i = 0; i < quantidade; ++i) {\n    notas[i] = (double)(rand() % 401 + 300) / 100.0;\n  }\n\n  printf(\"Notas geradas:\\n\");\n  for (int i = 0; i < quantidade; ++i) {\n    printf(\"%.2f \", notas[i]);\n  }\n  printf(\"\\nSaida esperada (media): %.2f\\n\", calcularMedia(notas, quantidade));\n\n  return 0;\n}\n`,
  'lesson-26.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nvoid atualizarEstatisticas(int valor, int *menor, int *maior, int *soma) {\n  if (valor < *menor) {\n    *menor = valor;\n  }\n  if (valor > *maior) {\n    *maior = valor;\n  }\n  *soma += valor;\n}\n\ndouble calcularMedia(int soma, int quantidade) {\n  return (double)soma / quantidade;\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int leituras = rand() % 6 + 5;\n  int menor = 1000;\n  int maior = -1000;\n  int soma = 0;\n\n  printf(\"Leituras de batimentos:\\n\");\n  for (int i = 0; i < leituras; ++i) {\n    int valor = rand() % 61 + 80;\n    atualizarEstatisticas(valor, &menor, &maior, &soma);\n    printf(\"%d \", valor);\n  }\n  printf(\"\\nSaidas esperadas -> menor=%d maior=%d media=%.2f\\n\", menor, maior, calcularMedia(soma, leituras));\n\n  return 0;\n}\n`,
  'lesson-27.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\ndouble calcularIndiceOcupacao(int pacientes, int leitos) {\n  return (double)pacientes / leitos;\n}\n\nint emitirAlerta(double indice) {\n  if (indice >= 0.9) return 2;\n  if (indice >= 0.75) return 1;\n  return 0;\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int leitos = rand() % 21 + 30;\n  int pacientes = rand() % (leitos + 1);\n\n  double indice = calcularIndiceOcupacao(pacientes, leitos);\n  int alerta = emitirAlerta(indice);\n\n  printf(\"Entrada (pacientes leitos):\\n%d %d\\n\", pacientes, leitos);\n  printf(\"Saidas esperadas:\\n- indice_ocupacao = %.2f\\n- nivel_alerta = %d\\n\", indice, alerta);\n\n  return 0;\n}\n`,
  'lesson-28.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nvoid imprimirCaso(int id) {\n  double tempoResposta = (double)(rand() % 401 + 100) / 10.0;\n  int regressivo = rand() % 2;\n  int revisado = rand() % 2;\n  double meta = 24.0;\n\n  double atraso = tempoResposta - meta;\n  const char *status = (tempoResposta <= meta && revisado) ? \"OK\" : \"AJUSTAR\";\n\n  printf(\"Chamado %d -> tempo=%.1f regressivo=%d revisado=%d => atraso=%.1f status=%s\\n\",\n         id, tempoResposta, regressivo, revisado, atraso, status);\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n  int casos = rand() % 4 + 3;\n\n  for (int i = 1; i <= casos; ++i) {\n    imprimirCaso(i);\n  }\n\n  return 0;\n}\n`,
  'lesson-30.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int tamanho = rand() % 6 + 5;\n  int valores[16];\n  int soma = 0;\n\n  printf(\"Vetor gerado (%d elementos):\\n\", tamanho);\n  for (int i = 0; i < tamanho; ++i) {\n    valores[i] = rand() % 51 + 10;\n    soma += valores[i];\n    printf(\"%d \", valores[i]);\n  }\n  printf(\"\\nSaida esperada (media): %.2f\\n\", (double)soma / tamanho);\n\n  return 0;\n}\n`,
  'lesson-31.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int tamanho = 8;\n  double vetor[8];\n  double maior = -1e9;\n  double menor = 1e9;\n\n  printf(\"Vetor original:\\n\");\n  for (int i = 0; i < tamanho; ++i) {\n    vetor[i] = (double)(rand() % 401 + 100) / 10.0;\n    if (vetor[i] > maior) maior = vetor[i];\n    if (vetor[i] < menor) menor = vetor[i];\n    printf(\"%.1f \", vetor[i]);\n  }\n\n  printf(\"\\nSaida esperada (vetor normalizado 0-1):\\n\");\n  for (int i = 0; i < tamanho; ++i) {\n    double normalizado = (vetor[i] - menor) / (maior - menor);\n    printf(\"%.3f \", normalizado);\n  }\n  printf(\"\\n\");\n\n  return 0;\n}\n`,
  'lesson-32.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint buscaLinear(int vetor[], int tamanho, int alvo) {\n  for (int i = 0; i < tamanho; ++i) {\n    if (vetor[i] == alvo) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int tamanho = 12;\n  int vetor[12];\n\n  for (int i = 0; i < tamanho; ++i) {\n    vetor[i] = rand() % 90 + 10;\n  }\n\n  int alvo = vetor[rand() % tamanho];\n\n  printf(\"Vetor:\\n\");\n  for (int i = 0; i < tamanho; ++i) {\n    printf(\"%d \", vetor[i]);\n  }\n  printf(\"\\nEntrada alvo: %d\\n\", alvo);\n  printf(\"Saida esperada (indice): %d\\n\", buscaLinear(vetor, tamanho, alvo));\n\n  return 0;\n}\n`,
  'lesson-33.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int linhas = 3;\n  int colunas = 4;\n  int matriz[3][4];\n\n  printf(\"Matriz gerada:\\n\");\n  for (int i = 0; i < linhas; ++i) {\n    for (int j = 0; j < colunas; ++j) {\n      matriz[i][j] = rand() % 21 + 10;\n      printf(\"%3d \", matriz[i][j]);\n    }\n    printf(\"\\n\");\n  }\n\n  printf(\"Saida esperada (totais por coluna):\\n\");\n  for (int j = 0; j < colunas; ++j) {\n    int soma = 0;\n    for (int i = 0; i < linhas; ++i) {\n      soma += matriz[i][j];\n    }\n    printf(\"coluna %d -> %d\\n\", j + 1, soma);\n  }\n\n  return 0;\n}\n`,
  'lesson-34.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nvoid multiplicar(int A[2][2], int B[2][2], int C[2][2]) {\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 2; ++j) {\n      C[i][j] = 0;\n      for (int k = 0; k < 2; ++k) {\n        C[i][j] += A[i][k] * B[k][j];\n      }\n    }\n  }\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int A[2][2];\n  int B[2][2];\n  int C[2][2];\n\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 2; ++j) {\n      A[i][j] = rand() % 9 + 1;\n      B[i][j] = rand() % 9 + 1;\n    }\n  }\n\n  multiplicar(A, B, C);\n\n  printf(\"Matriz A:\\n%d %d\\n%d %d\\n\", A[0][0], A[0][1], A[1][0], A[1][1]);\n  printf(\"Matriz B:\\n%d %d\\n%d %d\\n\", B[0][0], B[0][1], B[1][0], B[1][1]);\n  printf(\"Saida esperada (A x B):\\n%d %d\\n%d %d\\n\", C[0][0], C[0][1], C[1][0], C[1][1]);\n\n  return 0;\n}\n`,
  'lesson-35.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\ntypedef struct {\n  int id;\n  char nome[16];\n  int idade;\n} Paciente;\n\nvoid gerarNome(char destino[], int id) {\n  snprintf(destino, 16, \"Paciente%02d\", id);\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  Paciente p;\n  p.id = rand() % 90 + 10;\n  gerarNome(p.nome, p.id);\n  p.idade = rand() % 60 + 18;\n\n  printf(\"Registro gerado:\\nID: %d\\nNome: %s\\nIdade: %d\\n\", p.id, p.nome, p.idade);\n  printf(\"Saida esperada: atualizar CRUD em memoria com esses campos.\\n\");\n\n  return 0;\n}\n`,
  'lesson-36.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\ntypedef struct {\n  int id;\n  int prioridade;\n  int tempoDeEspera;\n} Ficha;\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int quantidade = rand() % 5 + 4;\n  Ficha fila[10];\n\n  printf(\"Fila gerada:\\n\");\n  for (int i = 0; i < quantidade; ++i) {\n    fila[i].id = rand() % 900 + 100;\n    fila[i].prioridade = rand() % 5 + 1;\n    fila[i].tempoDeEspera = rand() % 41;\n    printf(\"Ficha %d -> id=%d prioridade=%d espera=%d\\n\", i + 1, fila[i].id, fila[i].prioridade, fila[i].tempoDeEspera);\n  }\n\n  printf(\"Objetivo: ordenar por prioridade e atualizar tempo de espera acumulado.\\n\");\n\n  return 0;\n}\n`,
  'lesson-37.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\ntypedef struct {\n  int id;\n  int pressao;\n  int ativo;\n} Paciente;\n\nint buscarPaciente(Paciente vetor[], int tamanho, int id) {\n  for (int i = 0; i < tamanho; ++i) {\n    if (vetor[i].id == id) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int tamanho = 6;\n  Paciente pacientes[6];\n\n  for (int i = 0; i < tamanho; ++i) {\n    pacientes[i].id = rand() % 900 + 100;\n    pacientes[i].pressao = rand() % 61 + 90;\n    pacientes[i].ativo = 1;\n  }\n\n  int alvo = pacientes[rand() % tamanho].id;\n\n  printf(\"Pacientes cadastrados:\\n\");\n  for (int i = 0; i < tamanho; ++i) {\n    printf(\"id=%d pressao=%d\\n\", pacientes[i].id, pacientes[i].pressao);\n  }\n\n  int posicao = buscarPaciente(pacientes, tamanho, alvo);\n\n  printf(\"\\nEntrada (id_busca): %d\\nSaida esperada: indice=%d nova_pressao=%d\\n\", alvo, posicao, pacientes[posicao].pressao + 5);\n  printf(\"Simule a atualizacao somando 5 mmHg ao registro encontrado.\\n\");\n\n  return 0;\n}\n`,
  'lesson-38.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nconst char *nomeTopico(int indice) {\n  switch (indice) {\n    case 0: return \"Sequencias\";\n    case 1: return \"Condicionais\";\n    case 2: return \"Repeticoes\";\n    case 3: return \"Funcoes\";\n    case 4: return \"Vetores\";\n    default: return \"Structs\";\n  }\n}\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  for (int i = 1; i <= 5; ++i) {\n    int topico = rand() % 6;\n    int dificuldade = rand() % 3 + 1;\n    printf(\"Pergunta %d -> tema=%s dificuldade=%d\\n\", i, nomeTopico(topico), dificuldade);\n  }\n\n  printf(\"Monte desafios combinando os topicos acima.\\n\");\n\n  return 0;\n}\n`,
  'lesson-40.json': `#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void) {\n  srand((unsigned)time(NULL));\n\n  int metas = 3;\n  const char *trilhas[] = {\"Estruturas de Dados\", \"Git Avancado\", \"Maratonas de Programacao\", \"Projetos Integradores\"};\n\n  printf(\"Sugestao de metas para o proximo semestre:\\n\");\n  for (int i = 0; i < metas; ++i) {\n    int indice = rand() % 4;\n    int horas = rand() % 21 + 10;\n    printf(\"- %s -> dedicar %d horas\\n\", trilhas[indice], horas);\n  }\n\n  printf(\"Use os dados para planejar a trilha de estudos com seu grupo.\\n\");\n\n  return 0;\n}\n`,
};

for (const [file, code] of Object.entries(generators)) {
  const filePath = join(lessonPath, file);
  const data = JSON.parse(readFileSync(filePath, 'utf8'));
  const block = data.content.find(
    (item) => item.title && item.title.includes('Gerador de casos de teste')
  );
  if (!block) {
    console.warn(`Bloco nao encontrado em ${file}`);
    continue;
  }
  block.title = 'Gerador de casos de teste (C)';
  block.content = [
    {
      type: 'code',
      language: 'c',
      code: code.trimEnd(),
    },
  ];
  writeFileSync(filePath, JSON.stringify(data, null, 2) + '\n');
}

{
  "id": "lesson6",
  "title": "Aula 6: Polimorfismo",
  "objective": "",
  "content": [
    {
      "type": "html",
      "html": "<!DOCTYPE html>\n<html lang=\"pt-BR\" class=\"scroll-smooth\">\n  <head>\n    <!-- Metadados Essenciais -->\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>LPOO - Aula 6: Aprofundando em Heran√ßa e Polimorfismo</title>\n    <meta\n      name=\"description\"\n      content=\"Aula 6 da disciplina de LPOO. Aprofunde-se em Heran√ßa com o modificador protected, sobrescrita de m√©todos (@Override) e o conceito fundamental de Polimorfismo em Java.\"\n    />\n    <meta name=\"author\" content=\"Prof. Tiago Guimar√£es Sombra\" />\n\n    <!-- Open Graph / Facebook -->\n    <meta property=\"og:type\" content=\"website\" />\n    <meta\n      property=\"og:title\"\n      content=\"LPOO - Aula 6: Aprofundando em Heran√ßa e Polimorfismo\"\n    />\n    <meta\n      property=\"og:description\"\n      content=\"Aprofunde-se em Heran√ßa com o modificador protected, sobrescrita de m√©todos (@Override) e o conceito fundamental de Polimorfismo em Java.\"\n    />\n    <meta\n      property=\"og:image\"\n      content=\"https://placehold.co/1200x630/4f46e5/ffffff?text=LPOO%0AAula%206\"\n    />\n\n    <!-- Twitter -->\n    <meta property=\"twitter:card\" content=\"summary_large_image\" />\n    <meta\n      property=\"twitter:title\"\n      content=\"LPOO - Aula 6: Aprofundando em Heran√ßa e Polimorfismo\"\n    />\n    <meta\n      property=\"twitter:description\"\n      content=\"Aprofunde-se em Heran√ßa com o modificador protected, sobrescrita de m√©todos (@Override) e o conceito fundamental de Polimorfismo em Java.\"\n    />\n    <meta\n      property=\"twitter:image\"\n      content=\"https://placehold.co/1200x630/4f46e5/ffffff?text=LPOO%0AAula%206\"\n    />\n\n    <!-- Tailwind CSS via CDN -->\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <!-- Google Fonts: Inter & Roboto Mono -->\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Roboto+Mono:wght@400;700&display=swap\"\n      rel=\"stylesheet\"\n    />\n    <!-- Font Awesome for icons -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\"\n      integrity=\"sha256-HtsXJanqjKTc8vVQjO4YMhiqFoXkfBsjBWcX91T1jr8=\" crossorigin=\"anonymous\"\n    />\n\n    <!-- Estilos locais removidos: usamos css/style.css global para callouts, code-block e copy-btn -->\n  </head>\n\n  <body class=\"text-slate-800\">\n    <nav\n      class=\"bg-white/80 backdrop-blur-md shadow-sm fixed top-0 left-0 right-0 z-50\"\n      aria-label=\"Menu de navega√ß√£o principal\"\n    >\n      <div class=\"container mx-auto px-6\">\n        <div class=\"flex justify-between items-center h-16\">\n          <span class=\"text-lg font-bold text-indigo-700\">LPOO - Aula 6</span>\n          <div class=\"hidden md:flex space-x-4 text-sm font-semibold\">\n            <a href=\"#plano-aula\" class=\"text-slate-600 hover:text-indigo-600\"\n              >Plano</a\n            >\n            <a href=\"#teoria\" class=\"text-slate-600 hover:text-indigo-600\"\n              >Teoria</a\n            >\n            <a href=\"#pratica\" class=\"text-slate-600 hover:text-indigo-600\"\n              >Pr√°tica</a\n            >\n            <a href=\"#ted\" class=\"text-slate-600 hover:text-indigo-600\">TED</a>\n            <a href=\"#bibliografia\" class=\"text-slate-600 hover:text-indigo-600\"\n              >Bibliografia</a\n            >\n          </div>\n        </div>\n      </div>\n    </nav>\n\n    <!-- Live region para leitores de tela (feedback do bot√£o Copiar) -->\n    <div class=\"sr-only\" aria-live=\"polite\" id=\"copy-live\"></div>\n\n    <header\n      class=\"bg-gradient-to-r from-indigo-700 to-indigo-900 text-white shadow-lg\"\n    >\n      <div class=\"container mx-auto px-6 py-10\">\n        <h1 class=\"text-4xl font-bold\">\n          Aprofundando em Heran√ßa e Polimorfismo\n        </h1>\n        <p class=\"text-xl text-indigo-200 mt-2\">\n          Aula 6: Unidade III - Conceitos pr√°ticos de OO e seus pilares\n        </p>\n      </div>\n    </header>\n\n    <main class=\"container mx-auto px-6 py-10\" role=\"main\">\n      <section\n        id=\"ementa\"\n        class=\"mb-12 bg-white p-8 rounded-lg shadow\"\n        aria-labelledby=\"ementa-heading\"\n      >\n        <h2\n          id=\"ementa-heading\"\n          class=\"text-3xl font-semibold text-slate-800 mb-6\"\n        >\n          Ementa e Contextualiza√ß√£o\n        </h2>\n        <p class=\"text-slate-700 leading-relaxed\">\n          Na aula anterior, introduzimos a Heran√ßa como um dos pilares da POO.\n          Agora, vamos aprofundar nosso entendimento, explorando como as\n          subclasses podem n√£o apenas herdar, mas tamb√©m\n          <strong>modificar</strong> comportamentos atrav√©s da\n          <strong>sobrescrita de m√©todos</strong>. Isso nos levar√° diretamente\n          ao conceito de <strong>Polimorfismo</strong>, talvez a caracter√≠stica\n          mais poderosa da POO. Polimorfismo nos permite escrever um c√≥digo mais\n          flex√≠vel, gen√©rico e extens√≠vel, tratando objetos de diferentes\n          classes de maneira uniforme. Dominar esses conceitos √© o que separa um\n          programador iniciante de um arquiteto de software capaz de criar\n          sistemas robustos e de f√°cil manuten√ß√£o.\n        </p>\n      </section>\n\n      <section\n        id=\"plano-aula\"\n        class=\"mb-12 bg-indigo-50 border border-indigo-200 p-8 rounded-2xl shadow-lg\"\n        aria-labelledby=\"plano-aula-heading\"\n      >\n        <h2\n          id=\"plano-aula-heading\"\n          class=\"text-3xl font-bold text-indigo-700 mb-6 text-center\"\n        >\n          Plano da Aula\n        </h2>\n        <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div class=\"bg-white p-6 rounded-lg shadow-sm\">\n            <h3 class=\"font-semibold text-lg text-indigo-800 mb-2\">\n              <i class=\"fa-solid fa-book-open mr-2\" aria-hidden=\"true\"></i\n              >CONTE√öDO\n            </h3>\n            <p class=\"text-slate-600\">\n              Modificador <code-text>protected</code-text>, Sobrescrita de M√©todos (<code-text>@Override</code-text>),\n              Polimorfismo, a classe <code-text>Object</code-text> e o m√©todo <code-text>toString()</code-text>.\n            </p>\n          </div>\n          <div class=\"bg-white p-6 rounded-lg shadow-sm\">\n            <h3 class=\"font-semibold text-lg text-indigo-800 mb-2\">\n              <i class=\"fa-solid fa-bullseye mr-2\" aria-hidden=\"true\"></i\n              >OBJETIVO\n            </h3>\n            <p class=\"text-slate-600\">\n              Capacitar o aluno a sobrescrever m√©todos, aplicar o polimorfismo\n              para criar um c√≥digo mais flex√≠vel e entender o papel da classe\n              <code-text>Object</code-text>.\n            </p>\n          </div>\n          <div class=\"bg-white p-6 rounded-lg shadow-sm\">\n            <h3 class=\"font-semibold text-lg text-indigo-800 mb-2\">\n              <i class=\"fa-solid fa-gears mr-2\" aria-hidden=\"true\"></i\n              >METODOLOGIA\n            </h3>\n            <p class=\"text-slate-600\">\n              Aula expositiva, exemplos comparativos de c√≥digo, e uma atividade\n              pr√°tica focada na aplica√ß√£o do polimorfismo.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <section id=\"teoria\" class=\"mb-12\" aria-labelledby=\"teoria-heading\">\n        <h2\n          id=\"teoria-heading\"\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-indigo-500 pb-2 mb-8\"\n        >\n          üöÄ Elevando o N√≠vel da Heran√ßa\n        </h2>\n\n        <div class=\"bg-white p-6 rounded-lg shadow mb-6\">\n          <h3 class=\"text-2xl font-semibold text-slate-800 mb-4\">\n            1. Visibilidade Protegida (<code-text>protected</code-text>)\n          </h3>\n          <p class=\"text-slate-700 leading-relaxed mb-4\">\n            At√© agora, usamos <code-text>private</code-text> para encapsulamento m√°ximo. Mas e se\n            quisermos que uma subclasse acesse diretamente um atributo da\n            superclasse, sem que ele seja p√∫blico para o resto do mundo? Para\n            isso, usamos o modificador <code-text>protected</code-text>.\n          </p>\n          <ul class=\"list-disc list-inside space-y-2 text-slate-700\">\n            <li>\n              <strong>private:</strong> Acess√≠vel apenas dentro da pr√≥pria\n              classe.\n            </li>\n            <li>\n              <strong>protected:</strong> Acess√≠vel dentro da pr√≥pria classe,\n              por classes no mesmo pacote e por subclasses (mesmo em pacotes\n              diferentes).\n            </li>\n            <li><strong>public:</strong> Acess√≠vel de qualquer lugar.</li>\n          </ul>\n\n          <div class=\"callout callout-info mt-6\">\n            <h4 class=\"font-bold mb-2\">Nuance importante de <code-text>protected</code-text></h4>\n            <p class=\"mb-2\">\n              Fora do mesmo pacote, o acesso <code-text>protected</code-text> s√≥ √© permitido em\n              <strong>subclasses</strong> e, ainda assim, via a <em>inst√¢ncia da subclasse</em>\n              (n√£o via refer√™ncia de <code-text>Base</code-text>).\n            </p>\n            <div class=\"code-block\">\n              <button class=\"copy-btn\" title=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo\">\n                <i class=\"fa-solid fa-copy mr-1\" aria-hidden=\"true\"></i>Copiar\n              </button>\n              <pre><code class=\"language-java\">\n// English comments for clarity\n// package base;\npublic class Base {\n    protected int x = 42;\n}\n\n// package outro;\npublic class SubB extends Base {\n    public void ok() {\n        // OK: access via subclass instance (even if package is different)\n        this.x = 10;\n    }\n\n    public void notOk() {\n        Base b = new Base();\n        // b.x; // ERROR: cannot access protected via superclass ref from another package\n    }\n}\n              </code></pre>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bg-white p-6 rounded-lg shadow mb-6\">\n          <h3 class=\"text-2xl font-semibold text-slate-800 mb-4\">\n            2. Sobrescrita de M√©todos (<code-text>@Override</code-text>)\n          </h3>\n          <p class=\"text-slate-700 leading-relaxed mb-4\">\n            Sobrescrever (ou anular) um m√©todo significa que uma subclasse\n            fornece uma implementa√ß√£o <strong>espec√≠fica</strong> para um m√©todo\n            que j√° √© fornecido por sua superclasse. A assinatura do m√©todo (nome\n            e par√¢metros) deve ser id√™ntica.\n          </p>\n          <div class=\"callout callout-practice\">\n            <h4 class=\"font-bold\">A anota√ß√£o <code-text>@Override</code-text></h4>\n            <p>\n              Embora opcional, √© uma boa pr√°tica usar a anota√ß√£o <code-text>@Override</code-text>\n              acima de um m√©todo sobrescrito. Se houver erro na assinatura,\n              o compilador alerta ‚Äî evitando bugs sutis.\n            </p>\n          </div>\n\n          <!-- Quadro comparativo Overloading x Overriding -->\n          <div class=\"grid md:grid-cols-2 gap-4 mt-6\">\n            <div class=\"bg-white p-4 rounded-lg shadow border border-slate-200\">\n              <h4 class=\"font-semibold text-indigo-800 mb-2\">\n                Overloading (compile-time)\n              </h4>\n              <ul class=\"list-disc list-inside text-slate-700 text-sm\">\n                <li>Mesmo nome; <strong>assinaturas diferentes</strong>.</li>\n                <li>Resolu√ß√£o em <strong>tempo de compila√ß√£o</strong>.</li>\n                <li>N√£o envolve heran√ßa, em geral.</li>\n              </ul>\n            </div>\n            <div class=\"bg-white p-4 rounded-lg shadow border border-slate-200\">\n              <h4 class=\"font-semibold text-indigo-800 mb-2\">\n                Overriding (runtime)\n              </h4>\n              <ul class=\"list-disc list-inside text-slate-700 text-sm\">\n                <li><strong>Mesma assinatura</strong> em subclasse.</li>\n                <li><strong>Binding din√¢mico</strong> em execu√ß√£o.</li>\n                <li>Permite polimorfismo real.</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bg-white p-6 rounded-lg shadow mb-6\">\n          <h3 class=\"text-2xl font-semibold text-slate-800 mb-4\">\n            3. Polimorfismo: M√∫ltiplas Formas\n          </h3>\n          <p class=\"text-slate-700 leading-relaxed mb-4\">\n            Polimorfismo significa \"muitas formas\". Em POO, √© a capacidade de um\n            objeto ser referenciado de m√∫ltiplas maneiras. A forma mais comum √©\n            usar uma vari√°vel de refer√™ncia do tipo da\n            <strong>superclasse</strong> para apontar para um objeto da\n            <strong>subclasse</strong>.\n          </p>\n          <div class=\"code-block\">\n            <button class=\"copy-btn\" title=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo de exemplo de polimorfismo\">\n              <i class=\"fa-solid fa-copy mr-1\" aria-hidden=\"true\"></i>Copiar\n            </button>\n            <pre><code class=\"language-java\">\n// English comment: Upcasting allows superclass reference to point to subclass object\nFuncionario f = new Gerente(\"Ana\", 8000.0, 1500.0);\n            </code></pre>\n          </div>\n          <p class=\"text-slate-700 leading-relaxed mt-4\">\n            A \"m√°gica\" acontece quando chamamos um m√©todo sobrescrito a partir\n            dessa refer√™ncia. O Java, em tempo de execu√ß√£o, sabe qual √© o tipo\n            <strong>real</strong> do objeto (<code-text>Gerente</code-text>) e chama a vers√£o correta.\n          </p>\n\n          <!-- instanceof pattern matching -->\n          <div class=\"callout callout-info mt-6\">\n            <h4 class=\"font-bold\">Downcasting seguro com <code-text>instanceof</code-text> (pattern matching)</h4>\n            <div class=\"code-block\">\n              <button class=\"copy-btn\" title=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo\">\n                <i class=\"fa-solid fa-copy mr-1\" aria-hidden=\"true\"></i>Copiar\n              </button>\n              <pre><code class=\"language-java\">\n// English comments: Pattern matching for instanceof (Java 16+)\nFuncionario ref = new Gerente(\"Maria\", 5000.0);\nif (ref instanceof Gerente gerente) { // auto-cast bound to variable\n    System.out.println(\"B√¥nus especial: \" + gerente.getBonificacao());\n}\n              </code></pre>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bg-white p-6 rounded-lg shadow mb-6\">\n          <h3 class=\"text-2xl font-semibold text-slate-800 mb-4\">\n            4. A Classe <code-text>Object</code-text>: A M√£e de Todas\n          </h3>\n          <p class=\"text-slate-700 leading-relaxed mb-4\">\n            Em Java, toda classe herda implicitamente de <code-text>Object</code-text>. Isso garante\n            m√©todos como <code-text>equals()</code-text>, <code-text>hashCode()</code-text> e <code-text>toString()</code-text>.\n          </p>\n          <p class=\"text-slate-700 leading-relaxed\">\n            √â uma √≥tima pr√°tica sobrescrever <code-text>toString()</code-text> para\n            representa√ß√µes textuais √∫teis.\n          </p>\n\n          <div class=\"callout callout-warning mt-6\">\n            <h4 class=\"font-bold\">Contrato <code-text>equals()</code-text> / <code-text>hashCode()</code-text></h4>\n            <p>\n              Ao sobrescrever <code-text>equals()</code-text>, <strong>tamb√©m</strong> sobrescreva\n              <code-text>hashCode()</code-text> de forma consistente (coer√™ncia em cole√ß√µes como\n              <code-text>HashSet</code-text>/<code-text>HashMap</code-text>).\n            </p>\n          </div>\n\n          <div class=\"callout callout-challenge mt-4\">\n            <h4 class=\"font-bold\">Prefira composi√ß√£o a heran√ßa</h4>\n            <p>\n              Use heran√ßa quando respeitar o princ√≠pio de substitui√ß√£o de Liskov (LSP)\n              e houver uma rela√ß√£o \"√©-um\". Em muitos casos, composi√ß√£o oferece\n              <em>acoplamento menor</em> e <em>maior reuso</em>.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <section id=\"pratica\" class=\"mb-12\" aria-labelledby=\"pratica-heading\">\n        <h2\n          id=\"pratica-heading\"\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-indigo-500 pb-2 mb-8\"\n        >\n          üíª Praticando Polimorfismo\n        </h2>\n        <p class=\"mb-4\">\n          Vamos evoluir nosso exemplo <code-text>Funcionario</code-text>/<code-text>Gerente</code-text>. Adicionaremos um\n          <code-text>Programador</code-text> e usaremos polimorfismo para calcular uma folha de\n          pagamento.\n        </p>\n\n        <div class=\"code-block\">\n          <button\n            class=\"copy-btn\"\n            title=\"Copiar c√≥digo\"\n            aria-label=\"Copiar c√≥digo de exemplo de polimorfismo\"\n          >\n            <i class=\"fa-solid fa-copy mr-1\" aria-hidden=\"true\"></i>Copiar\n          </button>\n          <pre><code class=\"language-java\">\n// Superclass Funcionario (educational example)\npublic class Funcionario {\n    protected String nome;   // For teaching purposes; in production prefer private + getters\n    protected double salario;\n\n    public Funcionario(String nome, double salario) {\n        this.nome = nome;\n        this.salario = salario;\n    }\n\n    // A general bonus calculation\n    public double getBonificacao() {\n        return this.salario * 0.05; // 5% bonus for a regular employee\n    }\n    \n    @Override\n    public String toString() {\n        return \"Funcionario [Nome=\" + this.nome + \", Sal√°rio=\" + this.salario + \"]\";\n    }\n}\n\n// Subclass Gerente\npublic class Gerente extends Funcionario {\n    public Gerente(String nome, double salario) {\n        super(nome, salario);\n    }\n\n    @Override // Overriding the method for a specific implementation\n    public double getBonificacao() {\n        return super.getBonificacao() + 1000.0; // 5% + a fixed bonus of 1000\n    }\n}\n\n// Subclass Programador\npublic class Programador extends Funcionario {\n     public Programador(String nome, double salario) {\n        super(nome, salario);\n    }\n    \n    @Override // Specific bonus for programmers\n    public double getBonificacao() {\n        return this.salario * 0.15; // 15% bonus for programmers\n    }\n}\n\n// Test Class\nimport java.util.List;\n\npublic class ControleBonificacao {\n    public static void main(String[] args) {\n        // Polymorphism in action: Superclass reference for subclass objects\n        Funcionario f1 = new Funcionario(\"Jo√£o\", 2000.0);\n        Funcionario g1 = new Gerente(\"Maria\", 5000.0);\n        Funcionario p1 = new Programador(\"Pedro\", 3500.0);\n\n        System.out.println(\"B√¥nus do Funcion√°rio: \" + f1.getBonificacao()); // Calls Funcionario's method\n        System.out.println(\"B√¥nus do Gerente: \" + g1.getBonificacao());     // Calls Gerente's method\n        System.out.println(\"B√¥nus do Programador: \" + p1.getBonificacao()); // Calls Programador's method\n        \n        System.out.println(f1); // Prints the result of the overridden toString() method\n        System.out.println(g1);\n\n        // Optional: polymorphic collections\n        List<Funcionario> funcionarios = List.of(f1, g1, p1);\n        double total = 0;\n        for (Funcionario f : funcionarios) {\n            total += f.getBonificacao(); // runtime dispatch\n        }\n        System.out.println(\"Total de bonifica√ß√µes: \" + total);\n    }\n}\n            </code></pre>\n        </div>\n\n        <p class=\"text-xs text-slate-500 mt-2\">\n          Nota: para valores monet√°rios em produ√ß√£o, prefira <code-text>BigDecimal</code-text>.\n        </p>\n      </section>\n\n      <!-- Se√ß√£o atualizada com v√≠deo DevDojo e links modernos -->\n      <section\n        id=\"recursos-auxiliares\"\n        class=\"mb-12\"\n        aria-labelledby=\"recursos-heading\"\n      >\n        <h2\n          id=\"recursos-heading\"\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-indigo-500 pb-2 mb-8\"\n        >\n          üé• V√≠deos e Links de Apoio\n        </h2>\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          <div class=\"space-y-6\">\n            <div class=\"bg-white p-4 rounded-lg shadow\">\n              <h3 class=\"font-semibold text-lg text-indigo-800 mb-2\">\n                Polimorfismo em Java (DevDojo)\n              </h3>\n              <div class=\"aspect-video w-full\">\n                <!-- English comment: Correct DevDojo embed; lazy load; strict referrer; descriptive title -->\n                <iframe\n                  class=\"w-full h-full rounded-md\"\n                  src=\"https://www.youtube.com/embed/Ps2ptq1twyA\"\n                  title=\"DevDojo ‚Äî Curso Java Completo: Polimorfismo (parte 01)\"\n                  frameborder=\"0\"\n                  loading=\"lazy\"\n                  referrerpolicy=\"strict-origin-when-cross-origin\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                  allowfullscreen\n                ></iframe>\n              </div>\n              <p class=\"text-sm text-slate-600 mt-2\">\n                Aula introdut√≥ria e direta ao ponto sobre polimorfismo, com exemplos pr√°ticos.\n              </p>\n            </div>\n          </div>\n          <div class=\"bg-white p-6 rounded-lg shadow\">\n            <h3 class=\"font-semibold text-lg text-indigo-800 mb-4\">\n              Leituras Recomendadas\n            </h3>\n            <ul class=\"space-y-4\">\n              <li>\n                <a\n                  href=\"https://dev.java/learn/inheritance/polymorphism/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  class=\"block font-semibold text-indigo-600 hover:underline\"\n                >\n                  <i class=\"fa-solid fa-book-bookmark mr-2\"></i>Polymorphism (dev.java/Oracle)\n                </a>\n                <p class=\"text-sm text-slate-600\">\n                  Explica√ß√£o concisa de polimorfismo com exemplos e rela√ß√£o com heran√ßa.\n                </p>\n              </li>\n              <li>\n                <a\n                  href=\"https://dev.java/learn/inheritance/overriding/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  class=\"block font-semibold text-indigo-600 hover:underline\"\n                >\n                  <i class=\"fa-solid fa-file-alt mr-2\"></i>Overriding and Hiding Methods (dev.java)\n                </a>\n                <p class=\"text-sm text-slate-600\">\n                  Refor√ßa regras de sobrescrita, assinatura id√™ntica e retorno covariante.\n                </p>\n              </li>\n              <li>\n                <a\n                  href=\"https://dev.java/learn/inheritance/objects/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  class=\"block font-semibold text-indigo-600 hover:underline\"\n                >\n                  <i class=\"fa-solid fa-layer-group mr-2\"></i>Object as a Superclass (dev.java)\n                </a>\n                <p class=\"text-sm text-slate-600\">\n                  Papel da classe <code-text>Object</code-text> e quando sobrescrever <code-text>toString()</code-text>, <code-text>equals()</code-text> e <code-text>hashCode()</code-text>.\n                </p>\n              </li>\n              <li>\n                <a\n                  href=\"https://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  class=\"block font-semibold text-indigo-600 hover:underline\"\n                >\n                  <i class=\"fa-solid fa-book mr-2\"></i>Polymorphism (The Java‚Ñ¢ Tutorials ‚Äî JDK 8)\n                </a>\n                <p class=\"text-sm text-slate-600\">\n                  Material cl√°ssico (arquivado) ‚Äî bom como refer√™ncia complementar.\n                </p>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </section>\n\n      <section\n        id=\"ted\"\n        class=\"mb-12 bg-amber-50 border border-amber-300 p-8 rounded-lg shadow-lg\"\n        aria-labelledby=\"ted-heading\"\n      >\n        <h2 id=\"ted-heading\" class=\"text-3xl font-bold text-amber-800 mb-6\">\n          <i class=\"fa-solid fa-laptop-code mr-2\" aria-hidden=\"true\"></i\n          >Atividade Pr√°tica (TED): Figuras Geom√©tricas\n        </h2>\n        <p class=\"text-amber-900 leading-relaxed mb-4\">\n          Vamos aplicar a heran√ßa e o polimorfismo para calcular a √°rea de\n          diferentes formas geom√©tricas.\n        </p>\n        <ol class=\"list-decimal list-inside space-y-4 text-amber-900\">\n          <li>\n            <strong>Crie a superclasse abstrata <code-text>FormaGeometrica.java</code-text></strong>. \n            Ela deve declarar o m√©todo <code-text>public abstract double calcularArea()</code-text>.\n          </li>\n          <li>\n            <strong>Crie a subclasse <code-text>Retangulo.java</code-text></strong> que herda de\n            <code-text>FormaGeometrica</code-text>. Adicione os atributos <code-text>largura</code-text> e <code-text>altura</code-text>.\n            Implemente <code-text>calcularArea()</code-text> retornando <code-text>largura * altura</code-text>.\n          </li>\n          <li>\n            <strong>Crie a subclasse <code-text>Circulo.java</code-text></strong> que herda de\n            <code-text>FormaGeometrica</code-text>. Adicione o atributo <code-text>raio</code-text>. Implemente \n            <code-text>calcularArea()</code-text> retornando <code-text>Math.PI * raio * raio</code-text>.\n          </li>\n          <li>\n            <strong>Crie a classe <code-text>TesteFormas.java</code-text></strong> com um m√©todo\n            <code-text>main</code-text>. Crie uma cole√ß√£o (<code-text>List&lt;FormaGeometrica&gt;</code-text>) com inst√¢ncias\n            de <code-text>Retangulo</code-text> e <code-text>Circulo</code-text>. Percorra e imprima a √°rea de cada forma, \n            observando o polimorfismo em a√ß√£o (binding din√¢mico).\n          </li>\n        </ol>\n\n        <!-- Snippet sugerido para TED -->\n        <div class=\"code-block mt-6\">\n          <button class=\"copy-btn\" title=\"Copiar c√≥digo\" aria-label=\"Copiar c√≥digo\">\n            <i class=\"fa-solid fa-copy mr-1\" aria-hidden=\"true\"></i>Copiar\n          </button>\n          <pre><code class=\"language-java\">\n// English comments: Abstract base class to enforce area calculation\npublic abstract class FormaGeometrica {\n    public abstract double calcularArea();\n\n    @Override\n    public String toString() {\n        return getClass().getSimpleName();\n    }\n}\n\npublic class Retangulo extends FormaGeometrica {\n    private final double largura;\n    private final double altura;\n\n    public Retangulo(double largura, double altura) {\n        this.largura = largura;\n        this.altura = altura;\n    }\n\n    @Override\n    public double calcularArea() {\n        return largura * altura;\n    }\n}\n\npublic class Circulo extends FormaGeometrica {\n    private final double raio;\n\n    public Circulo(double raio) {\n        this.raio = raio;\n    }\n\n    @Override\n    public double calcularArea() {\n        return Math.PI * raio * raio;\n    }\n}\n\nimport java.util.List;\n\npublic class TesteFormas {\n    public static void main(String[] args) {\n        List<FormaGeometrica> formas = List.of(\n            new Retangulo(3, 4),\n            new Circulo(2.5)\n        );\n\n        for (FormaGeometrica f : formas) {\n            System.out.printf(\"%s -> √°rea = %.2f%n\", f, f.calcularArea());\n        }\n    }\n}\n          </code></pre>\n        </div>\n      </section>\n\n      <section id=\"checklist\" class=\"mt-12\" aria-labelledby=\"checklist-heading\">\n        <div\n          class=\"bg-green-50 border-l-4 border-green-500 text-green-800 p-6 rounded-lg shadow\"\n        >\n          <h3 id=\"checklist-heading\" class=\"font-bold text-lg mb-3\">\n            <i class=\"fa-solid fa-list-check mr-2\" aria-hidden=\"true\"></i\n            >Checklist de Aprendizagem da Aula\n          </h3>\n          <p>Ao final desta aula, voc√™ deve ser capaz de:</p>\n          <ul class=\"list-none space-y-2 mt-2\">\n            <li>\n              <i\n                class=\"fa-solid fa-check text-green-600 mr-2\"\n                aria-hidden=\"true\"\n              ></i\n              >Explicar a diferen√ßa de visibilidade entre <code-text>private</code-text> e\n              <code-text>protected</code-text>.\n            </li>\n            <li>\n              <i\n                class=\"fa-solid fa-check text-green-600 mr-2\"\n                aria-hidden=\"true\"\n              ></i\n              >Sobrescrever um m√©todo de uma superclasse usando a anota√ß√£o\n              <code-text>@Override</code-text>.\n            </li>\n            <li>\n              <i\n                class=\"fa-solid fa-check text-green-600 mr-2\"\n                aria-hidden=\"true\"\n              ></i\n              >Definir Polimorfismo e demonstrar seu uso com uma refer√™ncia de\n              superclasse para um objeto de subclasse.\n            </li>\n            <li>\n              <i\n                class=\"fa-solid fa-check text-green-600 mr-2\"\n                aria-hidden=\"true\"\n              ></i\n              >Sobrescrever o m√©todo <code-text>toString()</code-text> da classe <code-text>Object</code-text> para\n              fornecer uma representa√ß√£o textual √∫til de um objeto.\n            </li>\n          </ul>\n        </div>\n      </section>\n\n      <section\n        id=\"bibliografia\"\n        class=\"prose prose-slate max-w-none lg:prose-lg mt-12\"\n        aria-labelledby=\"bibliografia-heading\"\n      >\n        <h2\n          id=\"bibliografia-heading\"\n          class=\"text-3xl font-semibold text-slate-800 border-b-2 border-indigo-500 pb-2 mb-4\"\n        >\n          üìö Bibliografia de Apoio\n        </h2>\n        <div class=\"bg-white p-8 rounded-lg shadow space-y-4 not-prose\">\n          <p>\n            <strong>DEITEL, Harvey M.; DEITEL, Paul J.</strong>\n            <em>Java: como programar.</em> 8. ed. S√£o Paulo: Pearson Prentice\n            Hall, 2014.\n          </p>\n          <p>\n            <strong>SCHILDT, Herbert.</strong>\n            <em\n              >Java para iniciantes: crie, compile e execute programas Java\n              rapidamente.</em\n            >\n            6. ed. Porto Alegre: Bookman, 2015.\n          </p>\n          <p>\n            <strong>GOODRICH, Michael T.; TAMASSIA, Roberto.</strong>\n            <em>Estruturas de dados e algoritmos em Java.</em> 5. ed. Porto\n            Alegre: Bookman, 2013.\n          </p>\n        </div>\n      </section>\n    </main>\n\n    <footer class=\"bg-slate-800 text-slate-300 mt-12\" role=\"contentinfo\">\n      <div class=\"container mx-auto px-6 py-8 text-center\">\n        <p class=\"font-semibold text-white\">Prof. Tiago Guimar√£es Sombra</p>\n        <p class=\"text-sm mt-1\">\n          Material acad√™mico para os cursos de ADS e SI.\n        </p>\n        <p class=\"text-sm font-bold text-indigo-300\">Unifametro</p>\n        <div class=\"mt-4 flex justify-center items-center space-x-4\">\n          <a\n            href=\"https://github.com/sombraprof/lpoo\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            class=\"text-indigo-400 hover:text-white transition-colors\"\n            aria-label=\"Visitar o reposit√≥rio do projeto no GitHub\"\n          >\n            <i class=\"fab fa-github fa-lg mr-1\" aria-hidden=\"true\"></i>\n            Reposit√≥rio GitHub\n          </a>\n          <span class=\"text-slate-500\">|</span>\n          <a\n            href=\"#\"\n            class=\"text-indigo-400 hover:text-white transition-colors\"\n            aria-label=\"Ver a pol√≠tica de uso do material\"\n            >Pol√≠tica de Uso</a\n          >\n        </div>\n      </div>\n    </footer>\n  </body>\n</html>\n"
    }
  ]
}
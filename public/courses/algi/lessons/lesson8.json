{
  "id": "lesson8",
  "title": "Leitura M√∫ltipla, C√°lculos Encadeados e printf Formatado",
  "objective": "Consolidando o fluxo sequencial: Entrada ‚Üí Processamento ‚Üí Sa√≠da",
  "content": [
    {
      "type": "lessonPlan",
      "title": "Plano da Aula",
      "cards": [
        {
          "icon": "book-open",
          "title": "CONTE√öDO",
          "content": "Algoritmos sequenciais em C, m√∫ltiplas leituras com <code class=\"inline-code\">scanf</code>, c√°lculos com vari√°veis intermedi√°rias e formata√ß√£o avan√ßada de sa√≠da com <code class=\"inline-code\">printf</code>."
        },
        {
          "icon": "bullseye",
          "title": "OBJETIVO",
          "content": "Construir programas que realizem m√∫ltiplas leituras e c√°lculos combinados, exibindo resultados claros e formatados, consolidando o fluxo Entrada ‚Üí Processamento ‚Üí Sa√≠da."
        },
        {
          "icon": "gears",
          "title": "METODOLOGIA",
          "content": "Aula expositiva dialogada com exemplos pr√°ticos, seguida de atividade colaborativa em duplas para a cria√ß√£o de um recibo formatado."
        }
      ]
    },
    {
      "type": "flightPlan",
      "title": "Plano de Voo da Aula de Hoje",
      "items": [
        "Aquecimento: Resolvendo um problema de descontos sucessivos.",
        "Dominando o <code class=\"inline-code\">scanf</code> para m√∫ltiplas entradas de dados.",
        "A import√¢ncia de vari√°veis intermedi√°rias para c√°lculos claros.",
        "Explorando as m√°scaras do <code class=\"inline-code\">printf</code> para sa√≠das profissionais.",
        "Pr√°tica guiada em duplas: constru√ß√£o de um recibo de compras.",
        "Apresenta√ß√£o da tarefa (TED) da Aula 8."
      ]
    },
    {
      "type": "contentBlock",
      "title": "Fluxo Sequencial e M√∫ltiplas Leituras com <code class=\"inline-code\">scanf</code>",
      "content": [
        {
          "type": "paragraph",
          "text": "At√© agora, foc√°mos em ler um ou dois valores. No mundo real, os programas precisam de lidar com m√∫ltiplas entradas de dados. A fun√ß√£o <code class=\"inline-code\">scanf</code> √© poderosa e permite-nos ler v√°rios valores de uma s√≥ vez, consolidando a etapa de <strong>Entrada</strong> do nosso fluxo."
        },
        {
          "type": "code",
          "language": "c",
          "code": "// Read two prices in a single line\nfloat p1, p2;\nprintf(\"Digite o pre√ßo de dois produtos (ex: 10.50 8.75): \");\nscanf(\"%f %f\", &p1, &p2); // Make sure to pass addresses (&)\n"
        },
        {
          "type": "callout",
          "variant": "warning",
          "title": "Aten√ß√£o com <code class=\"inline-code\">scanf</code>!",
          "content": "<ul class=\"list-disc list-inside space-y-2\"><li><strong>O \"Enter\" Fantasma:</strong> Ap√≥s ler um n√∫mero, a tecla \"Enter\" (<code class=\"inline-code\">\\n</code>) que voc√™ pressiona fica no \"buffer\" de entrada. Se a pr√≥xima leitura for de um caractere (<code class=\"inline-code\">%c</code>), ela pode ler esse \"Enter\" em vez do que voc√™ quer. Uma forma de resolver √© adicionar um espa√ßo antes do <code class=\"inline-code\">%c</code>: <code class=\"inline-code\">scanf(\" %c\", &variavel);</code>.</li><li><strong>Tipos Corretos:</strong> Usar <code class=\"inline-code\">%d</code> para ler um <code class=\"inline-code\">float</code> (ou vice-versa) pode causar erros imprevis√≠veis. Verifique sempre se o especificador de formato corresponde ao tipo da vari√°vel.</li><li><strong>O <code class=\"inline-code\">&</code> √© Obrigat√≥rio:</strong> Esquecer o <code class=\"inline-code\">&</code> antes do nome da vari√°vel em <code class=\"inline-code\">scanf</code> √© um dos erros mais comuns. Lembre-se que <code class=\"inline-code\">scanf</code> precisa saber o <strong>endere√ßo</strong> da \"caixa\" onde vai guardar o valor.</li></ul>"
        }
      ]
    },
    {
      "type": "contentBlock",
      "title": "C√°lculos Encadeados e Vari√°veis Intermedi√°rias",
      "content": [
        {
          "type": "paragraph",
          "text": "Para problemas mais complexos, raramente chegamos ao resultado final num √∫nico passo. A etapa de <strong>Processamento</strong> muitas vezes envolve c√°lculos sequenciais, onde o resultado de uma opera√ß√£o serve de entrada para a pr√≥xima. Usar <strong>vari√°veis intermedi√°rias</strong> para guardar estes resultados torna o c√≥digo mais leg√≠vel e f√°cil de depurar."
        },
        {
          "type": "subBlock",
          "title": "Exemplo: Descontos Sucessivos",
          "items": [
            "<p>Um desconto de 10% seguido por um de 5% n√£o √© o mesmo que um desconto de 15%. A ordem importa, e o segundo desconto aplica-se sobre o novo valor.</p>"
          ]
        },
        {
          "type": "code",
          "language": "c",
          "code": "// Apply 10% then 5% sequential discounts\nfloat price = 100.0f;\nfloat afterFirst, finalPrice;\n\nafterFirst = price * 0.90f;          // First 10% discount (price becomes 90.00)\nfinalPrice = afterFirst * 0.95f;     // Then 5% discount over the new base (90.00 * 0.95)\n\nprintf(\"Final price: R$ %.2f\\n\", finalPrice); // Prints R$ 85.50\n"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "good-practice",
      "title": "Boas Pr√°ticas de <code class=\"inline-code\">printf</code>",
      "content": "<p>A etapa de <strong>Sa√≠da</strong> √© a forma como o nosso programa comunica os resultados ao utilizador. Uma sa√≠da bem formatada √© crucial para que a informa√ß√£o seja clara e profissional.</p><ul class=\"list-disc list-inside space-y-2\"><li><strong>Controle de Decimais:</strong> Use <code class=\"inline-code\">%.2f</code> para formatar valores monet√°rios ou outros n√∫meros que precisem de exatamente duas casas decimais.</li><li><strong>Alinhamento:</strong> Pode controlar a largura de um campo. Por exemplo, <code class=\"inline-code\">%8.2f</code> reserva 8 espa√ßos para o n√∫mero, alinhando-o √† direita, o que √© √≥timo para criar tabelas e recibos.</li><li><strong>Caracteres de Escape:</strong> Use <code class=\"inline-code\">\\n</code> para quebrar uma linha e <code class=\"inline-code\">\\t</code> para adicionar uma tabula√ß√£o (um espa√ßamento padronizado).</li></ul>"
    },
    {
      "type": "contentBlock",
      "title": "Atividade Pr√°tica em Duplas: Recibo de Compras",
      "content": [
        {
          "type": "paragraph",
          "text": "Em duplas, vamos criar um programa que simula um recibo de compras. O programa deve ler o pre√ßo e a quantidade de 3 produtos, calcular o subtotal de cada um, o total geral, aplicar um desconto de 10% e exibir um recibo bem formatado."
        },
        {
          "type": "code",
          "language": "c",
          "code": "#include <stdio.h>\n\nint main() {\n    // --- INPUT VARIABLES ---\n    float price1, price2, price3;\n    int qty1, qty2, qty3;\n\n    // --- PROCESSING VARIABLES ---\n    float subtotal1, subtotal2, subtotal3;\n    float total, discount, finalTotal;\n\n    // --- INPUT STAGE ---\n    printf(\"Digite o preco e a quantidade do produto 1: \");\n    scanf(\"%f %d\", &price1, &qty1);\n\n    printf(\"Digite o preco e a quantidade do produto 2: \");\n    scanf(\"%f %d\", &price2, &qty2);\n    \n    printf(\"Digite o preco e a quantidade do produto 3: \");\n    scanf(\"%f %d\", &price3, &qty3);\n\n    // --- PROCESSING STAGE ---\n    subtotal1 = price1 * qty1;\n    subtotal2 = price2 * qty2;\n    subtotal3 = price3 * qty3;\n    total = subtotal1 + subtotal2 + subtotal3;\n    discount = total * 0.10f; // 10% discount\n    finalTotal = total - discount;\n\n    // --- OUTPUT STAGE ---\n    printf(\"\\n\\n--- RECIBO DE COMPRAS ---\\n\");\n    printf(\"Produto 1: %d x R$ %.2f = R$ %8.2f\\n\", qty1, price1, subtotal1);\n    printf(\"Produto 2: %d x R$ %.2f = R$ %8.2f\\n\", qty2, price2, subtotal2);\n    printf(\"Produto 3: %d x R$ %.2f = R$ %8.2f\\n\", qty3, price3, subtotal3);\n    printf(\"----------------------------------\\n\");\n    printf(\"Total Bruto:              R$ %8.2f\\n\", total);\n    printf(\"Desconto (10%%):           R$ %8.2f\\n\", discount);\n    printf(\"Total a Pagar:            R$ %8.2f\\n\", finalTotal);\n    printf(\"----------------------------------\\n\");\n\n    return 0;\n}\n"
        }
      ]
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Pr√≥ximos Passos e Tarefa (TED)",
      "content": "<h4>Tarefa para a pr√≥xima aula</h4><p class=\"mb-4\">O objetivo √© praticar o conceito de c√°lculos sequenciais e a formata√ß√£o de sa√≠da.</p><ol class=\"list-decimal list-inside space-y-3 font-semibold\"><li>Crie um programa em C chamado <code class=\"inline-code\">aula8_descontos_sucessivos.c</code>.</li><li>O programa deve ler o valor de um produto.</li><li>Aplique um desconto de 10% sobre o valor inicial.</li><li>Sobre o <strong>novo valor</strong>, aplique um segundo desconto de 5%.</li><li>Exiba o valor original, o valor ap√≥s o primeiro desconto e o valor final, todos formatados com duas casas decimais. A sa√≠da deve ser clara e autoexplicativa.</li><li>Adicione coment√°rios em ingl√™s no seu c√≥digo explicando cada etapa.</li><li>Teste com valores diferentes (ex: 100.00, 85.50, 123.45) para garantir que a l√≥gica est√° correta.</li><li>Poste o ficheiro <code class=\"inline-code\">.c</code> na Atividade da \"Aula 8\" no Moodle.</li></ol>"
    },
    {
      "type": "contentBlock",
      "title": "üíª √Årea de Testes Interativa",
      "content": [
        {
          "type": "paragraph",
          "text": "Abra o editor OnlineGDB em uma nova aba para compilar e executar seus programas em C."
        },
        {
          "type": "html",
          "html": "<a href=\"https://www.onlinegdb.com/online_c_compiler\" target=\"_blank\" rel=\"\" class=\"btn btn-tonal\">Abrir OnlineGDB</a>"
        },
        {
          "type": "paragraph",
          "text": "üí° <strong>Dica:</strong> Escreva, compile e execute seu programa em C diretamente nesta p√°gina. Use este espa√ßo para testar a tarefa da Aula 8 ou criar novos experimentos com operadores."
        }
      ]
    },
    {
      "type": "videos",
      "title": "üé• V√≠deos de Apoio",
      "videos": [
        {
          "title": "Entrada e Sa√≠da em C (scanf e printf)",
          "src": "https://www.youtube.com/embed/uX0r1JlyDFg"
        },
        {
          "title": "Quase tudo que voc√™ precisa saber sobre printf",
          "src": "https://www.youtube.com/embed/0EEXxcTa7Ok"
        }
      ]
    },
    {
      "type": "checklist",
      "title": "‚úÖ Ao final desta aula voc√™ deve ser capaz de:",
      "items": [
        "Ler m√∫ltiplos valores numa √∫nica chamada <code class=\"inline-code\">scanf</code>.",
        "Explicar a import√¢ncia de vari√°veis intermedi√°rias em c√°lculos complexos.",
        "Formatar a sa√≠da de n√∫meros <code class=\"inline-code\">float</code> com <code class=\"inline-code\">%.2f</code>.",
        "Usar <code class=\"inline-code\">\\n</code> e <code class=\"inline-code\">\\t</code> para organizar a sa√≠da no console.",
        "Construir um programa sequencial completo que l√™, processa e exibe dados."
      ]
    },
    {
      "type": "bibliography",
      "title": "üìö Bibliografia de Apoio",
      "items": [
        "<strong>BACKES, Andr√©.</strong> <em>Linguagem C: completa e descomplicada.</em> Rio de Janeiro: Elsevier, 2019.",
        "<strong>MANZANO, Jos√© Augusto N.G.; OLIVEIRA, Jayr Figueiredo.</strong> <em>Algoritmos: l√≥gica para desenvolvimento de programa√ß√£o de computadores.</em> S√£o Paulo: √ârica, 2019.",
        "<strong>KERNIGHAN, Brian W.; RITCHIE, Dennis M.</strong> <em>A Linguagem de Programa√ß√£o C.</em> 2. ed. Rio de Janeiro: LTC, 2018. (Leitura complementar)"
      ]
    }
  ]
}
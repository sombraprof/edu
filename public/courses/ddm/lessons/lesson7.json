{
  "id": "lesson7",
  "title": "Aula 7: Unidade I – Persistência Local",
  "objective": "",
  "content": [
    {
      "type": "html",
      "html": "<section id=\"aula7\" class=\"mb-16 pt-16\">\n  <header class=\"mb-12 border-b pb-8\">\n    <h2 class=\"text-4xl font-bold text-slate-900\">\n      Aula 7: Unidade II – O Ciclo de Vida das Activities\n    </h2>\n    <p class=\"text-lg text-slate-600 mt-2\">\n      Compreender os principais estados de uma Activity, sua importância e\n      implicações no gerenciamento de recursos.\n    </p>\n  </header>\n\n  <div class=\"bg-white p-6 rounded-lg shadow-md mb-12\">\n    <h3 class=\"font-bold text-2xl text-slate-800 mb-4\">Plano de Voo da Aula</h3>\n    <ul class=\"list-disc list-inside space-y-2 text-slate-700\">\n      <li>\n        <strong>Pergunta Inicial e Contexto Profissional:</strong> Por que o\n        ciclo de vida é um dos tópicos mais importantes para um dev Android?\n      </li>\n      <li>\n        <strong>O Diagrama Oficial do Ciclo de Vida:</strong> Uma visão geral\n        dos estados e transições.\n      </li>\n      <li>\n        <strong>Mergulho nos Métodos:</strong> Análise detalhada de cada método\n        de callback.\n      </li>\n      <li>\n        <strong>O Problema da Rotação:</strong> Salvando e restaurando o estado\n        com <code-text>onSaveInstanceState()</code-text>.\n      </li>\n      <li>Prevenindo Memory Leaks em Activities</li>\n      <li>Uso de LifecycleObserver para observar estados</li>\n      <li>\n        <strong>Atividade Prática:</strong> Observando o ciclo de vida e a perda\n        de estado em tempo real com o Logcat.\n      </li>\n      <li>\n        <strong>Integração com Ferramentas Modernas:</strong> Uma introdução ao\n        Jetpack Lifecycle e ViewModel.\n      </li>\n      <li>\n        <strong>Quiz Rápido e Tarefa (TED):</strong> Consolidando o\n        conhecimento.\n      </li>\n    </ul>\n  </div>\n\n  <div id=\"contexto\" class=\"mb-16\">\n    <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n      Contexto Profissional: Por que o Ciclo de Vida é Crucial?\n    </h3>\n    <div class=\"bg-white p-8 rounded-lg shadow-md\">\n      <p class=\"text-lg mb-4\">\n        Vamos começar com uma pergunta:\n        <strong\n          >\"O que acontece com o texto que você estava digitando em um\n          formulário se você rotacionar o celular?\"</strong\n        >. Na maioria dos apps mal construídos, o texto desaparece. Isso\n        acontece por causa do ciclo de vida.\n      </p>\n      <p class=\"mb-4\">\n        Em um ambiente com recursos limitados como o mobile, o sistema Android\n        precisa constantemente gerenciar memória e bateria. Ele pode criar,\n        pausar, parar e destruir as telas (Activities) do seu app a qualquer\n        momento. Ignorar o ciclo de vida leva a:\n      </p>\n      <ul class=\"list-disc list-inside space-y-2\">\n        <li>\n          <strong>Bugs e Crashes:</strong> Tentar usar um recurso (como a\n          câmera) quando a tela está em segundo plano.\n        </li>\n        <li>\n          <strong>Má Experiência do Usuário (UX):</strong> Perder o progresso do\n          usuário (como o texto de um formulário) quando ele rotaciona a tela ou\n          atende uma chamada.\n        </li>\n        <li>\n          <strong>Consumo Excessivo de Bateria:</strong> Manter sensores (como o\n          GPS) ativos quando não são necessários.\n        </li>\n      </ul>\n      <div class=\"callout callout-info\">\n        <h5 class=\"font-bold mb-2\">Relevância no Mercado</h5>\n        <p>\n          Dominar o ciclo de vida é um requisito não negociável para qualquer\n          vaga de desenvolvedor Android. É um dos primeiros tópicos abordados em\n          entrevistas técnicas e provas de certificação, pois demonstra que o\n          candidato entende como construir apps robustos e eficientes.\n        </p>\n      </div>\n    </div>\n  </div>\n\n  <div id=\"diagrama\" class=\"mb-16\">\n    <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n      O Diagrama Oficial do Ciclo de Vida\n    </h3>\n    <div class=\"bg-white p-8 rounded-lg shadow-md\">\n      <p class=\"mb-6\">\n        Este é o diagrama oficial da Google. Ele ilustra os seis principais\n        callbacks que uma Activity pode receber ao longo de sua \"vida\". Nossa\n        missão é entender o que acontece em cada transição.\n      </p>\n      <img\n        src=\"https://developer.android.com/guide/components/images/activity_lifecycle.png\"\n        alt=\"Diagrama oficial do ciclo de vida da Activity\"\n        class=\"my-4 rounded-lg shadow-sm mx-auto border\"\n      />\n    </div>\n  </div>\n\n  <div class=\"space-y-8 mb-16\">\n    <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n      Mergulhando nos Métodos do Ciclo de Vida\n    </h3>\n    <p>\n      Cada um desses métodos nos dá uma oportunidade de executar um código\n      específico no momento certo.\n    </p>\n\n    <div class=\"bg-white p-6 rounded-lg shadow-md\">\n      <h4 class=\"font-bold text-xl text-slate-800 mb-2\">\n        <code-text>onCreate()</code-text>\n      </h4>\n      <p>\n        <strong>Quando é chamado?</strong> Uma única vez, quando a Activity é\n        criada pela primeira vez.\n      </p>\n      <p>\n        <strong>O que fazer aqui?</strong> Toda a configuração inicial que não\n        deve ser refeita: definir o layout com <code-text>setContentView()</code-text>,\n        inicializar variáveis, configurar listeners de clique, etc.\n      </p>\n    </div>\n\n    <div class=\"bg-white p-6 rounded-lg shadow-md\">\n      <h4 class=\"font-bold text-xl text-slate-800 mb-2\">\n        <code-text>onStart()</code-text> e <code-text>onStop()</code-text>\n      </h4>\n      <p>\n        <strong>Quando são chamados?</strong> <code-text>onStart()</code-text> é chamado\n        quando a Activity está prestes a se tornar visível.\n        <code-text>onStop()</code-text> é chamado quando ela não está mais visível.\n      </p>\n      <p>\n        <strong>O que fazer aqui?</strong> Gerenciar recursos que precisam estar\n        ativos apenas enquanto a UI está na tela, como registrar\n        <code-text>BroadcastReceivers</code-text> ou animações.\n      </p>\n    </div>\n\n    <div class=\"bg-white p-6 rounded-lg shadow-md\">\n      <h4 class=\"font-bold text-xl text-slate-800 mb-2\">\n        <code-text>onResume()</code-text> e <code-text>onPause()</code-text>\n      </h4>\n      <p>\n        <strong>Quando são chamados?</strong> <code-text>onResume()</code-text> é chamado\n        quando a Activity está em primeiro plano e o usuário pode interagir com\n        ela. <code-text>onPause()</code-text> é o primeiro indicativo de que o usuário\n        está deixando a Activity.\n      </p>\n      <p>\n        <strong>O que fazer aqui?</strong> É aqui que se gerenciam os recursos\n        mais exclusivos, como a câmera, o GPS ou um player de vídeo. Você os\n        \"liga\" no <code-text>onResume()</code-text> e os \"desliga\" imediatamente no\n        <code-text>onPause()</code-text> para não consumir recursos desnecessariamente.\n      </p>\n    </div>\n\n    <div class=\"bg-white p-6 rounded-lg shadow-md\">\n      <h4 class=\"font-bold text-xl text-slate-800 mb-2\">\n        <code-text>onDestroy()</code-text>\n      </h4>\n      <p>\n        <strong>Quando é chamado?</strong> Uma única vez, antes da Activity ser\n        destruída.\n      </p>\n      <p>\n        <strong>O que fazer aqui?</strong> É a última chance de limpar todos os\n        recursos restantes para evitar vazamentos de memória (memory leaks).\n      </p>\n    </div>\n  </div>\n\n  <div id=\"salvando-estado\" class=\"mb-16\">\n    <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n      O Problema da Rotação: Salvando o Estado\n    </h3>\n    <div class=\"bg-white p-8 rounded-lg shadow-md\">\n      <p class=\"text-lg mb-4\">\n        Quando você rotaciona a tela, o Android, por padrão,\n        <strong>destrói e recria</strong> a Activity. Isso é feito para que o\n        app possa carregar recursos alternativos para a nova configuração (ex:\n        um layout diferente para o modo paisagem). O problema é que todos os\n        dados temporários (como o texto em um <code-text>EditText</code-text>) são perdidos.\n      </p>\n      <p>\n        Para resolver isso, o ciclo de vida nos oferece dois métodos especiais:\n      </p>\n      <ul class=\"list-disc list-inside space-y-2\">\n        <li>\n          <strong><code-text>onSaveInstanceState(outState: Bundle)</code-text></strong\n          >: Chamado pelo sistema antes da Activity ser destruída. É a sua\n          chance de salvar dados importantes em um objeto <code-text>Bundle</code-text>.\n        </li>\n        <li>\n          <strong><code-text>onCreate(savedInstanceState: Bundle?)</code-text></strong\n          >: O mesmo <code-text>Bundle</code-text> que você salvou é entregue de volta aqui quando a\n          Activity é recriada. Você pode então restaurar os dados.\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"callout callout-warning\">\n    <h5 class=\"font-bold mb-2\">Alerta Importante: Memory Leaks</h5>\n    <p>\n      Manter referências de contexto (como Activities) em singletons ou threads\n      pode causar vazamentos de memória. Sempre use\n      <code-text>applicationContext</code-text> quando o contexto da Activity não for\n      necessário.\n    </p>\n  </div>\n\n  <div class=\"bg-white p-6 rounded-lg shadow-md mb-12\">\n    <h3 class=\"font-bold text-2xl text-slate-800 mb-4\">\n      Usando LifecycleObserver\n    </h3>\n    <p>Permite desacoplar a lógica do ciclo de vida da Activity.</p>\n    <div class=\"code-block-wrapper\">\n      <div class=\"code-block\">\n        <pre><code class=\"mono\">\nclass MyObserver : DefaultLifecycleObserver {\n    override fun onStart(owner: LifecycleOwner) {\n        Log.d(\"Observer\", \"Activity iniciou\")\n    }\n}\n\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        lifecycle.addObserver(MyObserver())\n    }\n}\n</code></pre>\n      </div>\n    </div>\n  </div>\n\n  <div id=\"atividade-pratica-aula7\" class=\"mb-16\">\n    <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n      Atividade Prática: Observando o Ciclo de Vida\n    </h3>\n    <div class=\"bg-white p-8 rounded-lg shadow-md\">\n      <p class=\"mb-4\">\n        Vamos criar um novo projeto para registrar cada transição de estado e\n        ver como salvar o estado de um <code-text>EditText</code-text>.\n      </p>\n      <div class=\"code-block-wrapper\">\n        <button class=\"copy-button\">Copiar</button>\n        <div class=\"code-block\">\n          <h5 class=\"mono\">// Código Final para MainActivity.kt</h5>\n          <pre><code>package br.com.unichristus.ads.ciclodevida\n\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.util.Log\nimport android.widget.EditText\n\nclass MainActivity : AppCompatActivity() {\n\n    private val TAG = \"CicloDeVida\"\n    private var contadorOnCreate = 0\n    private lateinit var editTextNome: EditText\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        \n        contadorOnCreate++\n        Log.d(TAG, \"onCreate() chamado. Vezes: $contadorOnCreate\")\n\n        editTextNome = findViewById(R.id.editTextNome)\n\n        // Restaura o estado salvo, se houver\n        if (savedInstanceState != null) {\n            val textoSalvo = savedInstanceState.getString(\"TEXTO_DIGITADO\")\n            editTextNome.setText(textoSalvo)\n            Log.i(TAG, \"Texto restaurado: $textoSalvo\")\n        }\n    }\n\n    override fun onSaveInstanceState(outState: Bundle) {\n        super.onSaveInstanceState(outState)\n        val textoAtual = editTextNome.text.toString()\n        outState.putString(\"TEXTO_DIGITADO\", textoAtual)\n        Log.i(TAG, \"onSaveInstanceState: Salvando texto '$textoAtual'\")\n    }\n\n    override fun onStart() { super.onStart(); Log.d(TAG, \"onStart() chamado.\") }\n    override fun onResume() { super.onResume(); Log.d(TAG, \"onResume() chamado.\") }\n    override fun onPause() { super.onPause(); Log.d(TAG, \"onPause() chamado.\") }\n    override fun onStop() { super.onStop(); Log.d(TAG, \"onStop() chamado.\") }\n    override fun onRestart() { super.onRestart(); Log.d(TAG, \"onRestart() chamado.\") }\n    override fun onDestroy() { super.onDestroy(); Log.d(TAG, \"onDestroy() chamado.\") }\n}</code></pre>\n        </div>\n      </div>\n      <h4 class=\"font-semibold text-xl mt-6 mb-3\">Tabela de Análise:</h4>\n      <p>\n        Execute o app e preencha a tabela abaixo com a sequência de métodos\n        chamados no Logcat para cada ação:\n      </p>\n      <div class=\"overflow-x-auto mt-4\">\n        <table class=\"w-full text-left border-collapse\">\n          <thead class=\"bg-slate-200\">\n            <tr>\n              <th class=\"p-2 border\">Ação do Usuário</th>\n              <th class=\"p-2 border\">\n                Métodos do Ciclo de Vida Chamados (em ordem)\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"p-2 border\">Abrir o app pela primeira vez</td>\n              <td class=\"p-2 border\"></td>\n            </tr>\n            <tr>\n              <td class=\"p-2 border\">Pressionar o botão Home</td>\n              <td class=\"p-2 border\"></td>\n            </tr>\n            <tr>\n              <td class=\"p-2 border\">Voltar para o app</td>\n              <td class=\"p-2 border\"></td>\n            </tr>\n            <tr>\n              <td class=\"p-2 border\">Rotacionar a tela</td>\n              <td class=\"p-2 border\"></td>\n            </tr>\n            <tr>\n              <td class=\"p-2 border\">\n                Pressionar o botão Voltar (para fechar)\n              </td>\n              <td class=\"p-2 border\"></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n\n  <div id=\"tarefa-aula7\" class=\"mb-16\">\n    <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n      Encerramento e Próximos Passos\n    </h3>\n    <div class=\"callout callout-task\">\n      <h5 class=\"font-bold mb-2\">Tarefa para a próxima aula (TED)</h5>\n      <p class=\"mb-4\">\n        O desafio é criar um mini-relatório para consolidar o conhecimento sobre\n        o ciclo de vida.\n      </p>\n      <ol class=\"list-decimal list-inside space-y-2\">\n        <li>Crie o projeto de teste da atividade prática e capture os logs.</li>\n        <li>\n          No Moodle, submeta um documento respondendo:\n          <ul class=\"list-disc list-inside ml-6 mt-2\">\n            <li>\n              Qual a principal diferença prática entre <code-text>onPause()</code-text> e\n              <code-text>onStop()</code-text>?\n            </li>\n            <li>\n              Por que o Android destrói e recria a Activity durante a rotação de\n              tela?\n            </li>\n            <li>\n              Como o conhecimento do ciclo de vida pode influenciar a decisão de\n              onde colocar a lógica de inicialização de um player de vídeo em um\n              app como o YouTube?\n            </li>\n          </ul>\n        </li>\n      </ol>\n    </div>\n    <div class=\"bg-white p-6 rounded-lg shadow-md mt-8\">\n      <h4 class=\"font-bold text-xl text-slate-800 mb-4\">\n        Bibliografia Recomendada\n      </h4>\n      <ul class=\"list-disc list-inside space-y-2\">\n        <li>\n          OLIVEIRA, Diego Bittencourt de et al.\n          <strong>Desenvolvimento para Dispositivos Móveis</strong>. Porto\n          Alegre: SAGAH, 2019. v. 1.\n        </li>\n        <li>\n          LECHETA, Ricardo R.\n          <strong\n            >Google Android: Aprenda a criar aplicações para dispositivos móveis\n            com o Android SDK</strong\n          >. Novatec, 2015.\n        </li>\n        <li>\n          <a\n            href=\"https://developer.android.com/guide/components/activities/activity-lifecycle\"\n            target=\"_blank\"\n            class=\"text-indigo-600 hover:underline font-semibold\"\n            >Documentação Oficial do Ciclo de Vida da Activity</a\n          >.\n        </li>\n      </ul>\n    </div>\n  </div>\n</section>\n"
    }
  ]
}
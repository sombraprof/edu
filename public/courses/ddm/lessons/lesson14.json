{
  "id": "lesson14",
  "title": "Aula 14: Unidade III – Desenvolvimento Híbrido",
  "objective": "",
  "content": [
    {
      "type": "html",
      "html": "<section id=\"aula14\" class=\"max-w-7xl mx-auto\">\n  <header class=\"mb-12 border-b pb-8\">\n    <h2 class=\"text-4xl font-bold text-slate-900\">\n      Aula 14: Unidade III – Introdução ao Room: Entities e DAO\n    </h2>\n    <p class=\"text-lg text-slate-600 mt-2\">\n      Apresentar os conceitos fundamentais do Jetpack Room como alternativa\n      moderna ao SQLiteOpenHelper.\n    </p>\n  </header>\n\n  <div class=\"bg-white p-6 rounded-lg shadow-md mb-12\">\n    <h3 class=\"font-bold text-2xl text-slate-800 mb-4\">Plano de Voo da Aula</h3>\n    <ul class=\"list-disc list-inside space-y-2 text-slate-700\">\n      <li>\n        <strong>Recapitulação:</strong> As limitações do\n        <code>SharedPreferences</code> para dados estruturados.\n      </li>\n      <li>\n        <strong>Introdução ao Room:</strong> O que é, por que usar e seus três\n        componentes principais.\n      </li>\n      <li>\n        <strong>Componente 1: A Entidade (<code>@Entity</code>):</strong>\n        Mapeando nossos dados para uma tabela de banco de dados.\n      </li>\n      <li>\n        <strong>Componente 2: O DAO (<code>@Dao</code>):</strong> Criando a\n        interface de acesso aos dados com consultas SQL.\n      </li>\n      <li>\n        <strong>Atividade Prática:</strong> Configurar as dependências do Room e\n        criar nossa primeira Entidade e DAO.\n      </li>\n      <li>\n        <strong>Ponte para a Próxima Aula:</strong> O que falta para termos um\n        banco de dados funcional?\n      </li>\n      <li>\n        <strong>Tarefa (TED):</strong> Consolidar o aprendizado criando a\n        estrutura base de persistência.\n      </li>\n    </ul>\n  </div>\n\n  <div id=\"contexto\" class=\"mb-16\">\n    <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n      Do Simples ao Estruturado: Por que o Room?\n    </h3>\n    <div class=\"bg-white p-8 rounded-lg shadow-md\">\n      <p class=\"text-lg mb-4\">\n        Na <strong>Aula 13</strong>, vimos como o\n        <code>SharedPreferences</code> é ótimo para salvar dados simples. Mas e\n        se quisermos salvar uma lista de notas, onde cada nota tem um título, um\n        conteúdo e uma data? Ou uma lista de contatos? Usar chave-valor para\n        isso seria complexo e ineficiente.\n      </p>\n      <p>\n        Historicamente, a solução para isso no Android era usar o\n        <code>SQLiteOpenHelper</code> diretamente. Embora poderoso, ele exigia\n        muito código repetitivo (boilerplate) e não havia verificação de erros\n        nas consultas SQL em tempo de compilação, o que tornava o processo\n        propenso a falhas.\n      </p>\n      <div class=\"callout callout-info\">\n        <h5 class=\"font-bold mb-2\">A Solução Moderna: Jetpack Room</h5>\n        <p>\n          O <strong>Room</strong> é uma biblioteca de persistência que faz parte\n          do Android Jetpack. Ele fornece uma camada de abstração sobre o SQLite\n          para permitir um acesso mais robusto ao banco de dados, aproveitando\n          todo o poder do SQLite. Em outras palavras, ele nos dá o melhor dos\n          dois mundos: a simplicidade de uma API moderna com a performance de um\n          banco de dados SQLite nativo.\n        </p>\n      </div>\n    </div>\n  </div>\n\n  <div id=\"componentes-room\" class=\"mb-16\">\n    <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n      Os 3 Componentes Principais do Room\n    </h3>\n    <div class=\"bg-white p-8 rounded-lg shadow-md\">\n      <p class=\"text-lg mb-6\">\n        O Room tem três componentes principais que trabalham juntos. Hoje, vamos\n        focar nos dois primeiros.\n      </p>\n      <div class=\"space-y-4\">\n        <div class=\"bg-blue-100 p-4 rounded-lg\">\n          <h4 class=\"font-bold text-xl text-blue-800\">1. Entidade (Entity)</h4>\n          <p class=\"mt-1\">\n            Uma classe que representa uma tabela no banco de dados. É um \"molde\"\n            para os nossos dados.\n          </p>\n        </div>\n        <div class=\"bg-green-100 p-4 rounded-lg\">\n          <h4 class=\"font-bold text-xl text-green-800\">\n            2. DAO (Data Access Object)\n          </h4>\n          <p class=\"mt-1\">\n            Uma interface que contém os métodos para acessar o banco de dados. É\n            aqui que definimos nossas consultas SQL.\n          </p>\n        </div>\n        <div class=\"bg-purple-100 p-4 rounded-lg\">\n          <h4 class=\"font-bold text-xl text-purple-800\">\n            3. Banco de Dados (Database)\n          </h4>\n          <p class=\"mt-1\">\n            Uma classe abstrata que herda de <code>RoomDatabase</code> e serve\n            como o ponto de acesso principal ao banco de dados, unindo as\n            Entidades e os DAOs.\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div id=\"entity\" class=\"mb-16\">\n    <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n      Componente 1: A Entidade (<code>@Entity</code>)\n    </h3>\n    <div class=\"bg-white p-8 rounded-lg shadow-md\">\n      <p class=\"mb-4\">\n        Uma entidade é uma <code>data class</code> do Kotlin que anotamos com\n        <code>@Entity</code>. Cada instância desta classe representa uma linha\n        na tabela, e cada propriedade representa uma coluna.\n      </p>\n      <div class=\"code-block-wrapper\">\n        <button class=\"copy-button\">Copiar</button>\n        <div class=\"code-block\">\n          <h5 class=\"mono\">// Exemplo: Nota.kt</h5>\n          <pre><code>import androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"tabela_de_notas\")\ndata class Nota(\n    @PrimaryKey(autoGenerate = true)\n    val id: Int = 0,\n\n    @ColumnInfo(name = \"titulo_da_nota\")\n    val titulo: String,\n\n    @ColumnInfo(name = \"conteudo_da_nota\")\n    val conteudo: String\n)</code></pre>\n        </div>\n      </div>\n      <div class=\"callout callout-info\">\n        <h5 class=\"font-bold mb-2\">Anatomia de uma Entidade</h5>\n        <ul class=\"list-disc list-inside\">\n          <li>\n            <strong><code>@Entity(tableName = \"...\")</code></strong\n            >: Marca a classe como uma tabela do banco de dados e define seu\n            nome.\n          </li>\n          <li>\n            <strong><code>@PrimaryKey(autoGenerate = true)</code></strong\n            >: Designa uma propriedade como a chave primária da tabela.\n            <code>autoGenerate = true</code> faz com que o Room gere um ID único\n            para cada nova nota.\n          </li>\n          <li>\n            <strong><code>@ColumnInfo(name = \"...\")</code></strong\n            >: Permite especificar um nome diferente para a coluna na tabela do\n            banco de dados. É uma boa prática para evitar conflitos com\n            palavras-chave do SQL.\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <div id=\"dao\" class=\"mb-16\">\n    <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n      Componente 2: O DAO (<code>@Dao</code>)\n    </h3>\n    <div class=\"bg-white p-8 rounded-lg shadow-md\">\n      <p class=\"mb-4\">\n        O DAO é uma <code>interface</code> que define como acessamos nossos\n        dados. Nós declaramos os métodos e o Room gera a implementação para nós\n        em tempo de compilação.\n      </p>\n      <div class=\"code-block-wrapper\">\n        <button class=\"copy-button\">Copiar</button>\n        <div class=\"code-block\">\n          <h5 class=\"mono\">// Exemplo: NotaDao.kt</h5>\n          <pre><code>import androidx.room.Dao\nimport androidx.room.Delete\nimport androidx.room.Insert\nimport androidx.room.Query\n\n@Dao\ninterface NotaDao {\n\n    @Insert\n    suspend fun insert(nota: Nota)\n\n    @Query(\"SELECT * FROM tabela_de_notas ORDER BY id DESC\")\n    suspend fun getAll(): List&lt;Nota&gt;\n\n    @Query(\"DELETE FROM tabela_de_notas\")\n    suspend fun deleteAll()\n    \n    // O método abaixo não é parte do TED, mas é um exemplo útil\n    @Delete\n    suspend fun delete(nota: Nota)\n}</code></pre>\n        </div>\n      </div>\n      <div class=\"callout callout-info\">\n        <h5 class=\"font-bold mb-2\">Anotações do DAO</h5>\n        <ul class=\"list-disc list-inside\">\n          <li>\n            <strong><code>@Dao</code></strong\n            >: Marca a interface como um Data Access Object.\n          </li>\n          <li>\n            <strong\n              ><code>@Insert</code>, <code>@Update</code>,\n              <code>@Delete</code></strong\n            >: Anotações de conveniência para operações comuns. O Room gera o\n            SQL necessário automaticamente.\n          </li>\n          <li>\n            <strong><code>@Query</code></strong\n            >: A anotação mais poderosa. Permite que você escreva qualquer\n            consulta SQL. O Room valida a sua consulta em tempo de compilação!\n            Se você escrever o nome de uma tabela ou coluna errado, seu código\n            não compilará.\n          </li>\n          <li>\n            <strong><code>suspend</code></strong\n            >: Marcamos as funções como <code>suspend</code> para indicar que\n            elas são operações de longa duração e devem ser chamadas a partir de\n            uma corrotina, para não bloquear a thread principal.\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <div id=\"tarefa-aula14\" class=\"mb-16\">\n    <h3 class=\"text-3xl font-bold text-slate-800 mb-6\">\n      Encerramento e Próximos Passos\n    </h3>\n    <div class=\"callout callout-task\">\n      <h5 class=\"font-bold mb-2\">Tarefa para a próxima aula (TED)</h5>\n      <p class=\"mb-4\">\n        O desafio é criar a estrutura inicial de persistência para um aplicativo\n        de notas.\n      </p>\n      <ol class=\"list-decimal list-inside space-y-2\">\n        <li>\n          Em um novo projeto, configure as dependências do Room no seu arquivo\n          <code>build.gradle.kts</code>.\n        </li>\n        <li>\n          Crie o arquivo <code>Nota.kt</code> e implemente a classe de entidade\n          conforme o exemplo da aula.\n        </li>\n        <li>\n          Crie o arquivo <code>NotaDao.kt</code> e implemente a interface DAO\n          com os métodos <code>insert</code>, <code>getAll</code> e\n          <code>deleteAll</code>.\n        </li>\n        <li>\n          Submeta os dois arquivos (<code>Nota.kt</code> e\n          <code>NotaDao.kt</code>) no Moodle.\n        </li>\n      </ol>\n    </div>\n    <div class=\"bg-white p-6 rounded-lg shadow-md mt-8\">\n      <h4 class=\"font-bold text-xl text-slate-800 mb-4\">\n        Bibliografia Recomendada\n      </h4>\n      <ul class=\"list-disc list-inside space-y-2\">\n        <li>\n          SIMAS, V. L. et al.\n          <strong>Desenvolvimento para Dispositivos Móveis – Volume 2</strong>.\n          Grupo A, 2019.\n        </li>\n        <li>\n          <a\n            href=\"https://developer.android.com/training/data-storage/room\"\n            target=\"_blank\"\n            class=\"text-indigo-600 hover:underline font-semibold\"\n            >Documentação Oficial do Jetpack Room</a\n          >.\n        </li>\n      </ul>\n    </div>\n  </div>\n</section>\n"
    }
  ]
}
"lessonId","title","objective","objectives","competencies","skills","outcomes"
"lesson-01","Aula 1: Introdução à Lógica e Algoritmos","Conhecer o funcionamento do curso, alinhar expectativas e compreender por que a lógica é a linguagem dos computadores.","Contextualizar o papel da lógica na resolução de problemas computacionais. | Mapear o funcionamento da disciplina, critérios de avaliação e recursos de apoio. | Experimentar a construção de algoritmos usando passos claros e estruturados.","02 | 05 | 11","Identificar estruturas lógicas presentes em problemas cotidianos e classificá-las como condição, sequência ou repetição. | Descrever passo a passo um algoritmo simples utilizando o ciclo entrada → processamento → saída. | Comunicar expectativas da disciplina, critérios de avaliação e canais de apoio em linguagem objetiva.","Entrega quadro comparativo mapeando pelo menos três situações reais para estruturas lógicas básicas. | Produz algoritmo inicial com entradas, processamento e saídas validadas em dupla com o professor. | Apresenta resumo oral ou escrito explicitando cronograma, instrumentos avaliativos e recursos oferecidos na disciplina."
"lesson-02","Aula 2: Raciocínio Lógico e Operadores","Traduzir situações cotidianas em estruturas lógicas utilizando operadores AND, OR e NOT.","Praticar a decomposição de problemas em passos ordenados. | Reconhecer operadores lógicos e aplicá-los a regras de decisão. | Validar conclusões por meio de tabelas-verdade e simulações.","02 | 05 | 11","Classificar operadores lógicos (E, OU, NÃO) conforme o tipo de decisão exigida pelo problema. | Produzir tabelas-verdade completas que comprovem o comportamento de expressões booleanas. | Documentar em pseudocódigo um algoritmo que combine condições compostas com justificativas de cada ramo.","Apresenta quadro de decomposição destacando decisões, operadores escolhidos e alternativas descartadas. | Resolve ao menos três expressões booleanas verificando resultados com tabelas-verdade anotadas. | Publica pseudocódigo revisado em dupla com comentários que explicam o efeito de cada condição lógica."
"lesson-03","Aula 3: Estruturando Algoritmos","Transformar ideias em sequências claras e ordenadas que possam ser implementadas em linguagem de programação.","Aplicar técnicas de decomposição para mapear processos complexos. | Comparar diferentes representações (texto estruturado, fluxogramas, pseudocódigo). | Identificar e corrigir lacunas em algoritmos propostos.","02 | 05 | 12","Sequenciar instruções em blocos de entrada, processamento e saída mantendo nomes padronizados. | Comparar versões de algoritmos em dinâmicas colaborativas e apontar lacunas ou redundâncias. | Reescrever pseudocódigo incorporando feedback registrado em checklist coletivo.","Entrega algoritmo estruturado com rótulos de blocos e justificativa para a ordem escolhida. | Registra no mural da turma os pontos fortes e ajustes sugeridos para o algoritmo de outra dupla. | Disponibiliza versão revisada destacando trechos alterados após a rodada de feedback."
"lesson-04","Aula 4: Do Pseudocódigo ao Primeiro Programa em C","Conectar o planejamento em linguagem natural/pseudocódigo com a implementação inicial em C.","Relembrar a estrutura padrão de um algoritmo em Portugol. | Mapear cada parte do pseudocódigo para a sintaxe equivalente em C. | Implementar um programa simples em C a partir de um algoritmo planejado.","05 | 08 | 11","Traduzir instruções escritas em Portugol para blocos equivalentes em C garantindo correspondência de variáveis. | Configurar projeto no compilador, compilar e interpretar mensagens de erro para ajustar o código. | Documentar evidências de testes iniciais registrando entradas utilizadas e resultados esperados.","Entrega tabela comparativa destacando trecho em Portugol e versão final em C sem divergências semânticas. | Compila programa no laboratório sem erros e relata as correções aplicadas para eliminar warnings. | Anexa registro de execução com ao menos três cenários testados e respectivas saídas."
"lesson-05","Aula 5: Fluxogramas e Visualização da Lógica","Representar algoritmos usando fluxogramas claros que facilitem a comunicação entre equipe e stakeholders.","Mapear algoritmos simples em fluxogramas legíveis. | Relacionar símbolos padronizados a operações de entrada, processamento e decisão. | Interpretar fluxos produzidos por colegas para validar raciocínios.","02 | 11 | 12","Selecionar símbolos de fluxo adequados para início, decisões, processamento e término. | Alinhar fluxogramas ao pseudocódigo correspondente destacando equivalências entre blocos. | Conduzir revisão em dupla verificando legibilidade, setas e descrições dos caminhos alternativos.","Produz fluxograma completo com legenda de símbolos e validação feita pelo colega. | Apresenta checklist assinado confirmando correspondência entre fluxograma e algoritmo textual. | Registra ajustes realizados após a revisão cruzada em comentário ou nota compartilhada."
"lesson-06","Aula 6: Variáveis, Constantes e Tipos de Dados","Dominar a sintaxe de declaração e atribuição em C para preparar programas que manipulem dados com segurança.","Diferenciar variáveis de constantes e aplicar boas práticas de nomeação. | Selecionar tipos primitivos apropriados para cada informação. | Implementar exemplos simples de leitura, processamento e exibição com validação.","05 | 08 | 11","Declarar variáveis, constantes e tipos coerentes com os dados fornecidos pelo problema. | Validar leituras e escritas utilizando scanf e printf com especificadores compatíveis. | Registrar tabela de testes contendo valores válidos, inválidos e limites para cada variável.","Entrega código comentado que evidencia a escolha de tipos e o uso de constantes nominais. | Demonstra execução correta do programa para dados válidos e sinaliza tratamento de entradas incorretas. | Compartilha planilha ou quadro de testes com resultados observados e ajustes aplicados."
"lesson-07","Aula 7: Operadores e Expressões em C","Construir expressões aritméticas e lógicas corretas em C, respeitando precedência e usando operadores apropriados para cada situação.","Identificar a função das principais categorias de operadores em C. | Aplicar precedência e agrupamento para evitar ambiguidades em expressões. | Interpretar resultados lógicos para alimentar decisões e fluxos de controle.","02 | 05 | 08","Organizar expressões utilizando precedência e parênteses para garantir clareza lógica. | Simular avaliações de expressões passo a passo verificando efeitos de operadores relacionais e lógicos. | Criar casos de teste que comprovem limites e exceções dos cálculos implementados.","Entrega quadro com expressões reescritas e justificativas para o posicionamento de parênteses. | Apresenta tabela de rastreamento com valores intermediários e resultado final de cada expressão. | Disponibiliza conjunto de testes documentados cobrindo entradas típicas, limites e valores inválidos."
"lesson-08","Aula 8: Leituras múltiplas, cálculos encadeados e printf","Construir programas sequenciais completos que recebem múltiplos dados, processam com clareza e exibem resultados formatados.","Construir programas sequenciais em C que realizem múltiplas leituras e saídas formatadas. | Aplicar operações aritméticas encadeadas preservando a ordem correta de execução. | Validar dados lidos com scanf assegurando armazenamento em variáveis adequadas.","05 | 08 | 11","Encadear leituras com scanf garantindo o uso correto de endereços e especificadores. | Organizar variáveis intermediárias para cálculos encadeados mantendo nomes significativos. | Formatar saídas com printf destacando resultados, unidades e mensagens interpretáveis.","Entrega programa que registra ao menos três leituras, cálculos associados e recibo formatado. | Documenta tabela relacionando cada variável a seu papel no fluxo entrada → processamento → saída. | Apresenta vídeo curto ou relatório textual explicando como validar dados extremos e ajustar mensagens."
"lesson-09","Aula 9: Problemas sequenciais aplicados em C","Resolver problemas cotidianos com programas sequenciais em C documentando cada etapa do processo.","Planejar a solução identificando entradas, processamento e saídas de cada caso. | Implementar programas sequenciais com validações simples e formatação clara. | Comparar diferentes problemas para reconhecer padrões reutilizáveis.","05 | 08 | 11","Modelar problemas sequenciais identificando dados de entrada, fórmulas e mensagens de saída. | Implementar algoritmos encadeados em C validando cálculos com amostras reais. | Comunicar resultados em formato de relatório destacando interpretações relevantes.","Entrega solução funcional para estudo de caso proposto com comentários que justificam cada etapa. | Compartilha registro de testes comparando resultados esperados e obtidos para diferentes cenários. | Publica síntese escrita que explica impactos dos números calculados para o contexto do problema."
"lesson-10","Aula 10: Condicionais com if e else","Empregar estruturas if e if-else para alterar o fluxo do programa conforme regras de negócio bem definidas.","Reconhecer situações em que o fluxo sequencial precisa ser desviado por meio de uma condição. | Escrever e testar expressões booleanas que alimentam estruturas if e if-else. | Documentar cada caminho da decisão para garantir clareza e manutenção futura.","02 | 05 | 11","Identificar pontos de decisão que exigem uso de estruturas if e else. | Codificar blocos condicionais com mensagens claras para cada caminho. | Explicar verbalmente ou por escrito o fluxo completo do algoritmo destacando estados finais.","Apresenta diagrama ou tabela que mapeia condições para ações correspondentes. | Entrega código revisado que trata casos verdadeiro e falso com mensagens específicas. | Realiza apresentação curta explicando como o programa responde a pelo menos três entradas diferentes."
"lesson-11","Aula 11: Seleção múltipla com switch-case","Selecionar um entre vários blocos de código com base em uma única expressão usando switch-case de forma segura.","Identificar quando cadeias longas de if-else podem ser substituídas por switch-case. | Configurar cases, break e default para controlar exatamente quais blocos executam. | Documentar menus e mapas de opções para orientar o usuário.","02 | 05 | 11","Mapear cenários que justificam uso de switch-case em vez de cadeias de if. | Implementar seleção múltipla com rótulos, blocos bem indentados e cláusula default coerente. | Documentar tabela relacionando opções do menu a ações realizadas pelo programa.","Apresenta fluxograma ou mapa de decisão que evidencia agrupamentos tratados pelo switch-case. | Entrega código funcional com pelo menos quatro casos, incluindo default explicativo. | Disponibiliza tabela de apoio distribuída à turma listando comandos de cada opção implementada."
"lesson-12","Aula 12: Cadeias de decisão com else if","Modelar cadeias de else if que cobrem todos os cenários possíveis com clareza e sem lacunas.","Planejar a ordem das condições para evitar sobreposição entre faixas. | Combinar operadores lógicos para refinar regras com múltiplos critérios. | Registrar resultados esperados para cada ramo antes de implementar.","02 | 05 | 11","Priorizar condições em cadeias else if para garantir cobertura sem sobreposições. | Representar regras compostas por meio de árvores de decisão ou mapas lógicos. | Justificar por escrito o posicionamento de cada condição e suas implicações.","Entrega algoritmo que trata ao menos cinco faixas exclusivas com mensagens específicas. | Apresenta diagrama anotado validando que cada entrada é coberta por apenas um ramo. | Registra texto curto explicando ajustes realizados após testar limites das condições."
"lesson-13","Aula 13: Condições compostas e encadeadas","Aplicar &&, || e ! em cadeias de decisão planejadas que cobrem todas as regras do problema.","Compor expressões lógicas combinando operadores relacionais e lógicos. | Planejar cadeias else if para atender múltiplos cenários de decisão. | Avaliar a legibilidade de condições compostas em algoritmos em C.","02 | 05 | 08","Traduzir requisitos complexos em expressões booleanas utilizando operadores compostos. | Executar testes de mesa para detectar lacunas ou sobreposições em cadeias de decisão. | Refatorar condições com curto-circuito visando clareza e desempenho.","Disponibiliza conjunto de casos de teste que evidenciam cobertura completa do problema. | Entrega código revisado com operadores lógicos apropriados e comentários sobre riscos mitigados. | Apresenta relatório comparando a versão inicial e a refatorada, destacando ganhos observados."
"lesson-14","Aula 14: Avaliação NP1","Avaliar de forma individual a aplicação correta da lógica sequencial e das decisões condicionais estudadas nas aulas anteriores.","Verificar a compreensão dos conceitos fundamentais de algoritmos e programação em C. | Identificar lacunas de aprendizagem em lógica booleana e estruturas condicionais. | Coletar evidências para orientar a devolutiva e os planos de reforço da próxima aula.","02 | 05 | 08","Organizar tempo e recursos para executar avaliação escrita com foco em lógica e condicionais. | Aplicar estratégias de revisão rápida para validar respostas antes da entrega. | Registrar justificativas concisas que evidenciem raciocínio em cada questão.","Entrega prova preenchida dentro do tempo previsto com todas as questões respondidas. | Revisa itens críticos destacando conferência de fluxogramas, tabelas e códigos escritos. | Anota observações pós-prova apontando pontos fortes e tópicos para revisão."
"lesson-15","Aula 15: Correção da NP1 e aprofundamento","Transformar o feedback da NP1 em plano de melhoria, revisando condicionais compostas e boas práticas de implementação.","Apresentar panorama geral das notas e dos critérios avaliados na NP1. | Corrigir coletivamente os erros mais frequentes identificados nas questões. | Consolidar boas práticas para escrever cadeias condicionais claras e testáveis.","05 | 08 | 11","Analisar devolutivas da NP1 identificando padrões de erro por tema. | Refatorar respostas e códigos corrigindo falhas lógicas e de comunicação. | Explicar planos de melhoria em apresentação breve para a turma.","Entrega planilha com classificação dos erros cometidos e prioridade de revisão. | Disponibiliza versão corrigida dos exercícios com comentários sobre ajustes implementados. | Realiza pitch de até cinco minutos destacando aprendizados e próximos passos de estudo."
"lesson-16","Aula 16: Atividade Prática Assíncrona – Condicionais","Conduzir uma atividade autônoma que consolide condicionais aninhadas, operadores lógicos e planejamento de testes.","Revisar requisitos funcionais de um fluxo de triagem clínica. | Desenhar fluxogramas que reflitam decisões exclusivas e caminhos alternativos. | Implementar e testar o pseudocódigo/documentação das decisões escritas.","05 | 08 | 12","Planejar lógica de triagem documentando critérios e mensagens de orientação. | Executar bateria de testes registrando evidências e capturas de tela ou logs. | Organizar repositório compartilhado com checklist de entrega e pontos de melhoria colaborativa.","Submete protótipo funcional com documentação de critérios clínicos e fluxos implementados. | Anexa planilha de testes com resultados, screenshots e observações para cada cenário. | Coordena revisão por pares registrando feedback trocado e ajustes planejados."
"lesson-17","Aula 17: Estrutura de Repetição while","Compreender, modelar e implementar laços while controlados por condição e por sentinela.","Identificar situações em que while é mais adequado que for ou decisões simples. | Traduzir fluxogramas com laço enquanto em pseudocódigo/C. | Planejar testes que cubram entradas válidas, inválidas e sentinelas.","05 | 08 | 11","Definir invariantes e condições de parada adequadas para laços while. | Implementar sentinelas e validação de entrada garantindo que o loop encerre corretamente. | Documentar rastreamento de variáveis a cada iteração para explicar o comportamento do algoritmo.","Entrega código com while e sentinela documentados, acompanhado de comentários sobre invariantes. | Demonstra execução controlada com dados válidos e inválidos registrando comportamento esperado. | Produz tabela de rastreamento que evidencia atualização de variáveis a cada ciclo."
"lesson-18","Aula 18: Estrutura de Repetição for","Planejar e implementar laços for para percorrer intervalos, vetores e produzir tabulações controladas.","Mapear os três componentes do for (inicialização, condição, atualização). | Comparar equivalências entre for e while em exemplos reais. | Aplicar for em tabelas e cálculos acumulativos com validação de limites.","05 | 08 | 11","Configurar laços for detalhando inicialização, condição e atualização. | Comparar abordagens for e while justificando escolha em função do problema. | Produzir documentação curta com exemplos de uso e testes realizados.","Apresenta programa funcional com pelo menos dois laços for em cenários distintos. | Disponibiliza relatório comparativo entre soluções for e while destacando métricas coletadas. | Entrega registro de testes indicando entradas, saídas e observações para melhorias futuras."
"lesson-19","Comparação entre for e while","","Distinguir cenários ideais para laços controlados por contador e por condição. | Refatorar algoritmos simples convertendo entre for e while sem alterar resultados. | Registrar evidências que sustentem a decisão sobre a estrutura de repetição escolhida.","02 | 05 | 08","Avaliar requisitos para decidir entre laços for e while considerando clareza e manutenção. | Refatorar algoritmos convertendo entre estruturas sem alterar resultado final. | Medir impactos da refatoração registrando desempenho, legibilidade e riscos.","Produz tabela comparativa que relaciona critérios do problema ao laço selecionado. | Entrega versões equivalentes em for e while confirmando saídas idênticas. | Anexa relatório com testes de limites, métricas de tempo e análise de riscos mitigados."
"lesson-20","Estrutura de repetição do-while","","Identificar problemas que exigem execução mínima antes da validação. | Implementar menus interativos utilizando a estrutura do-while. | Comparar vantagens do do-while em relação a while e for em fluxos de confirmação.","05 | 08 | 11","Modelar menus que exigem execução inicial obrigatória utilizando do-while. | Implementar validação de opções garantindo repetição até entrada aceitável. | Justificar escolha do do-while em comparação com outras estruturas de repetição.","Entrega menu funcional que registra ação inicial e controle de saída com clareza. | Documenta testes que comprovam rejeição de entradas inválidas e repetição do menu. | Produz texto curto explicando critérios adotados para escolher o do-while."
"lesson-21","Problemas com laços aninhados simples","","Planejar estruturas de dados bidimensionais que dependem de laços aninhados. | Implementar algoritmos com laços aninhados simples para tabulações e padrões visuais. | Analisar o custo computacional e a ordem de execução em aninhamentos.","05 | 08 | 12","Planejar laços aninhados definindo variáveis de controle e limites para cada nível. | Executar testes que comprovem preenchimento correto de estruturas bidimensionais. | Coordenar revisão entre pares utilizando tabelas de rastreamento para localizar gargalos.","Entrega solução que gera tabela 2D coerente com as regras fornecidas. | Anexa matriz de testes validando comportamentos com dados típicos e extremos. | Registra feedback recebido na revisão colaborativa e ajustes aplicados no código."
"lesson-22","Aula 22: Integrando Laços e Condicionais","Construir rotinas robustas que combinem laços e condicionais com validação e relatórios de execução.","Mapear pontos de decisão dentro e fora de laços. | Implementar validações de entrada antes de iniciar ciclos. | Gerar relatórios consolidados ao final do processamento.","02 | 05 | 08","Combinar condicionais e laços para construir fluxos completos de processamento. | Monitorar estados intermediários usando logs ou tabelas de acompanhamento. | Comparar soluções alternativas avaliando clareza e esforço de manutenção.","Entrega protótipo que integra decisões e repetições com resultados consistentes. | Apresenta tabela de estados registrando variáveis críticas ao longo da execução. | Disponibiliza análise escrita justificando a arquitetura final escolhida."
"lesson-23","Aula 23: Atividade Assíncrona de Triagem Clínica","Planejar e executar a triagem automatizada cumprindo requisitos funcionais, documentação e entrega assíncrona.","Interpretar o briefing de triagem e planejar o fluxo de decisão. | Implementar algoritmo que percorre formulários e classifica pacientes. | Documentar testes, métricas e justificativas no relatório de entrega.","05 | 08 | 12","Documentar passo a passo a atividade assíncrona, incluindo critérios de avaliação. | Executar testes clínicos simulados registrando evidências compartilháveis. | Organizar feedback entre squads sincronizando correções e entregas finais.","Publica guia de entrega com instruções, critérios e prazos acordados. | Anexa pacote de evidências com logs, capturas e resultados de cada cenário simulado. | Coordena sessão de retrospectiva registrando decisões e encaminhamentos do grupo."
"lesson-24","Aula 24: Síntese e Retrospectiva dos Laços","Refletir sobre o ciclo de laços, compartilhar entregas da triagem e definir próximos passos de estudo.","Apresentar resultados da atividade assíncrona de triagem. | Identificar boas práticas e pontos de melhoria nas soluções. | Planejar próximos estudos antes da introdução de funções.","08 | 11 | 12","Consolidar métricas e evidências coletadas nas atividades de laços. | Facilitar retrospectiva identificando conquistas, riscos e melhorias. | Comunicar plano de continuidade distribuindo responsabilidades entre os times.","Entrega relatório síntese com indicadores de qualidade e aprendizados da unidade. | Conduz reunião de retrospectiva produzindo ata com itens de ação priorizados. | Apresenta roadmap compartilhado com responsáveis, prazos e recursos necessários."
"lesson-25","Aula 25: Introdução a Funções e Modularização","Compreender por que dividir o código em funções torna programas mais legíveis, testáveis e sustentáveis.","Identificar sinais de que um algoritmo deve ser quebrado em funções. | Escrever protótipos simples com parâmetros e retorno. | Organizar arquivo C com seções de protótipos, main e funções auxiliares.","05 | 08 | 11","Identificar oportunidades de modularização em programas sequenciais. | Desenhar protótipos de funções definindo assinaturas, parâmetros e retorno. | Registrar pré e pós-condições que orientem o uso correto de cada função.","Entrega roteiro que aponta blocos candidatos à extração em funções. | Disponibiliza protótipo documentado em arquivo header ou anotações estruturadas. | Apresenta quadro de pré/pós-condições validado com exemplos práticos."
"lesson-26","Aula 26: Funções com Parâmetros e Retorno","Aplicar parâmetros e valores de retorno para construir funções reutilizáveis que tratam entradas variadas com segurança.","Comparar passagem por valor e por referência em C. | Projetar funções que retornam códigos de erro ou resultados numéricos. | Documentar contratos (pré e pós-condições) para cada função criada.","05 | 08 | 11","Implementar funções com parâmetros por valor e por referência conforme necessidade. | Construir casos de teste que validem contratos de entrada e saída. | Documentar brevemente cada função explicando propósito e efeitos colaterais.","Entrega código com funções parametrizadas e comentários sobre uso de ponteiros. | Anexa suíte de testes cobrindo cenários positivos, negativos e limites. | Registra documentação resumida disponível para colegas reutilizarem as funções."
"lesson-27","Aula 27: Programas Modulares com Múltiplas Funções","Projetar um mini-sistema em C dividindo responsabilidades entre múltiplas funções e arquivos com headers dedicados.","Planejar módulos e dependências utilizando canvas de design. | Criar e incluir arquivos header com protótipos organizados. | Automatizar compilação modular usando make ou scripts equivalentes.","05 | 08 | 12","Estruturar projeto modular com separação entre arquivos fonte e cabeçalhos. | Configurar fluxo de compilação incremental verificando dependências. | Orquestrar revisão cruzada garantindo que cada módulo siga padrões definidos.","Entrega projeto com múltiplos arquivos e build script funcionando. | Documenta pipeline de compilação destacando passos e ferramentas utilizadas. | Registra atas de revisão compartilhadas com responsáveis por cada módulo."
"lesson-28","Aula 28: Boas Práticas e Manutenção de Funções","Aplicar boas práticas de legibilidade, cobertura de testes e monitoramento de métricas em projetos modulares.","Avaliar código usando checklist de boas práticas. | Instrumentar funções com logs e medições simples. | Planejar manutenção preventiva em projetos com funções reutilizáveis.","05 | 08 | 12","Aplicar padrões de escrita e nomenclatura que favoreçam manutenção. | Executar checklist de revisão identificando dívidas técnicas e riscos. | Planejar ações de melhoria contínua distribuindo tarefas entre os membros da equipe.","Apresenta relatório de revisão com itens conformes e não conformes registrados. | Entrega código atualizado com correções priorizadas durante a sessão de pair review. | Compartilha plano de manutenção com responsáveis, prazos e métricas de acompanhamento."
"lesson-29","Aula 29: Avaliação NP2","Avaliar a capacidade de aplicar if/else encadeados, operadores lógicos e estruturas de repetição (while, for, do-while), bem como a modularização com funções (parâmetros, retorno e boas práticas de escopo/protótipos) em problemas práticos de pequena escala.","Aplicar condicionais encadeadas em algoritmos de tomada de decisão. | Combinar laços de repetição com contadores e acumuladores. | Modularizar soluções com funções reutilizáveis e parâmetros bem definidos.","05 | 08 | 11","Gerenciar tempo de avaliação aplicando estratégias para problemas longos. | Resolver questões integrando condicionais, laços e modularização. | Documentar raciocínio das respostas justificando escolhas algorítmicas.","Entrega avaliação NP2 completa dentro do tempo estipulado. | Registra checagem final garantindo que cada programa atende aos requisitos informados. | Anota lições aprendidas e tópicos para estudo complementar após a prova."
"lesson-30","Aula 30: Introdução a Vetores","Reconhecer vetores como estruturas de dados fundamentais, compreender sua sintaxe em C e aplicar percursos lineares para obter estatísticas simples.","Declarar e inicializar vetores em C respeitando tipos e tamanhos. | Percorrer vetores com loops for para calcular média, mínimo e máximo. | Relacionar vetores a cenários reais de armazenamento sequencial de dados.","05 | 08 | 11","Declarar vetores dimensionando corretamente e inicializando com dados de teste. | Implementar percursos que calculem estatísticas básicas validando limites de índice. | Comunicar resultados obtidos destacando interpretações para o contexto analisado.","Entrega código que lê dados em vetor, calcula métricas e apresenta relatório formatado. | Apresenta tabela de testes comprovando acesso seguro aos elementos do vetor. | Publica síntese que explica decisões tomadas e resultados alcançados com os dados coletados."
"lesson-31","Aula 31: Operações e Transformações com Vetores","Aplicar percursos sobre vetores para executar operações agregadas e construir tabelas de frequência ou rankings simples.","Implementar funções para somar, normalizar e copiar vetores. | Construir tabelas de frequência a partir de dados numéricos. | Interpretar impactos de operações em tempo e memória.","05 | 08 | 11","Projetar transformações sobre vetores utilizando acumuladores e normalizações. | Validar resultados comparando totais, médias e discrepâncias detectadas. | Registrar experimentos realizados descrevendo parâmetros e impactos observados.","Disponibiliza script que gera tabela derivada do vetor original com indicadores calculados. | Entrega planilha de verificação comprovando consistência dos resultados obtidos. | Documenta relatório curto explicando como ajustes no algoritmo afetaram os indicadores."
"lesson-32","Aula 32: Buscas em Vetores","Selecionar e implementar estratégias de busca apropriadas para localizar elementos em vetores não ordenados.","Implementar busca linear tradicional e com sentinela. | Analisar custo temporal das buscas e seu impacto em coleções grandes. | Planejar saídas informativas quando o elemento não é encontrado.","05 | 08 | 11","Implementar funções de busca linear com e sem sentinela. | Medir quantidade de comparações executadas em diferentes cenários. | Documentar recomendações de uso destacando limites e vantagens de cada variação.","Entrega biblioteca com funções de busca retornando índices corretos ou -1. | Anexa relatório com gráficos ou tabelas que mostram o número de comparações por caso. | Publica nota técnica explicando quando utilizar sentinela e implicações para desempenho."
"lesson-33","Aula 33: Matrizes 2D e Geração de Tabelas","Compreender a representação de matrizes 2D, percorrer linhas e colunas com loops aninhados e montar tabelas formatadas.","Declarar matrizes estáticas e inicializá-las com dados reais. | Percorrer linhas e colunas utilizando loops aninhados. | Gerar tabelas formatadas a partir de matrizes.","05 | 08 | 11","Mapear dados tabulares para estruturas de matrizes em C. | Construir laços aninhados que preencham e apresentem tabelas formatadas. | Explicar resultados obtidos conectando-os ao problema de negócio proposto.","Entrega programa que gera matriz 2D com cabeçalhos e alinhamento adequado. | Registra checklist de validação garantindo preenchimento correto por linha e coluna. | Realiza apresentação breve relacionando a tabela gerada com decisões possíveis no cenário estudado."
"lesson-34","Aula 34: Manipulações com Matrizes","Aplicar operações clássicas de matrizes para gerar indicadores combinados e preparar o terreno para algoritmos de processamento de imagens e dados.","Implementar funções para transpor e somar matrizes. | Executar multiplicação matricial com três loops. | Validar dimensões e tratar entradas inválidas.","05 | 08 | 11","Implementar transposição, somas e multiplicação de matrizes controlando dimensões. | Testar compatibilidade entre matrizes antes de executar operações. | Comparar desempenho e precisão das operações realizadas em cenários distintos.","Disponibiliza funções que executam operações matriciais retornando resultados corretos. | Entrega conjunto de testes automatizados ou planilhas que validam dimensões e saídas. | Documenta análise descrevendo tempo de execução e limitações observadas."
"lesson-35","Aula 35: Introdução a Structs (Registros)","Compreender a declaração, instância e manipulação inicial de structs em C, preparando-se para coleções de registros.","Declarar structs com campos adequados ao domínio proposto. | Inicializar e acessar membros por ponto e ponteiros. | Construir um mini-CRUD em memória com ênfase em criação e leitura.","05 | 08 | 11","Definir structs representando registros compostos com campos coerentes. | Implementar operações CRUD em memória validando entrada e saída de dados. | Registrar casos de teste que comprovem a integridade do fluxo de operações.","Entrega módulo com definição de struct e funções para criar, ler, atualizar e remover registros. | Anexa log de testes cobrindo operações bem-sucedidas e tratamento de erros. | Apresenta documentação resumida orientando como utilizar o CRUD implementado."
"lesson-36","Aula 36: Vetores de Structs","Estruturar vetores de structs para representar catálogos de dados e aplicar operações coletivas de ordenação e agregação.","Armazenar múltiplos registros em vetores de structs com limites configuráveis. | Aplicar ordenação simples para organizar a coleção. | Documentar o estado da coleção com relatórios resumidos.","05 | 08 | 12","Organizar vetores de structs definindo estratégias de inserção e busca. | Garantir consistência dos dados ao realizar atualizações em lote. | Conduzir revisão em pares verificando aderência a padrões de dados da turma.","Entrega repositório em memória com operações de listagem e inserção validadas. | Registra testes que comprovam manutenção da integridade após múltiplas atualizações. | Documenta feedback trocado com o par e ajustes implementados na estrutura de dados."
"lesson-37","Aula 37: Busca e Atualização em Vetores de Structs","Desenvolver habilidades para localizar, atualizar e remover registros em vetores de structs, garantindo integridade dos dados.","Implementar buscas lineares e por chave composta. | Atualizar campos selecionados mantendo histórico mínimo. | Realizar remoção lógica e física comparando abordagens.","05 | 08 | 12","Implementar buscas flexíveis em vetores de structs utilizando filtros variados. | Aplicar auditoria registrando histórico de alterações e validações. | Facilitar revisão coletiva alinhando critérios de atualização e rollback.","Disponibiliza módulo que localiza e atualiza registros com base em múltiplos campos. | Entrega log de auditoria descrevendo cada alteração realizada e testes associados. | Coordena reunião de alinhamento documentando decisões sobre políticas de atualização."
"lesson-38","Aula 38: Revisão Gamificada do Semestre","Promover revisão abrangente dos conceitos-chave da disciplina por meio de atividades gamificadas e colaborativas.","Relembrar tópicos centrais (fluxo sequencial, controle, funções, structs). | Aplicar conhecimento em desafios práticos e quizzes competitivos. | Mapear pontos de melhoria individuais a partir do ranking e feedbacks.","05 | 11 | 12","Preparar desafios que revisem conteúdos do semestre em formato gamificado. | Compartilhar explicações rápidas das soluções adotadas pela equipe. | Colaborar na facilitação da dinâmica registrando pontuações e feedbacks.","Entrega quiz ou jogo com questões alinhadas às competências trabalhadas. | Realiza apresentação de insights destacando estratégias usadas pela equipe para resolver desafios. | Consolida feedback do grupo em ata compartilhada com próximos passos de estudo."
"lesson-39","Aula 39: Avaliação NP3","Avaliar de forma global o domínio dos conteúdos trabalhados ao longo do semestre, testando a capacidade do aluno de analisar problemas e implementar soluções completas em C, com estruturas de dados básicas.","Avaliar domínio de algoritmos sequenciais, condicionais e iterativos. | Verificar a manipulação correta de vetores, matrizes e registros. | Mensurar a habilidade de decompor problemas complexos com funções.","05 | 08 | 11","Integrar conteúdos de lógica, estruturas e modularização em avaliação final. | Aplicar verificação sistemática das respostas durante a NP3. | Registrar justificativas técnicas para cada solução implementada.","Entrega avaliação NP3 completa demonstrando domínio dos tópicos do semestre. | Executa checklist de conferência antes da entrega garantindo cobertura dos requisitos. | Produz relatório pós-prova destacando raciocínios utilizados e temas a reforçar."
"lesson-40","Aula 40: Encerramento e Devolutiva","Encerrar o semestre consolidando aprendizados, oferecendo devolutivas personalizadas e mapeando próximos passos de desenvolvimento.","Apresentar síntese dos resultados das avaliações (NPs) e destacar evidências de evolução. | Promover showcase dos projetos finais com feedback estruturado e celebração da turma. | Definir plano de continuidade com roadmap de estudos (Git e estruturas de dados) e recursos de apoio.","05 | 11 | 12","Sistematizar aprendizados do semestre conectando-os a trilhas futuras de estudo. | Comunicar devolutivas finais e orientações personalizadas aos colegas. | Planejar ações coletivas de continuidade envolvendo estudos e projetos complementares.","Apresenta painel síntese com recomendações de recursos e próximos conteúdos a explorar. | Registra devolutivas individuais ou em grupo destacando conquistas e desafios. | Co-constrói plano coletivo de desenvolvimento com responsáveis e marcos definidos."
